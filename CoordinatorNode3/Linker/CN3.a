;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <delay.h>
;#include <stdlib.h>
;
;#define TXB8 0
;#define RXB8 1
;#define UPE 2
;#define DOR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define RX_BUFFER_SIZE0 1000  // USART0 Receiver buffer
;#define RX_BUFFER_SIZE1 1000  // USART1 Receiver buffer
;#define RX_BUFFER_SIZE2 255 // USART2 Receiver buffer
;#define RX_BUFFER_SIZE3 255 // USART3 Receiver buffer
;#define ADC_VREF_TYPE 0x40
;#define _ALTERNATE_GETCHAR_
;#define _ALTERNATE_PUTCHAR_
;#define USART0 0
;#define USART1 1
;#define USART2 2
;#define USART3 3
;#define STX 0x02
;#define ETX 0x03
;#define CR 0x0D
;#define LF 0x0A
;#define delimiter 0x3A
;#define XBEE_START_DELIMITER 0x7E
;#define XBEE_LENGTH_MSB 0x00
;#define XBEE_FRAME_TYPE_TXREQ 0x10
;#define XBEE_FRAME_TYPE_RXPACKET 0x90
;#define XBEE_FRAME_ID 0x00
;#define XBEE_16BIT_ADDRESS 0xFFFE
;#define BROADCAST_RADIUS 0x00
;#define XBEE_TX_OPTIONS 0x00
;
;#define DATA_OUT PORTC.0
;#define DATA_IN PINC.0
;#define SCK PORTC.1
;#define noACK 0
;#define ACK 1
;#define STATUS_REG_W 0x06
;#define STATUS_REG_R 0x07
;#define MEASURE_TEMP 0x03
;#define MEASURE_HUMI 0x05
;#define RESET 0x1E
;
;
;const int DEV_ID=0x3530; //

	.DSEG
;const char SERVER_IP[]="202.31.199.211";  // 202.31.199.211  gandeva   |||  103.236.201.125  siddiq |||   128.199.129.90 yoonsung   |||
;const unsigned int SERVER_PORT=8080;
;char rx_buffer0[RX_BUFFER_SIZE0],rx_buffer1[RX_BUFFER_SIZE1],rx_buffer2[RX_BUFFER_SIZE2],rx_buffer3[RX_BUFFER_SIZE3];
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
;unsigned char rx_wr_index3,rx_rd_index3,rx_counter3;
;bit rx_buffer_overflow0,rx_buffer_overflow1,rx_buffer_overflow2,rx_buffer_overflow3;
;unsigned char poutput;
;volatile unsigned long milSecCounter;
;char dev_id_chk[5];
;unsigned int tempervalue[2]={0,0};
;
;typedef union
;    {
;        unsigned int i;
;        float f;
;    }value;
;
;enum {TEMP,HUMI};
;
;const int ledID[]={
;    0x3530,
;    0x3531,
;    0x3532,
;    0x3533,
;};
;
;const long int led_64bitaddress_high[]={
;    0x0013A200,
;    0x0013A200,
;    0x0013A200,
;    0x0013A200,
;};
;
;
;const long int led_64bitaddress_low[]={
;    0x408B7A72,
;    0x41241D2C,
;    0x408ACFE1,
;    0x408B85E1,
;};
;
;// Declare the functions
;#pragma used+
;unsigned int read_adc(unsigned char adc_input); // Read the AD conversion result
;#pragma used-
;char getchar(void); // Get a character from the USART Receiver buffer
;void putchar(char c); // Write a character to the USART Transmitter
;unsigned int serialAvailable(void); // Count available data in serial receive buffer
;void mcuInit(void); // Initialize microcontroller
;void xbeeTransmit(char *packet,int _dataLength,long int address64H,long int address64L);
;unsigned char xbeeReceive(char * recvPacket);
;unsigned char _3gZipCall(unsigned char _state);
;unsigned char _3gZipOpen(unsigned char _socketID,unsigned char _type,char *_remoteIP,unsigned int _remotePort);
;unsigned char _3gZipSend(unsigned char _socketID,char *_data);
;unsigned char _3gZipReceive(char *_data);
;void getRequestFromServerAndRespond(void);
;void getDataFromZigbeeRouterAndForwardToServer(void);
;int hex2int(char c);
;int hex2ascii(char c,char d);
;unsigned char _3gEchoOff(void);
;unsigned int getPM10Concentration(void);
;float Calc_SHT71(float p_humidity ,float *p_temperature);
;char SHT_Measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode);
;char SHT_Write_StatusReg(unsigned char *p_value);
;char SHT_Read_StatusReg(unsigned char *p_value, unsigned char *p_checksum);
;char SHT_SoftRst(void);
;void SHT_ConnectionRest(void);
;void SHT_Transstart(void);
;char SHT_ReadByte(unsigned char ack);
;char SHT_WriteByte(unsigned char bytte);
;
;
;// Declare arbitrary sensor data
;float temperature;
;float humidity;
;unsigned int dustconcentration;
;float current3k=0;
;float current5k=1.5;
;unsigned int voltage3k=0;
;unsigned int voltage5k=260;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 008E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 008F     char status,data;
; 0000 0090     status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0091     data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0092     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0093         {
; 0000 0094             rx_buffer0[rx_wr_index0]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0095             if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0096             if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0097                 {
; 0000 0098                     rx_counter0=0;
;PCODE: $00000027 VOL: 0
; 0000 0099                     rx_buffer_overflow0=1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 009A                 };
;PCODE: $0000002A VOL: 0
; 0000 009B         };
;PCODE: $0000002B VOL: 0
; 0000 009C }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 00A0 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 00A1     char status,data;
; 0000 00A2     status=UCSR1A;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00A3     data=UDR1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 00A4     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 00A5         {
; 0000 00A6             rx_buffer1[rx_wr_index1]=data;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00A7             if (++rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00A8             if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00A9                 {
; 0000 00AA                     rx_counter1=0;
;PCODE: $0000004A VOL: 0
; 0000 00AB                     rx_buffer_overflow1=1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00AC                 };
;PCODE: $0000004D VOL: 0
; 0000 00AD         };
;PCODE: $0000004E VOL: 0
; 0000 00AE }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;// USART2 Receiver interrupt service routine
;interrupt [USART2_RXC] void usart2_rx_isr(void)
; 0000 00B2 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00B3     char status,data;
; 0000 00B4     status=UCSR2A;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00B5     data=UDR2;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00B6     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00B7         {
; 0000 00B8             rx_buffer2[rx_wr_index2]=data;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00B9             if (++rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00BA             if (++rx_counter2 == RX_BUFFER_SIZE2)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00BB                 {
; 0000 00BC                     rx_counter2=0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00BD                     rx_buffer_overflow2=1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00BE                 };
;PCODE: $00000073 VOL: 0
; 0000 00BF         };
;PCODE: $00000074 VOL: 0
; 0000 00C0 }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;interrupt [USART3_RXC] void usart3_rx_isr(void) // USART3 Receiver interrupt service routine
; 0000 00C3 {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00C4     char status,data;
; 0000 00C5     status=UCSR3A;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C6     data=UDR3;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C7     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00C8        {
; 0000 00C9        rx_buffer3[rx_wr_index3]=data;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00CA        if (++rx_wr_index3 == RX_BUFFER_SIZE3) rx_wr_index3=0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00CB        if (++rx_counter3 == RX_BUFFER_SIZE3)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00CC           {
; 0000 00CD           rx_counter3=0;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00CE           rx_buffer_overflow3=1;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00CF           };
;PCODE: $00000099 VOL: 0
; 0000 00D0        };
;PCODE: $0000009A VOL: 0
; 0000 00D1 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) // Timer 0 overflow interrupt service routine, called every 1.024 ms (250 kHz)
; 0000 00D4 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D5     milSecCounter++;
;PCODE: $000000A1 VOL: 1
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00D6 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;
;void main(void)
; 0000 00D9 {
;PCODE: $000000A8 VOL: 0
; 0000 00DA     unsigned char packindex;
; 0000 00DB     unsigned long timecounter;
; 0000 00DC     char periodicpacket[45],periodicpacket3g[90];
; 0000 00DD     value humi_val,temp_val;
; 0000 00DE     unsigned char error,checksum;
; 0000 00DF     char inp;
; 0000 00E0 
; 0000 00E1     mcuInit();
;PCODE: $000000A9 VOL: 0
;	packindex -> R17
;	timecounter -> Y+143
;	periodicpacket -> Y+98
;	periodicpacket3g -> Y+8
;	humi_val -> Y+4
;	temp_val -> Y+0
;	error -> R16
;	checksum -> R19
;	inp -> R18
;PCODE: $000000AA VOL: 0
; 0000 00E2     sprintf(dev_id_chk,"%c%c:",(char)(DEV_ID>>8),(char)(DEV_ID));
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00E3     memset(periodicpacket,0,sizeof(periodicpacket));
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E4     memset(periodicpacket3g,0,sizeof(periodicpacket3g));
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00E5     timecounter=milSecCounter;
;PCODE: $000000C6 VOL: 1
;PCODE: $000000C7 VOL: 0
; 0000 00E6     while ((milSecCounter-timecounter)<15000);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 1
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E7     SHT_SoftRst();
;PCODE: $000000D0 VOL: 0
; 0000 00E8     _3gEchoOff();
;PCODE: $000000D1 VOL: 0
; 0000 00E9     _3gZipCall(0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00EA     _3gZipCall(1);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00EB     delay_ms(2000);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00EC     _3gZipOpen(1,0,SERVER_IP,SERVER_PORT);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00ED     delay_ms(2000);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00EE 
; 0000 00EF     timecounter=milSecCounter;
;PCODE: $000000E7 VOL: 1
;PCODE: $000000E8 VOL: 0
; 0000 00F0     while (1)
;PCODE: $000000E9 VOL: 0
; 0000 00F1         {
; 0000 00F2             if ((milSecCounter-timecounter)>=19999)
;PCODE: $000000EA VOL: 1
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00F3                 {
; 0000 00F4                     error=0;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F5                     error+=SHT_Measure((unsigned char*)( &humi_val.i),&checksum,HUMI);  //measure humidity
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00F6                     error+=SHT_Measure((unsigned char*) (&temp_val.i),&checksum,TEMP);  //measure temperature
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00F7                     error += SHT_Read_StatusReg(&inp, &checksum);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00F8                     if (error!=0) SHT_ConnectionRest();
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00F9                     else
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00FA                         {
; 0000 00FB                             humi_val.f=(float)tempervalue[1];                   //converts integer to float
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00FC                             temp_val.f=(float)tempervalue[0];                   //converts integer to float
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00FD                             humi_val.f=Calc_SHT71(humi_val.f,&temp_val.f);      //calculate humidity, temperature
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00FE                         }
;PCODE: $00000124 VOL: 0
; 0000 00FF                     temperature=temp_val.f;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0100                     humidity=humi_val.f;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0101                     dustconcentration=getPM10Concentration();
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0102 
; 0000 0103                     //for testing only***********
; 0000 0104                     //poutput=USART3;
; 0000 0105                     //printf("%c%c%cT%+04.1fH%04.1f3V%03uI%03.1f5V%03uI%03.1fD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,voltage3k,current3k,voltage5k,current5k,dustconcentration,ETX,CR,LF);
; 0000 0106                     //***************************
; 0000 0107 
; 0000 0108                     sprintf(periodicpacket,"%c%c%cT%+04.1fH%04.1f3V%03uI%03.1f5V%03uI%03.1fD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,voltage3k,current3k,voltage5k,current5k,dustconcentration,ETX,CR,LF);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0109                     for (packindex=0;packindex<strlen(periodicpacket);packindex++) sprintf(periodicpacket3g+strlen(periodicpacket3g),"%02X",periodicpacket[packindex]);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 010C _3gZipSend(1,periodicpacket3g);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 010D                     memset(periodicpacket,0,sizeof(periodicpacket));
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 010E                     memset(periodicpacket3g,0,sizeof(periodicpacket3g));
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 010F                     milSecCounter=0;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 1
; 0000 0110                     timecounter=milSecCounter;
;PCODE: $0000018C VOL: 1
;PCODE: $0000018D VOL: 0
; 0000 0111                 }
; 0000 0112             getRequestFromServerAndRespond();
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0113             getDataFromZigbeeRouterAndForwardToServer();
;PCODE: $00000190 VOL: 0
; 0000 0114         };
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0115 }
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0119 {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 011A     ADMUX=(adc_input & 0x07) | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 011B     if (adc_input & 0x08) ADCSRB |= 0x08;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 011C     else ADCSRB &= 0xf7;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 011D     // Delay needed for the stabilization of the ADC input voltage
; 0000 011E     delay_us(10);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 011F     // Start the AD conversion
; 0000 0120     ADCSRA|=0x40;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0121     // Wait for the AD conversion to complete
; 0000 0122     while ((ADCSRA & 0x10)==0);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0123     ADCSRA|=0x10;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0124     return ADCW;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0125 }
;PCODE: $000001B9 VOL: 0
;
;// Get a character from the USART Receiver buffer
;char getchar(void)
; 0000 0129 {
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 012A     char data;
; 0000 012B     switch(poutput)
;PCODE: $000001BC VOL: 0
;	data -> R17
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 012C         {
; 0000 012D             case USART0:
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 012E                 while (rx_counter0==0);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 012F                 data=rx_buffer0[rx_rd_index0];
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0130                 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0131                 #asm("cli")
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
	cli
;PCODE: $000001D1 VOL: 0
; 0000 0132                 --rx_counter0;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0133                 #asm("sei")
;PCODE: $000001D5 VOL: 0
	sei
;PCODE: $000001D6 VOL: 0
; 0000 0134                 return data;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0135             break;
;PCODE: $000001DA VOL: 0
; 0000 0136 
; 0000 0137             case USART1:
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0138                 while (rx_counter1==0);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0139                 data=rx_buffer1[rx_rd_index1];
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 013A                 if (++rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 013B                 #asm("cli")
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
	cli
;PCODE: $000001EE VOL: 0
; 0000 013C                 --rx_counter1;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 013D                 #asm("sei")
;PCODE: $000001F2 VOL: 0
	sei
;PCODE: $000001F3 VOL: 0
; 0000 013E                 return data;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 013F             break;
;PCODE: $000001F7 VOL: 0
; 0000 0140 
; 0000 0141             case USART2:
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0142                 while (rx_counter2==0);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0143                 data=rx_buffer2[rx_rd_index2];
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0144                 if (++rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0145                 #asm("cli")
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
	cli
;PCODE: $0000020E VOL: 0
; 0000 0146                 --rx_counter2;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0147                 #asm("sei")
;PCODE: $00000212 VOL: 0
	sei
;PCODE: $00000213 VOL: 0
; 0000 0148                 return data;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0149             break;
;PCODE: $00000217 VOL: 0
; 0000 014A 
; 0000 014B             case USART3:
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 014C                 while (rx_counter3==0);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 014D                 data=rx_buffer3[rx_rd_index3];
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 014E                 if (++rx_rd_index3 == RX_BUFFER_SIZE3) rx_rd_index3=0;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 014F                 #asm("cli")
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
	cli
;PCODE: $0000022E VOL: 0
; 0000 0150                 --rx_counter3;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0151                 #asm("sei")
;PCODE: $00000232 VOL: 0
	sei
;PCODE: $00000233 VOL: 0
; 0000 0152                 return data;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0153             break;
;PCODE: $00000237 VOL: 0
; 0000 0154         }
;PCODE: $00000238 VOL: 0
; 0000 0155 }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;
;// Write a character to the USART Transmitter
;void putchar(char c)
; 0000 0159 {
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 015A     switch(poutput)
;	c -> Y+0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 015B         {
; 0000 015C             case USART0:
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 015D                 while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 015E                 UDR0=c;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 015F             break;
;PCODE: $0000024A VOL: 0
; 0000 0160 
; 0000 0161             case USART1:
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0162                 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0163                 UDR1=c;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0164             break;
;PCODE: $00000256 VOL: 0
; 0000 0165 
; 0000 0166             case USART2:
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0167                 while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0168                 UDR2=c;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0169             break;
;PCODE: $00000262 VOL: 0
; 0000 016A 
; 0000 016B             case USART3:
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 016C                 while ((UCSR3A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 016D                 UDR3=c;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 016E             break;
;PCODE: $0000026E VOL: 0
; 0000 016F         }
;PCODE: $0000026F VOL: 0
; 0000 0170 }
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;
;// Count available data in serial receive buffer
;unsigned int serialAvailable(void)
; 0000 0174 {
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0175     switch(poutput)
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0176         {
; 0000 0177             case USART0:
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0178                 return rx_counter0;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0179             break;
;PCODE: $0000027B VOL: 0
; 0000 017A 
; 0000 017B             case USART1:
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 017C                 return rx_counter1;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 017D             break;
;PCODE: $00000281 VOL: 0
; 0000 017E 
; 0000 017F             case USART2:
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0180                 return rx_counter2;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0181             break;
;PCODE: $00000288 VOL: 0
; 0000 0182 
; 0000 0183             case USART3:
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0184                 return rx_counter3;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 0185             break;
;PCODE: $0000028F VOL: 0
; 0000 0186         }
;PCODE: $00000290 VOL: 0
; 0000 0187 }
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;
;// Initialize microcontroller
;void mcuInit(void)
; 0000 018B {
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 018C     // Crystal Oscillator division factor: 1
; 0000 018D     #pragma optsize-
; 0000 018E     CLKPR=0x80;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 018F     CLKPR=0x00;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0190     #ifdef _OPTIMIZE_SIZE_
; 0000 0191     #pragma optsize+
; 0000 0192     #endif
; 0000 0193 
; 0000 0194     DDRC=0x00;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0195     PORTC=0x00;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0196 
; 0000 0197     TCCR0A=0x00;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0198     TCCR0B=0x03;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0199     TCNT0=0x00;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 019A     OCR0A=0x00;
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 019B     OCR0B=0x00;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 019C     TIMSK0=0x01;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 019D     // USART0 initialization
; 0000 019E     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 019F     // USART0 Receiver: On
; 0000 01A0     // USART0 Transmitter: On
; 0000 01A1     // USART0 Mode: Asynchronous
; 0000 01A2     // USART0 Baud Rate: 9600
; 0000 01A3     UCSR0A=0x00;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01A4     UCSR0B=0x98;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01A5     UCSR0C=0x06;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01A6     UBRR0H=0x00;
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01A7     UBRR0L=0x67;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01A8 
; 0000 01A9     // USART1 initialization
; 0000 01AA     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01AB     // USART1 Receiver: On
; 0000 01AC     // USART1 Transmitter: On
; 0000 01AD     // USART1 Mode: Asynchronous
; 0000 01AE     // USART1 Baud Rate: 9600
; 0000 01AF     UCSR1A=0x00;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01B0     UCSR1B=0x98;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 01B1     UCSR1C=0x06;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 01B2     UBRR1H=0x00;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 01B3     UBRR1L=0x67;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 01B4 
; 0000 01B5     // USART2 initialization
; 0000 01B6     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01B7     // USART2 Receiver: On
; 0000 01B8     // USART2 Transmitter: On
; 0000 01B9     // USART2 Mode: Asynchronous
; 0000 01BA     // USART2 Baud Rate: 9600
; 0000 01BB     UCSR2A=0x00;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01BC     UCSR2B=0x98;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01BD     UCSR2C=0x06;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01BE     UBRR2H=0x00;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01BF     UBRR2L=0x67;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01C0 
; 0000 01C1      // USART3 initialization
; 0000 01C2     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01C3     // USART3 Receiver: On
; 0000 01C4     // USART3 Transmitter: On
; 0000 01C5     // USART3 Mode: Asynchronous
; 0000 01C6     // USART3 Baud Rate: 9600
; 0000 01C7     UCSR3A=0x00;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01C8     UCSR3B=0x98;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01C9     UCSR3C=0x06;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01CA     UBRR3H=0x00;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01CB     UBRR3L=0x67;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 01CC 
; 0000 01CD     // Analog Comparator initialization
; 0000 01CE     // Analog Comparator: Off
; 0000 01CF     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01D0     ACSR=0x80;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01D1     ADCSRB=0x00;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 01D2 
; 0000 01D3     // ADC initialization
; 0000 01D4     // ADC Clock frequency: 1000.000 kHz
; 0000 01D5     // ADC Voltage Reference: AVCC pin
; 0000 01D6     // ADC Auto Trigger Source: Free Running
; 0000 01D7     // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 01D8     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 01D9     DIDR0=0x0F;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01DA     // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
; 0000 01DB     // ADC12: On, ADC13: On, ADC14: On, ADC15: On
; 0000 01DC     DIDR2=0x00;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01DD     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 01DE     ADCSRA=0xA4;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 01DF     ADCSRB&=0xF8;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01E0 
; 0000 01E1     // Global enable interrupts
; 0000 01E2     #asm("sei")
;PCODE: $000002E0 VOL: 0
	sei
;PCODE: $000002E1 VOL: 0
; 0000 01E3 }
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;
;void xbeeTransmit(char *packet,int _dataLength,long int address64H,long int address64L)
; 0000 01E6 {
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01E7     long int i;
; 0000 01E8     char checkSum,destByte,locaddH,locaddL;
; 0000 01E9     int length=0;
; 0000 01EA     int dataLength=_dataLength;
; 0000 01EB //    static char frameID=0x01;
; 0000 01EC //    frameID++;
; 0000 01ED //    if (frameID==0x00) frameID=0x01;
; 0000 01EE     locaddL=XBEE_16BIT_ADDRESS;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;	*packet -> Y+22
;	_dataLength -> Y+20
;	address64H -> Y+16
;	address64L -> Y+12
;	i -> Y+8
;	checkSum -> R17
;	destByte -> R16
;	locaddH -> R19
;	locaddL -> R18
;	length -> R20,R21
;	dataLength -> Y+6
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01EF     locaddH=XBEE_16BIT_ADDRESS>>8;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 01F0     checkSum=0xFF;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01F1     length=dataLength+14;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01F2     checkSum-=XBEE_FRAME_TYPE_TXREQ;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 01F3     checkSum-=XBEE_FRAME_ID; // checkSum-=frameID;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01F4     checkSum-=locaddL;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 01F5     checkSum-=locaddH;
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 01F6     checkSum-=BROADCAST_RADIUS;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01F7     checkSum-= XBEE_TX_OPTIONS;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01F8     poutput=USART0;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 01F9     putchar(XBEE_START_DELIMITER);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 01FA     putchar(XBEE_LENGTH_MSB);
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01FB     putchar(length);
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01FC     putchar(XBEE_FRAME_TYPE_TXREQ);
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 01FD     putchar(XBEE_FRAME_ID); // putchar(frameID);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 01FE     for (i=4;i>0;i--)
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 01FF         {
; 0000 0200             destByte=address64H>>(8*(i-1));
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0201             putchar(destByte);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0202             checkSum-=destByte;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 0203         }
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 0204     for (i=4;i>0;i--)
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 0205         {
; 0000 0206             destByte=address64L>>(8*(i-1));
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0207             putchar(destByte);
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0208             checkSum-=destByte;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0209         }
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 020A     putchar(locaddH);
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 020B     putchar(locaddL);
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 020C     putchar(BROADCAST_RADIUS);
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 020D     putchar(XBEE_TX_OPTIONS);
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 020E     for (i=0;i<dataLength;i++)
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 020F         {
; 0000 0210             putchar(packet[i]);
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0211             checkSum-=packet[i];
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0212         }
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0213     putchar(checkSum);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0214 }
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;
;unsigned char xbeeReceive(char * recvPacket)
; 0000 0217 {
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0218     char temp=0,lengthMSB=0,lengthLSB=0,index,_64sourceAddress[10]="",_16sourceAddress[4]="",rxOptions=0,_checkSum=0xFF,_recvCheckSum=0;
; 0000 0219     int packetLength=0;
; 0000 021A     poutput=USART0;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;	*recvPacket -> Y+23
;	temp -> R17
;	lengthMSB -> R16
;	lengthLSB -> R19
;	index -> R18
;	_64sourceAddress -> Y+13
;	_16sourceAddress -> Y+9
;	rxOptions -> R21
;	_checkSum -> R20
;	_recvCheckSum -> Y+8
;	packetLength -> Y+6
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 021B     if (serialAvailable())
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 021C         {
; 0000 021D             temp=getchar();
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 021E             if (temp==XBEE_START_DELIMITER)
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 021F                 {
; 0000 0220                     while (serialAvailable()<2);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 0221                     lengthMSB=getchar();
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0222                     lengthLSB=getchar();
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 0223                     packetLength=(lengthMSB<<8)+lengthLSB;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 0224                     if (packetLength>12)
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 0225                         {
; 0000 0226                             temp=getchar();
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 0227                             if (temp==XBEE_FRAME_TYPE_RXPACKET)
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 0228                                 {
; 0000 0229                                     _checkSum-=XBEE_FRAME_TYPE_RXPACKET;
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 022A                                     while (serialAvailable()<8);
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 022B                                     for (index=0;index<8;index++)
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 022C                                         {
; 0000 022D                                             temp=getchar();
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 022E                                             _64sourceAddress[index]=temp;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 022F                                             _checkSum-=temp;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 0230                                         }
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0231                                     while (serialAvailable()<2);
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 0232                                     for (index=0;index<2;index++)
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0233                                         {
; 0000 0234                                             temp=getchar();
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0235                                             _16sourceAddress[index]=temp;
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0236                                             _checkSum-=temp;
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0237                                         }
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 0238                                     while (serialAvailable()<1);
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0239                                     rxOptions=getchar();
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 023A                                     _checkSum-=rxOptions;
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 023B                                     while (serialAvailable()<12);
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 023C                                     for (index=0;index<(packetLength-12);index++)
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 023D                                         {
; 0000 023E                                             temp=getchar();
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 023F                                             recvPacket[index]=temp;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 0240                                             _checkSum-=temp;
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 0241                                         }
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 0242                                     while (serialAvailable()<1);
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 0243                                     _recvCheckSum=getchar();
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 0244                                     if (_recvCheckSum!=_checkSum)
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0245                                         {
; 0000 0246                                             memset(recvPacket,0,sizeof(recvPacket));
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0247                                             return 0;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 0248                                         }
; 0000 0249                                     else return 1;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 024A                                 }
;PCODE: $00000461 VOL: 0
; 0000 024B                             else return 0;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 024C                         }
;PCODE: $00000468 VOL: 0
; 0000 024D                     else return 0;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 024E                 }
;PCODE: $0000046F VOL: 0
; 0000 024F             else return 0;
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 0250         }
;PCODE: $00000476 VOL: 0
; 0000 0251     else return 0;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 0252 
; 0000 0253 }
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;
;unsigned char _3gEchoOff(void)
; 0000 0256 {
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 0257     char temp=0x00, index=0;
; 0000 0258     char _3gRespond[10];
; 0000 0259     memset(_3gRespond,0,sizeof(_3gRespond));
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;	temp -> R17
;	index -> R16
;	_3gRespond -> Y+2
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 025A     poutput=USART1;
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 025B     printf("ATE0\r");
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 025C     while (temp!=LF) temp=getchar();
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 025D temp=getchar();
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 025E     while (temp!=LF) // while the read character is not <LF>
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 025F         {
; 0000 0260             _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 0261             index++; // increment index
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 0262             temp=getchar(); // read a character
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
; 0000 0263             if (index==9) break; // if index reach the last element of _3gRespond array
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0000 0264         }
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 0265     if (strstr(_3gRespond,"OK")!=NULL)  return 1;
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0266     else return 0;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 0267 }
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0

	.DSEG
_0x99:
	.BYTE 0x3
;
;unsigned char _3gZipCall(unsigned char _state)
; 0000 026A {

	.CSEG
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 026B     char _3gRespond[70];
; 0000 026C     char temp=0x00, index=0;
; 0000 026D     memset(_3gRespond,0,sizeof(_3gRespond));
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;	_state -> Y+72
;	_3gRespond -> Y+2
;	temp -> R17
;	index -> R16
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 026E     poutput=USART1;
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 026F     printf("AT+ZIPCALL=%u\r",_state); // send zipcall command
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 0270     //while (serialAvailable()<13); // wait until serial available or 2500 ms passed IF command ATE1 activated
; 0000 0271     //for (index=0;index<13;index++) temp=getchar(); // get the same command string that was sent earlier IF command ATE1 activated
; 0000 0272     //temp=0x00; // reset temp var
; 0000 0273     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 0275 if (_state==1)
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 0276         {
; 0000 0277             temp=getchar(); // read 1 character from serial
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0278             while (temp!=LF) // while the read character is not <LF>
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 0279                 {
; 0000 027A                     _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
; 0000 027B                     index++; // increment index
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 027C                     temp=getchar(); // read a character
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 027D                     if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 027E                 }
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 027F             if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
; 0000 0280                 {
; 0000 0281                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; 0000 0282                     return 0;
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
; 0000 0283                 }
; 0000 0284             else if (strstr(_3gRespond,"+ZIPCALL: 1")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 0285                 {
; 0000 0286                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 0287                     temp=0x00; // reset temp var
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
; 0000 0288                     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0000 0289 index=0;
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
; 0000 028A                     temp=getchar();
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 028B                     while (temp!=LF)
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0000 028C                         {
; 0000 028D                             _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 028E                             index++; // increment index
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 028F                             temp=getchar(); // read a character
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 0290                             if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 0291                         }
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 0292                     if (strstr(_3gRespond,"OK")!=NULL) // if the  _3gRespond array contains "OK",
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 0293                         {
; 0000 0294                             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 0295                             return 1;
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 0296                         }
; 0000 0297                     else if (strstr(_3gRespond,"OK")==NULL)
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 0298                         {
; 0000 0299                             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
; 0000 029A                             return 0;
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 029B                         }
; 0000 029C                 }
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 029D         }
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 029E     else if (_state==0)
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0000 029F         {
; 0000 02A0             temp=getchar(); // read 1 character from serial
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
; 0000 02A1             while (temp!=LF) // while the read character is not <LF>
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 02A2                 {
; 0000 02A3                     _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 02A4                     index++; // increment index
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 02A5                     temp=getchar(); // read a character
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 02A6                     if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 02A7                 }
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 02A8             if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 02A9                 {
; 0000 02AA                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 02AB                     return 0;
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
; 0000 02AC                 }
; 0000 02AD             else if (strstr(_3gRespond,"OK")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
; 0000 02AE                 {
; 0000 02AF                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
; 0000 02B0                     return 1;
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
; 0000 02B1                 }
; 0000 02B2         }
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
; 0000 02B3 }
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0

	.DSEG
_0xA4:
	.BYTE 0x21
;
;unsigned char _3gZipOpen(unsigned char _socketID,unsigned char _type,char *_remoteIP,unsigned int _remotePort)
; 0000 02B6 {

	.CSEG
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
; 0000 02B7     char _3gRespond[70];
; 0000 02B8     char temp=0x00, index=0;
; 0000 02B9     memset(_3gRespond,0,sizeof(_3gRespond));
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;	_socketID -> Y+77
;	_type -> Y+76
;	*_remoteIP -> Y+74
;	_remotePort -> Y+72
;	_3gRespond -> Y+2
;	temp -> R17
;	index -> R16
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 02BA     poutput=USART1;
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
; 0000 02BB     printf("AT+ZIPOPEN=%u,%u,%s,%u\r",_socketID,_type,_remoteIP,_remotePort); // send zipcall command
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
; 0000 02BC     //while (serialAvailable()<32); // wait until serial available or 2500 ms passed, IF command ATE1 activated
; 0000 02BD     //for (index=0;index<32;index++) temp=getchar(); // get the same command string that was sent earlier, IF command ATE1 activated
; 0000 02BE     temp=0x00; // reset temp var
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
; 0000 02BF     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
; 0000 02C0 index=0;
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
; 0000 02C1     temp=getchar(); // read 1 character from serial
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
; 0000 02C2     while (temp!=LF) // while the read character is not <LF>
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0000 02C3         {
; 0000 02C4             _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
; 0000 02C5             index++; // increment index
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 02C6             temp=getchar(); // read a character
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 02C7             if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0000 02C8         }
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
; 0000 02C9     if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 02CA         {
; 0000 02CB             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
; 0000 02CC             return 0;
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 02CD         }
; 0000 02CE     else if (strstr(_3gRespond,"+ZIPSTAT: 1")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
; 0000 02CF         {
; 0000 02D0             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
; 0000 02D1             temp=0x00; // reset temp var
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
; 0000 02D2             while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
; 0000 02D3 index=0;
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0000 02D4             temp=getchar();
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0000 02D5             while (temp!=LF)
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 02D6                 {
; 0000 02D7                     _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
; 0000 02D8                     index++; // increment index
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 02D9                     temp=getchar(); // read a character
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 02DA                     if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
; 0000 02DB                 }
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
; 0000 02DC             if (strstr(_3gRespond,"OK")!=NULL) // if the  _3gRespond array contains "OK",
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0000 02DD                 {
; 0000 02DE                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
; 0000 02DF                     return 1;
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
; 0000 02E0                 }
; 0000 02E1             else if (strstr(_3gRespond,"OK")==NULL)
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; 0000 02E2                 {
; 0000 02E3                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0000 02E4                     return 0;
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
; 0000 02E5                 }
; 0000 02E6         }
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
; 0000 02E7 }
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0

	.DSEG
_0xC2:
	.BYTE 0x18
;
;unsigned char _3gZipSend(unsigned char _socketID,char *_data)
; 0000 02EA {

	.CSEG
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
; 0000 02EB     char _3gRespond[70];
; 0000 02EC     char temp=0x00, index=0;
; 0000 02ED     memset(_3gRespond,0,sizeof(_3gRespond));
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;	_socketID -> Y+74
;	*_data -> Y+72
;	_3gRespond -> Y+2
;	temp -> R17
;	index -> R16
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
; 0000 02EE     poutput=USART1;
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
; 0000 02EF     printf("AT+ZIPSEND=%u,%s\r",_socketID,_data); // send zipcall command
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 02F0     //while (serialAvailable()<30); // wait until serial available or 2500 ms passed, IF command ATE1 activated
; 0000 02F1     //for (index=0;index<(14+strlen(_data));index++) temp=getchar(); // get the same command string that was sent earliear, IF command ATE1 activated
; 0000 02F2     temp=0x00; // reset temp var
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
; 0000 02F3     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
; 0000 02F4 index=0;
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
; 0000 02F5     temp=getchar(); // read 1 character from serial
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
; 0000 02F6     while (temp!=LF) // while the read character is not <LF>
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 02F7         {
; 0000 02F8             _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
; 0000 02F9             index++; // increment index
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
; 0000 02FA             temp=getchar(); // read a character
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
; 0000 02FB             if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
; 0000 02FC         }
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
; 0000 02FD     if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0000 02FE         {
; 0000 02FF             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
; 0000 0300             return 0;
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
; 0000 0301         }
; 0000 0302     else if (strstr(_3gRespond,"OK")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
; 0000 0303         {
; 0000 0304             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 0305             temp=0x00; // reset temp var
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
; 0000 0306             while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
; 0000 0307 index=0;
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0000 0308             temp=getchar();
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
; 0000 0309             while (temp!=LF)
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
; 0000 030A                 {
; 0000 030B                     _3gRespond[index]=temp; // put temp value to _3gRespond array
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
; 0000 030C                     index++; // increment index
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0000 030D                     temp=getchar(); // read a character
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
; 0000 030E                     if (index==69) break; // if index reach the last element of _3gRespond array
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
; 0000 030F                 }
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
; 0000 0310             if (strstr(_3gRespond,"+ZIPSEND:")!=NULL) // if the  _3gRespond array contains "OK",
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
; 0000 0311                 {
; 0000 0312                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
; 0000 0313                     return 1;
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
; 0000 0314                 }
; 0000 0315             else if (strstr(_3gRespond,"+ZIPSEND:")==NULL)
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
; 0000 0316                 {
; 0000 0317                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
; 0000 0318                     return 0;
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
; 0000 0319                 }
; 0000 031A         }
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
; 0000 031B }
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0

	.DSEG
_0xD7:
	.BYTE 0x1D
;
;int hex2int(char c)
; 0000 031E {

	.CSEG
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
; 0000 031F     int first=c/16-3;
; 0000 0320     int second=c%16;
; 0000 0321     int result=first*10+second;
; 0000 0322     if (result>9) result--;
;PCODE: $0000076B VOL: 0
;	c -> Y+6
;	first -> R16,R17
;	second -> R18,R19
;	result -> R20,R21
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
; 0000 0323     return result;
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
; 0000 0324 }
;PCODE: $00000786 VOL: 0
;
;int hex2ascii(char c,char d)
; 0000 0327 {
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
; 0000 0328     int high=hex2int(c)*16;
; 0000 0329     int low=hex2int(d);
; 0000 032A     return high+low;
;PCODE: $00000789 VOL: 0
;	c -> Y+5
;	d -> Y+4
;	high -> R16,R17
;	low -> R18,R19
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
; 0000 032B }
;PCODE: $00000798 VOL: 0
;
;unsigned char _3gZipReceive(char *_data)
; 0000 032E {
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
; 0000 032F     unsigned char index=0,index1=0;
; 0000 0330     char _dataLength=0,buf=0;
; 0000 0331     char temp;
; 0000 0332     char _3gRespond[100],_dataLengthStr[3],*_3gRespond1;
; 0000 0333     memset(_3gRespond,0,sizeof(_3gRespond));
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;	*_data -> Y+111
;	index -> R17
;	index1 -> R16
;	_dataLength -> R19
;	buf -> R18
;	temp -> R21
;	_3gRespond -> Y+11
;	_dataLengthStr -> Y+8
;	*_3gRespond1 -> Y+6
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
; 0000 0334     memset(_dataLengthStr,0,sizeof(_dataLengthStr));
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
; 0000 0335     poutput=USART1;
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
; 0000 0336     if (serialAvailable())
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
; 0000 0337         {
; 0000 0338             temp=getchar();
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
; 0000 0339             if (temp=='+')
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
; 0000 033A                 {
; 0000 033B                     memset(_3gRespond,0,sizeof(_3gRespond));
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
; 0000 033C                     gets(_3gRespond,sizeof(_3gRespond)-1);
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
; 0000 033D                     if ((strstr(_3gRespond,"ZIPRECV:")!=NULL)&&(strstr(_3gRespond,",02")!=NULL))
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
; 0000 033E                         {
; 0000 033F                             _3gRespond1=strtok(_3gRespond,",");
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
; 0000 0340                             _3gRespond1=strtok(NULL,",");
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
; 0000 0341                             _3gRespond1=strtok(NULL,",");
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
; 0000 0342                             _dataLength=strlen(_3gRespond1);
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
; 0000 0343                             for (index=0;index<_dataLength;index++)
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
; 0000 0344                                 {
; 0000 0345                                     if ((index%2)!=0)
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
; 0000 0346                                         {
; 0000 0347                                             _data[index1]=hex2ascii(buf,_3gRespond1[index]);
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
; 0000 0348                                             index1++;
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
; 0000 0349                                         }
; 0000 034A                                     else buf=_3gRespond1[index];
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
; 0000 034B                                 }
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
; 0000 034C                             _data[index1]=0;
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
; 0000 034D                             return 1;
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
; 0000 034E                         }
; 0000 034F                     else return 0;
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
; 0000 0350                 }
;PCODE: $0000082B VOL: 0
; 0000 0351             else return 0;
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
; 0000 0352         }
;PCODE: $00000832 VOL: 0
; 0000 0353     else return 0;
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
; 0000 0354 }
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0

	.DSEG
_0xE8:
	.BYTE 0xD
;
;void getRequestFromServerAndRespond(void)  // no prob
; 0000 0357 {

	.CSEG
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
; 0000 0358     char request[20],_devid[3],_coordresp[40],_coordResponse[80];
; 0000 0359     unsigned char index=0,indic1=0;
; 0000 035A     int _devID;
; 0000 035B     memset(request,0,sizeof(request));
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;	request -> Y+127
;	_devid -> Y+124
;	_coordresp -> Y+84
;	_coordResponse -> Y+4
;	index -> R17
;	indic1 -> R16
;	_devID -> R18,R19
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
; 0000 035C     memset(_devid,0,sizeof(_devid));
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
; 0000 035D     memset(_coordresp,0,sizeof(_coordresp));
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
; 0000 035E     memset(_coordResponse,0,sizeof(_coordResponse));
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
; 0000 035F     indic1=_3gZipReceive(request);
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
; 0000 0360 
; 0000 0361     if (indic1==1)
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
; 0000 0362         {
; 0000 0363             if (strstr(request,dev_id_chk)!=NULL) // if the serial_command contains this device's ID
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
; 0000 0364                 {
; 0000 0365                     if (strstr(request,":ON3K")!=NULL)  //  if the request is to turn on LED 3K
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
; 0000 0366                         {
; 0000 0367                             current3k=1.5;
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
; 0000 0368                             voltage3k=260;
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
; 0000 0369                         }
; 0000 036A                     else if (strstr(request,":ON5K")!=NULL)  //  if the request is to turn on LED 5K
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
; 0000 036B                         {
; 0000 036C                             current5k=1.5;
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
; 0000 036D                             voltage5k=260;
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
; 0000 036E                         }
; 0000 036F                     else if (strstr(request,":OFF3K")!=NULL)  //  if the request is to turn off LED 3K
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
; 0000 0370                         {
; 0000 0371                             current3k=0.0;
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
; 0000 0372                             voltage3k=0;
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
; 0000 0373                         }
; 0000 0374                     else if (strstr(request,":OFF5K")!=NULL)  //  if the request is to turn off LED 5K
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
; 0000 0375                         {
; 0000 0376                             current5k=0.0;
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
; 0000 0377                             voltage5k=0;
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
; 0000 0378                         }
; 0000 0379                     else if (strstr(request,":TH")!=NULL)  //  if the request is to send temperature and humidity value
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
; 0000 037A                         {
; 0000 037B                             sprintf(_coordresp,"%c%c%cT%+04.1fH%04.1f%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,ETX,CR,LF);
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
; 0000 037C                             for (index=0;index<strlen(_coordresp);index++) sprintf(_coordResponse+strlen(_coordResponse),"%02X",_coordresp[index]);
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
; 0000 037E _3gZipSend(1,_coordResponse);
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
; 0000 037F                         }
; 0000 0380                     else if (strstr(request,":VI")!=NULL)  //  if the request is to send voltage and current value
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
; 0000 0381                         {
; 0000 0382                             sprintf(_coordresp,"%c%c%c3V%03uI%03.1f5V%03uI%03.1f%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),voltage3k,current3k,voltage5k,current5k,ETX,CR,LF);
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
; 0000 0383                             for (index=0;index<strlen(_coordresp);index++) sprintf(_coordResponse+strlen(_coordResponse),"%02X",_coordresp[index]);
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
; 0000 0385 _3gZipSend(1,_coordResponse);
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
; 0000 0386                         }
; 0000 0387                     else if (strstr(request,":D")!=NULL)    //  if the request is to send dust concentration value
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
; 0000 0388                         {
; 0000 0389                             sprintf(_coordresp,"%c%c%cD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),dustconcentration,ETX,CR,LF);
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
; 0000 038A                             for (index=0;index<strlen(_coordresp);index++) sprintf(_coordResponse+strlen(_coordResponse),"%02X",_coordresp[index]);
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
; 0000 038C _3gZipSend(1,_coordResponse);
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
; 0000 038D                         };
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
; 0000 038E                     memset(request,0,sizeof(request)); // reset serial_command array
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
; 0000 038F                 }
; 0000 0390             else if (strstr(request,dev_id_chk)==NULL)// if the serial_command doesn't contain this device's ID
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
; 0000 0391                 {
; 0000 0392                     //for (index=1;index<3;index++) _devid[index-1]=request[index];
; 0000 0393                     //_devID=atoi(_devid);
; 0000 0394                     _devID=(request[1]<<8)+request[2];
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
; 0000 0395                     for (index=0;index<sizeof(ledID);index++)
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
; 0000 0396                         {
; 0000 0397                             if (_devID==ledID[index]) break;
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
; 0000 0398                         }
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
; 0000 0399                     xbeeTransmit(request,strlen(request),led_64bitaddress_high[index],led_64bitaddress_low[index]);
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
; 0000 039A                 }
; 0000 039B         }
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
; 0000 039C }
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0

	.DSEG
_0xF6:
	.BYTE 0x25
;
;void getDataFromZigbeeRouterAndForwardToServer(void)
; 0000 039F {

	.CSEG
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
; 0000 03A0     char receivedPacket[40],_3gPacket[80];
; 0000 03A1     unsigned char index,indic1;
; 0000 03A2     memset(receivedPacket,0,sizeof(receivedPacket));
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;	receivedPacket -> Y+82
;	_3gPacket -> Y+2
;	index -> R17
;	indic1 -> R16
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
; 0000 03A3     memset(_3gPacket,0,sizeof(_3gPacket));
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
; 0000 03A4     indic1=xbeeReceive(receivedPacket);
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
; 0000 03A5     if (indic1==1)
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
; 0000 03A6         {
; 0000 03A7             for (index=0;index<strlen(receivedPacket);index++) sprintf(_3gPacket+strlen(_3gPacket),"%02X",receivedPacket[index]);
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
; 0000 03A9 _3gZipSend(1,_3gPacket);
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
;PCODE: $00000A2A VOL: 0
; 0000 03AA         }
; 0000 03AB }
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;
;unsigned int getPM10Concentration(void)
; 0000 03AE {
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
; 0000 03AF     unsigned char i;
; 0000 03B0     unsigned long d[14],measuredValue;
; 0000 03B1     unsigned int CAI; // comprehensive air-quality index (korean AQI)
; 0000 03B2     float pm10Conc;
; 0000 03B3     poutput=USART2;
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;	i -> R17
;	d -> Y+12
;	measuredValue -> Y+8
;	CAI -> R18,R19
;	pm10Conc -> Y+4
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
; 0000 03B4     putchar(0x11);
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
; 0000 03B5     putchar(0x01);
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
; 0000 03B6     putchar(0x01);
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
; 0000 03B7     putchar(0xED);
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
; 0000 03B8     if (getchar()==0x16)
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
; 0000 03B9         {
; 0000 03BA             if (getchar()==0x0D)
;PCODE: $00000A48 VOL: 0
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
; 0000 03BB                 {
; 0000 03BC                     if (getchar()==0x01)
;PCODE: $00000A4B VOL: 0
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
; 0000 03BD                         {
; 0000 03BE                             for (i=0;i<13;i++) d[i]=getchar();
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
; 0000 03BF }
; 0000 03C0                 }
;PCODE: $00000A66 VOL: 0
; 0000 03C1         }
;PCODE: $00000A67 VOL: 0
; 0000 03C2     measuredValue=d[0]<<24|d[1]<<16|d[2]<<8|d[3]; //arrange the value
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
; 0000 03C3     pm10Conc=measuredValue*0.03528;
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
; 0000 03C4     if (pm10Conc>600.0) pm10Conc=600.0; //set 600 as highest concentration value, for CAI conversion purposes
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
; 0000 03C5 
; 0000 03C6     // PM10 to CAI conversion, see http://www.airkorea.or.kr/eng/cai/cai1
; 0000 03C7     if ((0.0<=pm10Conc)&&(pm10Conc<31.0)) CAI=(unsigned int)(pm10Conc*5/3);
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
; 0000 03C8     else if ((31.0<=pm10Conc)&&(pm10Conc<81.0)) CAI=(unsigned int)(pm10Conc+20);
;PCODE: $00000A98 VOL: 0
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
; 0000 03C9     else if ((81.0<=pm10Conc)&&(pm10Conc<151.0)) CAI=(unsigned int)((pm10Conc-81)*149/69+101);
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
; 0000 03CA     else if ((151.0<=pm10Conc)&&(pm10Conc<=600.0)) CAI=(unsigned int)((pm10Conc-151)*249/449+251);
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
; 0000 03CB     return CAI;
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
; 0000 03CC 
; 0000 03CD     //return (unsigned int)(measuredValue*0.03528); // pm10 concentration in ug/mm3
; 0000 03CE }
;PCODE: $00000AE7 VOL: 0
;
;char SHT_WriteByte(unsigned char bytte)
; 0000 03D1 {
;PCODE: $00000AE8 VOL: 0
;PCODE: $00000AE9 VOL: 0
; 0000 03D2     unsigned char i,error=0;
; 0000 03D3     DDRC = 0b00000011;    //
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;	bytte -> Y+2
;	i -> R17
;	error -> R16
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
; 0000 03D4     for (i=0x80;i>0;i/=2) //shift bit for masking
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
; 0000 03D5         {
; 0000 03D6             if (i & bytte)
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
; 0000 03D7             DATA_OUT=1; //masking value with i , write to SENSI-BUS
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
; 0000 03D8             else DATA_OUT=0;
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
; 0000 03D9             SCK=1;      //clk for SENSI-BUS
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
;PCODE: $00000B07 VOL: 0
; 0000 03DA             delay_us(5); //pulswith approx. 5 us
;PCODE: $00000B08 VOL: 0
; 0000 03DB             SCK=0;
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
; 0000 03DC         }
;PCODE: $00000B0B VOL: 0
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
; 0000 03DD     DATA_OUT=1;            //release dataline
;PCODE: $00000B13 VOL: 0
;PCODE: $00000B14 VOL: 0
; 0000 03DE     DDRC = 0b00000010;    // DATA is Output
;PCODE: $00000B15 VOL: 0
;PCODE: $00000B16 VOL: 0
; 0000 03DF     SCK=1;                //clk #9 for ack
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
; 0000 03E0     delay_us(2);
;PCODE: $00000B19 VOL: 0
; 0000 03E1     error=DATA_IN;       //check ack (DATA will be pulled down by SHT11)
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
; 0000 03E2     delay_us(2);
;PCODE: $00000B1D VOL: 0
; 0000 03E3     SCK=0;
;PCODE: $00000B1E VOL: 0
;PCODE: $00000B1F VOL: 0
; 0000 03E4     return error;       //error=1 in case of no acknowledge
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
;PCODE: $00000B26 VOL: 0
; 0000 03E5 }
;PCODE: $00000B27 VOL: 0
;
;char SHT_ReadByte(unsigned char ack)
; 0000 03E8 {
;PCODE: $00000B28 VOL: 0
;PCODE: $00000B29 VOL: 0
; 0000 03E9     unsigned char i,val=0;
; 0000 03EA     DDRC = 0b00000010;    // DATA is Input
;PCODE: $00000B2A VOL: 0
;PCODE: $00000B2B VOL: 0
;	ack -> Y+2
;	i -> R17
;	val -> R16
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
;PCODE: $00000B2F VOL: 0
; 0000 03EB     for (i=0x80;i>0;i/=2)             //shift bit for masking
;PCODE: $00000B30 VOL: 0
;PCODE: $00000B31 VOL: 0
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
; 0000 03EC         {
; 0000 03ED             SCK=1;                          //clk for SENSI-BUS
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
; 0000 03EE             delay_us(2);
;PCODE: $00000B3E VOL: 0
; 0000 03EF             if (DATA_IN) val=(val | i);        //read bit
;PCODE: $00000B3F VOL: 0
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
; 0000 03F0             delay_us(2);
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
; 0000 03F1             SCK=0;
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
; 0000 03F2         }
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
; 0000 03F3     DDRC = 0b00000011;    // DATA is Output
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
; 0000 03F4     DATA_OUT=!ack;        //in case of "ack==1" pull down DATA-Line
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
; 0000 03F5     SCK=1;                //clk #9 for ack
;PCODE: $00000B5C VOL: 0
;PCODE: $00000B5D VOL: 0
; 0000 03F6     delay_us(5);          //pulswith approx. 5 us
;PCODE: $00000B5E VOL: 0
; 0000 03F7     SCK=0;
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
; 0000 03F8     DATA_OUT=1;           //release DATA-line  //ADD BY LUBING
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
; 0000 03F9     return val;
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
; 0000 03FA }
;PCODE: $00000B6A VOL: 0
;
;void SHT_Transstart(void)
; 0000 03FD {
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
; 0000 03FE     DDRC = 0b00000011;    // DATA is Output
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
; 0000 03FF     DATA_OUT=1; SCK=0;   //Initial state
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
; 0000 0400     delay_us(2);
;PCODE: $00000B73 VOL: 0
; 0000 0401     SCK=1;
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
; 0000 0402     delay_us(2);
;PCODE: $00000B76 VOL: 0
; 0000 0403     DATA_OUT=0;
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
; 0000 0404     delay_us(2);
;PCODE: $00000B79 VOL: 0
; 0000 0405     SCK=0;
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
; 0000 0406     delay_us(5);
;PCODE: $00000B7C VOL: 0
; 0000 0407     SCK=1;
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
; 0000 0408     delay_us(2);
;PCODE: $00000B7F VOL: 0
; 0000 0409     DATA_OUT=1;
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
; 0000 040A     delay_us(2);
;PCODE: $00000B82 VOL: 0
; 0000 040B     SCK=0;
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
; 0000 040C     DDRC = 0b00000010;    // DATA is Input
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
; 0000 040D }
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
;
;void SHT_ConnectionRest(void)
; 0000 0410 {
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
; 0000 0411     unsigned char i;
; 0000 0412     DDRC = 0b00000011;    // DATA is output
;PCODE: $00000B8B VOL: 0
;	i -> R17
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
; 0000 0413     DATA_OUT=1; SCK=0;                    //Initial state
;PCODE: $00000B8E VOL: 0
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
; 0000 0414     for(i=0;i<9;i++)                  //9 SCK cycles
;PCODE: $00000B92 VOL: 0
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
;PCODE: $00000B99 VOL: 0
;PCODE: $00000B9A VOL: 0
; 0000 0415         {
; 0000 0416             SCK=1;
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
; 0000 0417             delay_us(1);
;PCODE: $00000B9D VOL: 0
; 0000 0418             SCK=0;
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
; 0000 0419             delay_us(1);
;PCODE: $00000BA0 VOL: 0
; 0000 041A         }
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
; 0000 041B     SHT_Transstart();                   //transmission start
;PCODE: $00000BA6 VOL: 0
; 0000 041C     DDRC = 0b00000010;    // DATA is Input
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
; 0000 041D }
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;
;char SHT_SoftRst(void)
; 0000 0420 {
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
; 0000 0421     unsigned char error=0;
; 0000 0422     SHT_ConnectionRest();              //reset communication
;PCODE: $00000BAE VOL: 0
;	error -> R17
;PCODE: $00000BAF VOL: 0
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
; 0000 0423     error+=SHT_WriteByte(RESET);       //send RESET-command to sensor
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
; 0000 0424     return error;                     //error=1 in case of no response form the sensor
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
; 0000 0425 }
;PCODE: $00000BBA VOL: 0
;
;char SHT_Read_StatusReg(unsigned char *p_value, unsigned char *p_checksum)
; 0000 0428 {
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
; 0000 0429     unsigned char error=0;
; 0000 042A     SHT_Transstart();                   //transmission start
;PCODE: $00000BBD VOL: 0
;	*p_value -> Y+3
;	*p_checksum -> Y+1
;	error -> R17
;PCODE: $00000BBE VOL: 0
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
; 0000 042B     error=SHT_WriteByte(STATUS_REG_R); //send command to sensor
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
; 0000 042C     *p_value=SHT_ReadByte(ACK);        //read status register (8-bit)
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
; 0000 042D     *p_checksum=SHT_ReadByte(noACK);   //read checksum (8-bit)
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
; 0000 042E     return error;                     //error=1 in case of no response form the sensor
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
; 0000 042F }
;PCODE: $00000BD4 VOL: 0
;
;char SHT_Write_StatusReg(unsigned char *p_value)
; 0000 0432 {
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
; 0000 0433     unsigned char error=0;
; 0000 0434     SHT_Transstart();                   //transmission start
;PCODE: $00000BD7 VOL: 0
;	*p_value -> Y+1
;	error -> R17
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
; 0000 0435     error+=SHT_WriteByte(STATUS_REG_W);//send command to sensor
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
; 0000 0436     error+=SHT_WriteByte(*p_value);    //send value of status register
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
; 0000 0437     return error;                     //error>=1 in case of no response form the sensor
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
; 0000 0438 }
;PCODE: $00000BEB VOL: 0
;
;char SHT_Measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
; 0000 043B {
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
; 0000 043C     unsigned error=0;
; 0000 043D     unsigned int temp=0;
; 0000 043E     SHT_Transstart();                   //transmission start
;PCODE: $00000BEE VOL: 0
;	*p_value -> Y+7
;	*p_checksum -> Y+5
;	mode -> Y+4
;	error -> R16,R17
;	temp -> R18,R19
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
;PCODE: $00000BF3 VOL: 0
; 0000 043F     switch(mode)
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
; 0000 0440         {                     //send command to sensor
; 0000 0441             case TEMP : error+=SHT_WriteByte(MEASURE_TEMP); break;
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
; 0000 0442             case HUMI : error+=SHT_WriteByte(MEASURE_HUMI); break;
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
;PCODE: $00000C08 VOL: 0
; 0000 0443             default      : break;
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
; 0000 0444         }
;PCODE: $00000C0B VOL: 0
; 0000 0445     DDRC = 0b00000010;    // DATA is input
;PCODE: $00000C0C VOL: 0
;PCODE: $00000C0D VOL: 0
; 0000 0446     while (1)
;PCODE: $00000C0E VOL: 0
; 0000 0447         {
; 0000 0448             if(DATA_IN==0) break; //wait until sensor has finished the measurement
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
; 0000 0449         }
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
;PCODE: $00000C15 VOL: 0
; 0000 044A     if(DATA_IN) error+=1;                // or timeout (~2 sec.) is reached
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
; 0000 044B     switch(mode)
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
; 0000 044C         {                     //send command to sensor
; 0000 044D             case TEMP : temp=0;
;PCODE: $00000C1E VOL: 0
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
; 0000 044E                                 temp=SHT_ReadByte(ACK);
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
;PCODE: $00000C24 VOL: 0
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
; 0000 044F                                 temp<<=8;
;PCODE: $00000C27 VOL: 0
; 0000 0450                                 tempervalue[0]=temp;
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
; 0000 0451                                 temp=0;
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
; 0000 0452                                 temp=SHT_ReadByte(ACK);
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
; 0000 0453                                 tempervalue[0]|=temp;
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
; 0000 0454                                 break;
;PCODE: $00000C35 VOL: 0
; 0000 0455             case HUMI : temp=0;
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
; 0000 0456                                 temp=SHT_ReadByte(ACK);
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
; 0000 0457                                 temp<<=8;
;PCODE: $00000C40 VOL: 0
; 0000 0458                                 tempervalue[1]=temp;
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
;PCODE: $00000C43 VOL: 0
; 0000 0459                                 temp=0;
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
; 0000 045A                                 temp=SHT_ReadByte(ACK);
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
; 0000 045B                                 tempervalue[1]|=temp;
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
; 0000 045C                                 break;
;PCODE: $00000C50 VOL: 0
; 0000 045D             default      : break;
;PCODE: $00000C51 VOL: 0
;PCODE: $00000C52 VOL: 0
; 0000 045E         }
;PCODE: $00000C53 VOL: 0
; 0000 045F     *p_checksum =SHT_ReadByte(noACK);  //read checksum
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
;PCODE: $00000C58 VOL: 0
; 0000 0460     return error;
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
; 0000 0461 }
;PCODE: $00000C5D VOL: 0
;
;float Calc_SHT71(float p_humidity ,float *p_temperature)
; 0000 0464 {
;PCODE: $00000C5E VOL: 0
;PCODE: $00000C5F VOL: 0
; 0000 0465     const float C1=-4.0;              // for 12 Bit
; 0000 0466     const float C2=+0.0405;           // for 12 Bit
; 0000 0467     const float C3=-0.0000028;        // for 12 Bit
; 0000 0468     const float T1=+0.01;             // for 14 Bit @ 5V
; 0000 0469     const float T2=+0.00008;           // for 14 Bit @ 5V
; 0000 046A     float rh_lin;                     // rh_lin:  Humidity linear
; 0000 046B     float rh_true;                    // rh_true: Temperature compensated humidity
; 0000 046C     float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
; 0000 046D     float rh=p_humidity;             // rh:      Humidity [Ticks] 12 Bit
; 0000 046E     float t_C;                        // t_C   :  Temperature [?]
; 0000 046F     t_C=t*0.01 - 40;                  //calc. temperature from ticks to [?]
;PCODE: $00000C60 VOL: 0
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
;	p_humidity -> Y+42
;	*p_temperature -> Y+40
;	C1 -> Y+36
;	C2 -> Y+32
;	C3 -> Y+28
;	T1 -> Y+24
;	T2 -> Y+20
;	rh_lin -> Y+16
;	rh_true -> Y+12
;	t -> Y+8
;	rh -> Y+4
;	t_C -> Y+0
;PCODE: $00000C65 VOL: 0
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
; 0000 0470     rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
;PCODE: $00000C78 VOL: 0
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
; 0000 0471     rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //calc. temperature compensated humidity [%RH]
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
; 0000 0472     if(rh_true>100)rh_true=100;       //cut if the value is outside of
;PCODE: $00000C8E VOL: 0
;PCODE: $00000C8F VOL: 0
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
; 0000 0473     if(rh_true<0.1)rh_true=0.1;       //the physical possible range
;PCODE: $00000C94 VOL: 0
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
; 0000 0474     *p_temperature=t_C;               //return temperature [?]
;PCODE: $00000C9B VOL: 0
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
; 0000 0475     return rh_true;
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;PCODE: $00000CA1 VOL: 0
; 0000 0476 }
;PCODE: $00000CA2 VOL: 0
;
;
