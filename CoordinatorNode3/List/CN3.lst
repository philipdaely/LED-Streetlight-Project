
AVRASM ver. 2.1.30  C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm Sun Dec 04 00:12:41 2016

C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1057): warning: Register r3 already defined by the .DEF directive
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1058): warning: Register r5 already defined by the .DEF directive
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1059): warning: Register r7 already defined by the .DEF directive
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1060): warning: Register r9 already defined by the .DEF directive
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1061): warning: Register r11 already defined by the .DEF directive
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1062): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Advanced
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega2560
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 2048 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega2560
                 	#pragma AVRPART MEMORY PROG_FLASH 262144
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x74
                 	.EQU XMCRB=0x75
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R5
                 	.DEF _rx_counter0=R7
                 	.DEF _rx_wr_index1=R9
                 	.DEF _rx_rd_index1=R11
                 	.DEF _rx_counter1=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 01a7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0296 	JMP  _timer0_ovf_isr
000030 940c 0000 	JMP  0x00
000032 940c 01e5 	JMP  _usart0_rx_isr
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0210 	JMP  _usart1_rx_isr
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0000 	JMP  0x00
000064 940c 0000 	JMP  0x00
000066 940c 023b 	JMP  _usart2_rx_isr
000068 940c 0000 	JMP  0x00
00006a 940c 0000 	JMP  0x00
00006c 940c 0265 	JMP  _usart3_rx_isr
00006e 940c 0000 	JMP  0x00
000070 940c 0000 	JMP  0x00
                 
                 _0x3:
000072 3530      	.DB  0x30,0x35
                 _0x4:
000073 3032
000074 2e32
000075 3133
000076 312e      	.DB  0x32,0x30,0x32,0x2E,0x33,0x31,0x2E,0x31
000077 3939
000078 322e
000079 3131      	.DB  0x39,0x39,0x2E,0x32,0x31,0x31
                 _0x5:
00007a 1f90      	.DB  0x90,0x1F
                 _0x6:
00007b 3530
00007c 3531
00007d 3532
00007e 3533      	.DB  0x30,0x35,0x31,0x35,0x32,0x35,0x33,0x35
                 _0x7:
00007f a200
000080 0013
000081 a200
000082 0013      	.DB  0x0,0xA2,0x13,0x0,0x0,0xA2,0x13,0x0
000083 a200
000084 0013
000085 a200
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1137): warning: .cseg .db misalignment - padding zero byte
000086 0013      	.DB  0x0,0xA2,0x13,0x0,0x0,0xA2,0x13
                 _0x8:
000087 7a72
000088 408b
000089 1d2c
00008a 4124      	.DB  0x72,0x7A,0x8B,0x40,0x2C,0x1D,0x24,0x41
00008b cfe1
00008c 408a
00008d 85e1
00008e 408b      	.DB  0xE1,0xCF,0x8A,0x40,0xE1,0x85,0x8B,0x40
                 _0x9:
00008f 0000
000090 3fc0      	.DB  0x0,0x0,0xC0,0x3F
                 _0xA:
000091 0104      	.DB  0x4,0x1
                 _0x6B:
000092 0000
000093 0000
000094 0000
000095 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000096 0000
000097 0000
000098 0000
000099 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1148): warning: .cseg .db misalignment - padding zero byte
00009a 0000      	.DB  0x0
                 _0x17B:
00009b c5ac
00009c 38a7
00009d d70a
00009e 3c23      	.DB  0xAC,0xC5,0xA7,0x38,0xA,0xD7,0x23,0x3C
00009f e7a2
0000a0 b63b
0000a1 e354
0000a2 3d25      	.DB  0xA2,0xE7,0x3B,0xB6,0x54,0xE3,0x25,0x3D
0000a3 0000
0000a4 c080      	.DB  0x0,0x0,0x80,0xC0
                 _0x0:
0000a5 6325
0000a6 6325
0000a7 003a
0000a8 6325      	.DB  0x25,0x63,0x25,0x63,0x3A,0x0,0x25,0x63
0000a9 6325
0000aa 6325
0000ab 2554
0000ac 302b      	.DB  0x25,0x63,0x25,0x63,0x54,0x25,0x2B,0x30
0000ad 2e34
0000ae 6631
0000af 2548
0000b0 3430      	.DB  0x34,0x2E,0x31,0x66,0x48,0x25,0x30,0x34
0000b1 312e
0000b2 3366
0000b3 2556
0000b4 3330      	.DB  0x2E,0x31,0x66,0x33,0x56,0x25,0x30,0x33
0000b5 4975
0000b6 3025
0000b7 2e33
0000b8 6631      	.DB  0x75,0x49,0x25,0x30,0x33,0x2E,0x31,0x66
0000b9 5635
0000ba 3025
0000bb 7533
0000bc 2549      	.DB  0x35,0x56,0x25,0x30,0x33,0x75,0x49,0x25
0000bd 3330
0000be 312e
0000bf 4466
0000c0 3025      	.DB  0x30,0x33,0x2E,0x31,0x66,0x44,0x25,0x30
0000c1 7533
0000c2 6325
0000c3 6325
0000c4 6325      	.DB  0x33,0x75,0x25,0x63,0x25,0x63,0x25,0x63
0000c5 2500
0000c6 3230
0000c7 0058
0000c8 5441      	.DB  0x0,0x25,0x30,0x32,0x58,0x0,0x41,0x54
0000c9 3045
0000ca 000d
0000cb 4b4f
0000cc 4100      	.DB  0x45,0x30,0xD,0x0,0x4F,0x4B,0x0,0x41
0000cd 2b54
0000ce 495a
0000cf 4350
0000d0 4c41      	.DB  0x54,0x2B,0x5A,0x49,0x50,0x43,0x41,0x4C
0000d1 3d4c
0000d2 7525
0000d3 000d
0000d4 5245      	.DB  0x4C,0x3D,0x25,0x75,0xD,0x0,0x45,0x52
0000d5 4f52
0000d6 0052
0000d7 5a2b
0000d8 5049      	.DB  0x52,0x4F,0x52,0x0,0x2B,0x5A,0x49,0x50
0000d9 4143
0000da 4c4c
0000db 203a
0000dc 0031      	.DB  0x43,0x41,0x4C,0x4C,0x3A,0x20,0x31,0x0
0000dd 5441
0000de 5a2b
0000df 5049
0000e0 504f      	.DB  0x41,0x54,0x2B,0x5A,0x49,0x50,0x4F,0x50
0000e1 4e45
0000e2 253d
0000e3 2c75
0000e4 7525      	.DB  0x45,0x4E,0x3D,0x25,0x75,0x2C,0x25,0x75
0000e5 252c
0000e6 2c73
0000e7 7525
0000e8 000d      	.DB  0x2C,0x25,0x73,0x2C,0x25,0x75,0xD,0x0
0000e9 5a2b
0000ea 5049
0000eb 5453
0000ec 5441      	.DB  0x2B,0x5A,0x49,0x50,0x53,0x54,0x41,0x54
0000ed 203a
0000ee 0031
0000ef 5441
0000f0 5a2b      	.DB  0x3A,0x20,0x31,0x0,0x41,0x54,0x2B,0x5A
0000f1 5049
0000f2 4553
0000f3 444e
0000f4 253d      	.DB  0x49,0x50,0x53,0x45,0x4E,0x44,0x3D,0x25
0000f5 2c75
0000f6 7325
0000f7 000d
0000f8 5a2b      	.DB  0x75,0x2C,0x25,0x73,0xD,0x0,0x2B,0x5A
0000f9 5049
0000fa 4553
0000fb 444e
0000fc 003a      	.DB  0x49,0x50,0x53,0x45,0x4E,0x44,0x3A,0x0
0000fd 495a
0000fe 5250
0000ff 4345
000100 3a56      	.DB  0x5A,0x49,0x50,0x52,0x45,0x43,0x56,0x3A
000101 2c00
000102 3230
000103 2c00
000104 3a00      	.DB  0x0,0x2C,0x30,0x32,0x0,0x2C,0x0,0x3A
000105 4e4f
000106 4b33
000107 3a00
000108 4e4f      	.DB  0x4F,0x4E,0x33,0x4B,0x0,0x3A,0x4F,0x4E
000109 4b35
00010a 3a00
00010b 464f
00010c 3346      	.DB  0x35,0x4B,0x0,0x3A,0x4F,0x46,0x46,0x33
00010d 004b
00010e 4f3a
00010f 4646
000110 4b35      	.DB  0x4B,0x0,0x3A,0x4F,0x46,0x46,0x35,0x4B
000111 3a00
000112 4854
000113 2500
000114 2563      	.DB  0x0,0x3A,0x54,0x48,0x0,0x25,0x63,0x25
000115 2563
000116 5463
000117 2b25
000118 3430      	.DB  0x63,0x25,0x63,0x54,0x25,0x2B,0x30,0x34
000119 312e
00011a 4866
00011b 3025
00011c 2e34      	.DB  0x2E,0x31,0x66,0x48,0x25,0x30,0x34,0x2E
00011d 6631
00011e 6325
00011f 6325
000120 6325      	.DB  0x31,0x66,0x25,0x63,0x25,0x63,0x25,0x63
000121 3a00
000122 4956
000123 2500
000124 2563      	.DB  0x0,0x3A,0x56,0x49,0x0,0x25,0x63,0x25
000125 2563
000126 3363
000127 2556
000128 3330      	.DB  0x63,0x25,0x63,0x33,0x56,0x25,0x30,0x33
000129 4975
00012a 3025
00012b 2e33
00012c 6631      	.DB  0x75,0x49,0x25,0x30,0x33,0x2E,0x31,0x66
00012d 5635
00012e 3025
00012f 7533
000130 2549      	.DB  0x35,0x56,0x25,0x30,0x33,0x75,0x49,0x25
000131 3330
000132 312e
000133 2566
000134 2563      	.DB  0x30,0x33,0x2E,0x31,0x66,0x25,0x63,0x25
000135 2563
000136 0063
000137 443a
000138 2500      	.DB  0x63,0x25,0x63,0x0,0x3A,0x44,0x0,0x25
000139 2563
00013a 2563
00013b 4463
00013c 3025      	.DB  0x63,0x25,0x63,0x25,0x63,0x44,0x25,0x30
00013d 7533
00013e 6325
00013f 6325
000140 6325      	.DB  0x33,0x75,0x25,0x63,0x25,0x63,0x25,0x63
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1193): warning: .cseg .db misalignment - padding zero byte
000141 0000      	.DB  0x0
                 _0x2000000:
000142 4e2d
000143 4e41
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1195): warning: .cseg .db misalignment - padding zero byte
000144 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x204005F:
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1197): warning: .cseg .db misalignment - padding zero byte
000145 0001      	.DB  0x1
                 _0x2040000:
000146 4e2d
000147 4e41
C:\cvavr2\mycode\CoordinatorNode3\List\CN3.asm(1199): warning: .cseg .db misalignment - padding zero byte
000148 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
000149 000e      	.DW  0x0E
00014a 0a8b      	.DW  _SERVER_IP
00014b 00e6      	.DW  _0x4*2
                 
00014c 0008      	.DW  0x08
00014d 147c      	.DW  _ledID
00014e 00f6      	.DW  _0x6*2
                 
00014f 000f      	.DW  0x0F
000150 1484      	.DW  _led_64bitaddress_high
000151 00fe      	.DW  _0x7*2
                 
000152 0010      	.DW  0x10
000153 1494      	.DW  _led_64bitaddress_low
000154 010e      	.DW  _0x8*2
                 
000155 0004      	.DW  0x04
000156 14b2      	.DW  _current5k
000157 011e      	.DW  _0x9*2
                 
000158 0002      	.DW  0x02
000159 14b8      	.DW  _voltage5k
00015a 0122      	.DW  _0xA*2
                 
00015b 0003      	.DW  0x03
00015c 0a00      	.DW  _0x99
00015d 0196      	.DW  _0x0*2+76
                 
00015e 0006      	.DW  0x06
00015f 0a03      	.DW  _0xA4
000160 01a8      	.DW  _0x0*2+94
                 
000161 000c      	.DW  0x0C
000162 0a09      	.DW  _0xA4+6
000163 01ae      	.DW  _0x0*2+100
                 
000164 0003      	.DW  0x03
000165 0a15      	.DW  _0xA4+18
000166 01b7      	.DW  _0x0*2+109
                 
000167 0003      	.DW  0x03
000168 0a18      	.DW  _0xA4+21
000169 01b7      	.DW  _0x0*2+109
                 
00016a 0006      	.DW  0x06
00016b 0a1b      	.DW  _0xA4+24
00016c 01b4      	.DW  _0x0*2+106
                 
00016d 0003      	.DW  0x03
00016e 0a21      	.DW  _0xA4+30
00016f 01b7      	.DW  _0x0*2+109
                 
000170 0006      	.DW  0x06
000171 0a24      	.DW  _0xC2
000172 01cc      	.DW  _0x0*2+130
                 
000173 000c      	.DW  0x0C
000174 0a2a      	.DW  _0xC2+6
000175 01d2      	.DW  _0x0*2+136
                 
000176 0003      	.DW  0x03
000177 0a36      	.DW  _0xC2+18
000178 01db      	.DW  _0x0*2+145
                 
000179 0003      	.DW  0x03
00017a 0a39      	.DW  _0xC2+21
00017b 01db      	.DW  _0x0*2+145
                 
00017c 0006      	.DW  0x06
00017d 0a3c      	.DW  _0xD7
00017e 01ea      	.DW  _0x0*2+160
                 
00017f 0003      	.DW  0x03
000180 0a42      	.DW  _0xD7+6
000181 01ed      	.DW  _0x0*2+163
                 
000182 000a      	.DW  0x0A
000183 0a45      	.DW  _0xD7+9
000184 01f0      	.DW  _0x0*2+166
                 
000185 000a      	.DW  0x0A
000186 0a4f      	.DW  _0xD7+19
000187 01f0      	.DW  _0x0*2+166
                 
000188 0009      	.DW  0x09
000189 0a59      	.DW  _0xE8
00018a 01fa      	.DW  _0x0*2+176
                 
00018b 0004      	.DW  0x04
00018c 0a62      	.DW  _0xE8+9
00018d 0203      	.DW  _0x0*2+185
                 
00018e 0006      	.DW  0x06
00018f 0a66      	.DW  _0xF6
000190 0209      	.DW  _0x0*2+191
                 
000191 0006      	.DW  0x06
000192 0a6c      	.DW  _0xF6+6
000193 020f      	.DW  _0x0*2+197
                 
000194 0007      	.DW  0x07
000195 0a72      	.DW  _0xF6+12
000196 0215      	.DW  _0x0*2+203
                 
000197 0007      	.DW  0x07
000198 0a79      	.DW  _0xF6+19
000199 021c      	.DW  _0x0*2+210
                 
00019a 0004      	.DW  0x04
00019b 0a80      	.DW  _0xF6+26
00019c 0223      	.DW  _0x0*2+217
                 
00019d 0004      	.DW  0x04
00019e 0a84      	.DW  _0xF6+30
00019f 0243      	.DW  _0x0*2+249
                 
0001a0 0003      	.DW  0x03
0001a1 0a88      	.DW  _0xF6+34
0001a2 026e      	.DW  _0x0*2+292
                 
0001a3 0001      	.DW  0x01
0001a4 14bc      	.DW  __seed_G102
0001a5 028a      	.DW  _0x204005F*2
                 
                 _0xFFFFFFFF:
0001a6 0000      	.DW  0
                 
                 __RESET:
0001a7 94f8      	CLI
0001a8 27ee      	CLR  R30
0001a9 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001aa e0f1      	LDI  R31,1
0001ab bff5      	OUT  MCUCR,R31
0001ac bfe5      	OUT  MCUCR,R30
0001ad 93e0 0074 	STS  XMCRA,R30
0001af 93e0 0075 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0001b1 e1f8      	LDI  R31,0x18
0001b2 95a8      	WDR
0001b3 b7a4      	IN   R26,MCUSR
0001b4 7fa7      	CBR  R26,8
0001b5 bfa4      	OUT  MCUSR,R26
0001b6 93f0 0060 	STS  WDTCSR,R31
0001b8 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
0001ba e08d      	LDI  R24,(14-2)+1
0001bb e0a2      	LDI  R26,2
0001bc 27bb      	CLR  R27
                 __CLEAR_REG:
0001bd 93ed      	ST   X+,R30
0001be 958a      	DEC  R24
0001bf f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001c0 e080      	LDI  R24,LOW(0x2000)
0001c1 e290      	LDI  R25,HIGH(0x2000)
0001c2 e0a0      	LDI  R26,LOW(0x200)
0001c3 e0b2      	LDI  R27,HIGH(0x200)
                 __CLEAR_SRAM:
0001c4 93ed      	ST   X+,R30
0001c5 9701      	SBIW R24,1
0001c6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001c7 e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001c8 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001c9 9185      	LPM  R24,Z+
0001ca 9195      	LPM  R25,Z+
0001cb 9700      	SBIW R24,0
0001cc f061      	BREQ __GLOBAL_INI_END
0001cd 91a5      	LPM  R26,Z+
0001ce 91b5      	LPM  R27,Z+
0001cf 9005      	LPM  R0,Z+
0001d0 9015      	LPM  R1,Z+
0001d1 01bf      	MOVW R22,R30
0001d2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001d3 9005      	LPM  R0,Z+
0001d4 920d      	ST   X+,R0
0001d5 9701      	SBIW R24,1
0001d6 f7e1      	BRNE __GLOBAL_INI_LOOP
0001d7 01fb      	MOVW R30,R22
0001d8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0001d9 bf8b      	OUT  RAMPZ,R24
                 
0001da bf8c      	OUT  EIND,R24
                 
                 ;GPIOR0 INITIALIZATION
0001db e0e0      	LDI  R30,0x00
0001dc bbee      	OUT  GPIOR0,R30
                 
                 ;STACK POINTER INITIALIZATION
0001dd efef      	LDI  R30,LOW(0x21FF)
0001de bfed      	OUT  SPL,R30
0001df e2e1      	LDI  R30,HIGH(0x21FF)
0001e0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001e1 e0c0      	LDI  R28,LOW(0xA00)
0001e2 e0da      	LDI  R29,HIGH(0xA00)
                 
0001e3 940c 02b1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xA00
                 
                 	.CSEG
                 ;#include <mega2560.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define TXB8 0
                 ;#define RXB8 1
                 ;#define UPE 2
                 ;#define DOR 3
                 ;#define FE 4
                 ;#define UDRE 5
                 ;#define RXC 7
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define RX_BUFFER_SIZE0 1000  // USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 1000  // USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE2 255 // USART2 Receiver buffer
                 ;#define RX_BUFFER_SIZE3 255 // USART3 Receiver buffer
                 ;#define ADC_VREF_TYPE 0x40
                 ;#define _ALTERNATE_GETCHAR_
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#define USART0 0
                 ;#define USART1 1
                 ;#define USART2 2
                 ;#define USART3 3
                 ;#define STX 0x02
                 ;#define ETX 0x03
                 ;#define CR 0x0D
                 ;#define LF 0x0A
                 ;#define delimiter 0x3A
                 ;#define XBEE_START_DELIMITER 0x7E
                 ;#define XBEE_LENGTH_MSB 0x00
                 ;#define XBEE_FRAME_TYPE_TXREQ 0x10
                 ;#define XBEE_FRAME_TYPE_RXPACKET 0x90
                 ;#define XBEE_FRAME_ID 0x00
                 ;#define XBEE_16BIT_ADDRESS 0xFFFE
                 ;#define BROADCAST_RADIUS 0x00
                 ;#define XBEE_TX_OPTIONS 0x00
                 ;
                 ;#define DATA_OUT PORTC.0
                 ;#define DATA_IN PINC.0
                 ;#define SCK PORTC.1
                 ;#define noACK 0
                 ;#define ACK 1
                 ;#define STATUS_REG_W 0x06
                 ;#define STATUS_REG_R 0x07
                 ;#define MEASURE_TEMP 0x03
                 ;#define MEASURE_HUMI 0x05
                 ;#define RESET 0x1E
                 ;
                 ;
                 ;const int DEV_ID=0x3530; //
                 
                 	.DSEG
                 ;const char SERVER_IP[]="202.31.199.211";  // 202.31.199.211  gandeva   |||  103.236.201.125  siddiq |||   128.199.129.90 yoonsung   |||
                 ;const unsigned int SERVER_PORT=8080;
                 ;char rx_buffer0[RX_BUFFER_SIZE0],rx_buffer1[RX_BUFFER_SIZE1],rx_buffer2[RX_BUFFER_SIZE2],rx_buffer3[RX_BUFFER_SIZE3];
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;unsigned char rx_wr_index3,rx_rd_index3,rx_counter3;
                 ;bit rx_buffer_overflow0,rx_buffer_overflow1,rx_buffer_overflow2,rx_buffer_overflow3;
                 ;unsigned char poutput;
                 ;volatile unsigned long milSecCounter;
                 ;char dev_id_chk[5];
                 ;unsigned int tempervalue[2]={0,0};
                 ;
                 ;typedef union
                 ;    {
                 ;        unsigned int i;
                 ;        float f;
                 ;    }value;
                 ;
                 ;enum {TEMP,HUMI};
                 ;
                 ;const int ledID[]={
                 ;    0x3530,
                 ;    0x3531,
                 ;    0x3532,
                 ;    0x3533,
                 ;};
                 ;
                 ;const long int led_64bitaddress_high[]={
                 ;    0x0013A200,
                 ;    0x0013A200,
                 ;    0x0013A200,
                 ;    0x0013A200,
                 ;};
                 ;
                 ;
                 ;const long int led_64bitaddress_low[]={
                 ;    0x408B7A72,
                 ;    0x41241D2C,
                 ;    0x408ACFE1,
                 ;    0x408B85E1,
                 ;};
                 ;
                 ;// Declare the functions
                 ;#pragma used+
                 ;unsigned int read_adc(unsigned char adc_input); // Read the AD conversion result
                 ;#pragma used-
                 ;char getchar(void); // Get a character from the USART Receiver buffer
                 ;void putchar(char c); // Write a character to the USART Transmitter
                 ;unsigned int serialAvailable(void); // Count available data in serial receive buffer
                 ;void mcuInit(void); // Initialize microcontroller
                 ;void xbeeTransmit(char *packet,int _dataLength,long int address64H,long int address64L);
                 ;unsigned char xbeeReceive(char * recvPacket);
                 ;unsigned char _3gZipCall(unsigned char _state);
                 ;unsigned char _3gZipOpen(unsigned char _socketID,unsigned char _type,char *_remoteIP,unsigned int _remotePort);
                 ;unsigned char _3gZipSend(unsigned char _socketID,char *_data);
                 ;unsigned char _3gZipReceive(char *_data);
                 ;void getRequestFromServerAndRespond(void);
                 ;void getDataFromZigbeeRouterAndForwardToServer(void);
                 ;int hex2int(char c);
                 ;int hex2ascii(char c,char d);
                 ;unsigned char _3gEchoOff(void);
                 ;unsigned int getPM10Concentration(void);
                 ;float Calc_SHT71(float p_humidity ,float *p_temperature);
                 ;char SHT_Measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode);
                 ;char SHT_Write_StatusReg(unsigned char *p_value);
                 ;char SHT_Read_StatusReg(unsigned char *p_value, unsigned char *p_checksum);
                 ;char SHT_SoftRst(void);
                 ;void SHT_ConnectionRest(void);
                 ;void SHT_Transstart(void);
                 ;char SHT_ReadByte(unsigned char ack);
                 ;char SHT_WriteByte(unsigned char bytte);
                 ;
                 ;
                 ;// Declare arbitrary sensor data
                 ;float temperature;
                 ;float humidity;
                 ;unsigned int dustconcentration;
                 ;float current3k=0;
                 ;float current5k=1.5;
                 ;unsigned int voltage3k=0;
                 ;unsigned int voltage5k=260;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 008E {
                 
                 	.CSEG
                 _usart0_rx_isr:
0001e5 93aa      	ST   -Y,R26
0001e6 93ea      	ST   -Y,R30
0001e7 93fa      	ST   -Y,R31
0001e8 b7ef      	IN   R30,SREG
0001e9 93ea      	ST   -Y,R30
                 ; 0000 008F     char status,data;
                 ; 0000 0090     status=UCSR0A;
0001ea 931a      	ST   -Y,R17
0001eb 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001ec 9110 00c0 	LDS  R17,192
                 ; 0000 0091     data=UDR0;
0001ee 9100 00c6 	LDS  R16,198
                 ; 0000 0092     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0001f0 2fe1      	MOV  R30,R17
0001f1 71ec      	ANDI R30,LOW(0x1C)
0001f2 f4e1      	BRNE _0xB
                 ; 0000 0093         {
                 ; 0000 0094             rx_buffer0[rx_wr_index0]=data;
                +
0001f3 2de3     +MOV R30 , R3
0001f4 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0001f5 56e6      	SUBI R30,LOW(-_rx_buffer0)
0001f6 4ff5      	SBCI R31,HIGH(-_rx_buffer0)
0001f7 8300      	ST   Z,R16
                 ; 0000 0095             if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                +
0001f8 2de3     +MOV R30 , R3
0001f9 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0001fa 9631      	ADIW R30,1
                +
0001fb 2e3e     +MOV R3 , R30
0001fc 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
0001fd 3ee8      	CPI  R30,LOW(0x3E8)
0001fe e0a3      	LDI  R26,HIGH(0x3E8)
0001ff 07fa      	CPC  R31,R26
000200 f411      	BRNE _0xC
000201 2433      	CLR  R3
000202 2444      	CLR  R4
                 ; 0000 0096             if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0xC:
                +
000203 2de7     +MOV R30 , R7
000204 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000205 9631      	ADIW R30,1
                +
000206 2e7e     +MOV R7 , R30
000207 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
000208 3ee8      	CPI  R30,LOW(0x3E8)
000209 e0a3      	LDI  R26,HIGH(0x3E8)
00020a 07fa      	CPC  R31,R26
00020b f419      	BRNE _0xD
                 ; 0000 0097                 {
                 ; 0000 0098                     rx_counter0=0;
00020c 2477      	CLR  R7
00020d 2488      	CLR  R8
                 ; 0000 0099                     rx_buffer_overflow0=1;
00020e 9af0      	SBI  0x1E,0
                 ; 0000 009A                 };
                 _0xD:
                 ; 0000 009B         };
                 _0xB:
                 ; 0000 009C }
00020f c07e      	RJMP _0x182
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00A0 {
                 _usart1_rx_isr:
000210 93aa      	ST   -Y,R26
000211 93ea      	ST   -Y,R30
000212 93fa      	ST   -Y,R31
000213 b7ef      	IN   R30,SREG
000214 93ea      	ST   -Y,R30
                 ; 0000 00A1     char status,data;
                 ; 0000 00A2     status=UCSR1A;
000215 931a      	ST   -Y,R17
000216 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000217 9110 00c8 	LDS  R17,200
                 ; 0000 00A3     data=UDR1;
000219 9100 00ce 	LDS  R16,206
                 ; 0000 00A4     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00021b 2fe1      	MOV  R30,R17
00021c 71ec      	ANDI R30,LOW(0x1C)
00021d f4e1      	BRNE _0x10
                 ; 0000 00A5         {
                 ; 0000 00A6             rx_buffer1[rx_wr_index1]=data;
                +
00021e 2de9     +MOV R30 , R9
00021f 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
000220 57ee      	SUBI R30,LOW(-_rx_buffer1)
000221 4ff1      	SBCI R31,HIGH(-_rx_buffer1)
000222 8300      	ST   Z,R16
                 ; 0000 00A7             if (++rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
                +
000223 2de9     +MOV R30 , R9
000224 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
000225 9631      	ADIW R30,1
                +
000226 2e9e     +MOV R9 , R30
000227 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
000228 3ee8      	CPI  R30,LOW(0x3E8)
000229 e0a3      	LDI  R26,HIGH(0x3E8)
00022a 07fa      	CPC  R31,R26
00022b f411      	BRNE _0x11
00022c 2499      	CLR  R9
00022d 24aa      	CLR  R10
                 ; 0000 00A8             if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0x11:
                +
00022e 2ded     +MOV R30 , R13
00022f 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
000230 9631      	ADIW R30,1
                +
000231 2ede     +MOV R13 , R30
000232 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
000233 3ee8      	CPI  R30,LOW(0x3E8)
000234 e0a3      	LDI  R26,HIGH(0x3E8)
000235 07fa      	CPC  R31,R26
000236 f419      	BRNE _0x12
                 ; 0000 00A9                 {
                 ; 0000 00AA                     rx_counter1=0;
000237 24dd      	CLR  R13
000238 24ee      	CLR  R14
                 ; 0000 00AB                     rx_buffer_overflow1=1;
000239 9af1      	SBI  0x1E,1
                 ; 0000 00AC                 };
                 _0x12:
                 ; 0000 00AD         };
                 _0x10:
                 ; 0000 00AE }
00023a c053      	RJMP _0x182
                 ;
                 ;// USART2 Receiver interrupt service routine
                 ;interrupt [USART2_RXC] void usart2_rx_isr(void)
                 ; 0000 00B2 {
                 _usart2_rx_isr:
00023b 93aa      	ST   -Y,R26
00023c 93ea      	ST   -Y,R30
00023d 93fa      	ST   -Y,R31
00023e b7ef      	IN   R30,SREG
00023f 93ea      	ST   -Y,R30
                 ; 0000 00B3     char status,data;
                 ; 0000 00B4     status=UCSR2A;
000240 931a      	ST   -Y,R17
000241 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000242 9110 00d0 	LDS  R17,208
                 ; 0000 00B5     data=UDR2;
000244 9100 00d6 	LDS  R16,214
                 ; 0000 00B6     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000246 2fe1      	MOV  R30,R17
000247 71ec      	ANDI R30,LOW(0x1C)
000248 f4d9      	BRNE _0x15
                 ; 0000 00B7         {
                 ; 0000 00B8             rx_buffer2[rx_wr_index2]=data;
000249 91e0 1468 	LDS  R30,_rx_wr_index2
00024b e0f0      	LDI  R31,0
00024c 59e6      	SUBI R30,LOW(-_rx_buffer2)
00024d 4efd      	SBCI R31,HIGH(-_rx_buffer2)
00024e 8300      	ST   Z,R16
                 ; 0000 00B9             if (++rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
00024f 91a0 1468 	LDS  R26,_rx_wr_index2
000251 5faf      	SUBI R26,-LOW(1)
000252 93a0 1468 	STS  _rx_wr_index2,R26
000254 3faf      	CPI  R26,LOW(0xFF)
000255 f419      	BRNE _0x16
000256 e0e0      	LDI  R30,LOW(0)
000257 93e0 1468 	STS  _rx_wr_index2,R30
                 ; 0000 00BA             if (++rx_counter2 == RX_BUFFER_SIZE2)
                 _0x16:
000259 91a0 146a 	LDS  R26,_rx_counter2
00025b 5faf      	SUBI R26,-LOW(1)
00025c 93a0 146a 	STS  _rx_counter2,R26
00025e 3faf      	CPI  R26,LOW(0xFF)
00025f f421      	BRNE _0x17
                 ; 0000 00BB                 {
                 ; 0000 00BC                     rx_counter2=0;
000260 e0e0      	LDI  R30,LOW(0)
000261 93e0 146a 	STS  _rx_counter2,R30
                 ; 0000 00BD                     rx_buffer_overflow2=1;
000263 9af2      	SBI  0x1E,2
                 ; 0000 00BE                 };
                 _0x17:
                 ; 0000 00BF         };
                 _0x15:
                 ; 0000 00C0 }
000264 c029      	RJMP _0x182
                 ;
                 ;interrupt [USART3_RXC] void usart3_rx_isr(void) // USART3 Receiver interrupt service routine
                 ; 0000 00C3 {
                 _usart3_rx_isr:
000265 93aa      	ST   -Y,R26
000266 93ea      	ST   -Y,R30
000267 93fa      	ST   -Y,R31
000268 b7ef      	IN   R30,SREG
000269 93ea      	ST   -Y,R30
                 ; 0000 00C4     char status,data;
                 ; 0000 00C5     status=UCSR3A;
00026a 931a      	ST   -Y,R17
00026b 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00026c 9110 0130 	LDS  R17,304
                 ; 0000 00C6     data=UDR3;
00026e 9100 0136 	LDS  R16,310
                 ; 0000 00C7     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000270 2fe1      	MOV  R30,R17
000271 71ec      	ANDI R30,LOW(0x1C)
000272 f4d9      	BRNE _0x1A
                 ; 0000 00C8        {
                 ; 0000 00C9        rx_buffer3[rx_wr_index3]=data;
000273 91e0 146b 	LDS  R30,_rx_wr_index3
000275 e0f0      	LDI  R31,0
000276 59e7      	SUBI R30,LOW(-_rx_buffer3)
000277 4efc      	SBCI R31,HIGH(-_rx_buffer3)
000278 8300      	ST   Z,R16
                 ; 0000 00CA        if (++rx_wr_index3 == RX_BUFFER_SIZE3) rx_wr_index3=0;
000279 91a0 146b 	LDS  R26,_rx_wr_index3
00027b 5faf      	SUBI R26,-LOW(1)
00027c 93a0 146b 	STS  _rx_wr_index3,R26
00027e 3faf      	CPI  R26,LOW(0xFF)
00027f f419      	BRNE _0x1B
000280 e0e0      	LDI  R30,LOW(0)
000281 93e0 146b 	STS  _rx_wr_index3,R30
                 ; 0000 00CB        if (++rx_counter3 == RX_BUFFER_SIZE3)
                 _0x1B:
000283 91a0 146d 	LDS  R26,_rx_counter3
000285 5faf      	SUBI R26,-LOW(1)
000286 93a0 146d 	STS  _rx_counter3,R26
000288 3faf      	CPI  R26,LOW(0xFF)
000289 f421      	BRNE _0x1C
                 ; 0000 00CC           {
                 ; 0000 00CD           rx_counter3=0;
00028a e0e0      	LDI  R30,LOW(0)
00028b 93e0 146d 	STS  _rx_counter3,R30
                 ; 0000 00CE           rx_buffer_overflow3=1;
00028d 9af3      	SBI  0x1E,3
                 ; 0000 00CF           };
                 _0x1C:
                 ; 0000 00D0        };
                 _0x1A:
                 ; 0000 00D1 }
                 _0x182:
00028e 9109      	LD   R16,Y+
00028f 9119      	LD   R17,Y+
000290 91e9      	LD   R30,Y+
000291 bfef      	OUT  SREG,R30
000292 91f9      	LD   R31,Y+
000293 91e9      	LD   R30,Y+
000294 91a9      	LD   R26,Y+
000295 9518      	RETI
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) // Timer 0 overflow interrupt service routine, called every 1.024 ms (250 kHz)
                 ; 0000 00D4 {
                 _timer0_ovf_isr:
000296 936a      	ST   -Y,R22
000297 937a      	ST   -Y,R23
000298 93aa      	ST   -Y,R26
000299 93ba      	ST   -Y,R27
00029a 93ea      	ST   -Y,R30
00029b 93fa      	ST   -Y,R31
00029c b7ef      	IN   R30,SREG
00029d 93ea      	ST   -Y,R30
                 ; 0000 00D5     milSecCounter++;
00029e e6af      	LDI  R26,LOW(_milSecCounter)
00029f e1b4      	LDI  R27,HIGH(_milSecCounter)
0002a0 940e 1c15 	CALL __GETD1P_INC
                +
0002a2 5fef     +SUBI R30 , LOW ( - 1 )
0002a3 4fff     +SBCI R31 , HIGH ( - 1 )
0002a4 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0002a5 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0002a6 940e 1c1f 	CALL __PUTDP1_DEC
                 ; 0000 00D6 }
0002a8 91e9      	LD   R30,Y+
0002a9 bfef      	OUT  SREG,R30
0002aa 91f9      	LD   R31,Y+
0002ab 91e9      	LD   R30,Y+
0002ac 91b9      	LD   R27,Y+
0002ad 91a9      	LD   R26,Y+
0002ae 9179      	LD   R23,Y+
0002af 9169      	LD   R22,Y+
0002b0 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00D9 {
                 _main:
                 ; 0000 00DA     unsigned char packindex;
                 ; 0000 00DB     unsigned long timecounter;
                 ; 0000 00DC     char periodicpacket[45],periodicpacket3g[90];
                 ; 0000 00DD     value humi_val,temp_val;
                 ; 0000 00DE     unsigned char error,checksum;
                 ; 0000 00DF     char inp;
                 ; 0000 00E0 
                 ; 0000 00E1     mcuInit();
0002b1 97ef      	SBIW R28,63
0002b2 97ef      	SBIW R28,63
0002b3 9765      	SBIW R28,21
                 ;	packindex -> R17
                 ;	timecounter -> Y+143
                 ;	periodicpacket -> Y+98
                 ;	periodicpacket3g -> Y+8
                 ;	humi_val -> Y+4
                 ;	temp_val -> Y+0
                 ;	error -> R16
                 ;	checksum -> R19
                 ;	inp -> R18
0002b4 d2d7      	RCALL _mcuInit
                 ; 0000 00E2     sprintf(dev_id_chk,"%c%c:",(char)(DEV_ID>>8),(char)(DEV_ID));
0002b5 e7e3      	LDI  R30,LOW(_dev_id_chk)
0002b6 e1f4      	LDI  R31,HIGH(_dev_id_chk)
0002b7 93fa      	ST   -Y,R31
0002b8 93ea      	ST   -Y,R30
                +
0002b9 e4ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0002ba e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0002bb 93fa      	ST   -Y,R31
0002bc 93ea      	ST   -Y,R30
                +
0002bd e3e5     +LDI R30 , LOW ( 0x35 )
0002be e0f0     +LDI R31 , HIGH ( 0x35 )
0002bf e060     +LDI R22 , BYTE3 ( 0x35 )
0002c0 e070     +LDI R23 , BYTE4 ( 0x35 )
                 	__GETD1N 0x35
0002c1 940e 1c2e 	CALL __PUTPARD1
                +
0002c3 e3e0     +LDI R30 , LOW ( 0x30 )
0002c4 e0f0     +LDI R31 , HIGH ( 0x30 )
0002c5 e060     +LDI R22 , BYTE3 ( 0x30 )
0002c6 e070     +LDI R23 , BYTE4 ( 0x30 )
                 	__GETD1N 0x30
0002c7 940e 1c2e 	CALL __PUTPARD1
0002c9 e088      	LDI  R24,8
0002ca 940e 16ef 	CALL _sprintf
0002cc 962c      	ADIW R28,12
                 ; 0000 00E3     memset(periodicpacket,0,sizeof(periodicpacket));
0002cd 01fe      	MOVW R30,R28
0002ce 59ee      	SUBI R30,LOW(-(98))
0002cf 4fff      	SBCI R31,HIGH(-(98))
0002d0 93fa      	ST   -Y,R31
0002d1 93ea      	ST   -Y,R30
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 93ea      	ST   -Y,R30
0002d4 e2ed      	LDI  R30,LOW(45)
0002d5 e0f0      	LDI  R31,HIGH(45)
0002d6 93fa      	ST   -Y,R31
0002d7 93ea      	ST   -Y,R30
0002d8 940e 1754 	CALL _memset
                 ; 0000 00E4     memset(periodicpacket3g,0,sizeof(periodicpacket3g));
0002da 01fe      	MOVW R30,R28
0002db 9638      	ADIW R30,8
0002dc 93fa      	ST   -Y,R31
0002dd 93ea      	ST   -Y,R30
0002de e0e0      	LDI  R30,LOW(0)
0002df 93ea      	ST   -Y,R30
0002e0 e5ea      	LDI  R30,LOW(90)
0002e1 e0f0      	LDI  R31,HIGH(90)
0002e2 93fa      	ST   -Y,R31
0002e3 93ea      	ST   -Y,R30
0002e4 940e 1754 	CALL _memset
                 ; 0000 00E5     timecounter=milSecCounter;
0002e6 91e0 146f 	LDS  R30,_milSecCounter
0002e8 91f0 1470 	LDS  R31,_milSecCounter+1
0002ea 9160 1471 	LDS  R22,_milSecCounter+2
0002ec 9170 1472 	LDS  R23,_milSecCounter+3
                +
0002ee 01de     +MOVW R26 , R28
0002ef 57a1     +SUBI R26 , LOW ( - 143 )
0002f0 4fbf     +SBCI R27 , HIGH ( - 143 )
0002f1 93ed     +ST X + , R30
0002f2 93fd     +ST X + , R31
0002f3 936d     +ST X + , R22
0002f4 937c     +ST X , R23
                 	__PUTD1SX 143
                 ; 0000 00E6     while ((milSecCounter-timecounter)<15000);
                 _0x1F:
                +
0002f5 01de     +MOVW R26 , R28
0002f6 57a1     +SUBI R26 , LOW ( - 143 )
0002f7 4fbf     +SBCI R27 , HIGH ( - 143 )
0002f8 900d     +LD R0 , X +
0002f9 901d     +LD R1 , X +
0002fa 918d     +LD R24 , X +
0002fb 919c     +LD R25 , X
0002fc 01d0     +MOVW R26 , R0
                 	__GETD2SX 143
0002fd 91e0 146f 	LDS  R30,_milSecCounter
0002ff 91f0 1470 	LDS  R31,_milSecCounter+1
000301 9160 1471 	LDS  R22,_milSecCounter+2
000303 9170 1472 	LDS  R23,_milSecCounter+3
000305 940e 1b2f 	CALL __SUBD12
                +
000307 39e8     +CPI R30 , LOW ( 0x3A98 )
000308 e3aa     +LDI R26 , HIGH ( 0x3A98 )
000309 07fa     +CPC R31 , R26
00030a e0a0     +LDI R26 , BYTE3 ( 0x3A98 )
00030b 076a     +CPC R22 , R26
00030c e0a0     +LDI R26 , BYTE4 ( 0x3A98 )
00030d 077a     +CPC R23 , R26
                 	__CPD1N 0x3A98
00030e f330      	BRLO _0x1F
                 ; 0000 00E7     SHT_SoftRst();
00030f 940e 10bc 	CALL _SHT_SoftRst
                 ; 0000 00E8     _3gEchoOff();
000311 940e 07ab 	CALL __3gEchoOff
                 ; 0000 00E9     _3gZipCall(0);
000313 e0e0      	LDI  R30,LOW(0)
000314 93ea      	ST   -Y,R30
000315 940e 07ef 	CALL __3gZipCall
                 ; 0000 00EA     _3gZipCall(1);
000317 e0e1      	LDI  R30,LOW(1)
000318 93ea      	ST   -Y,R30
000319 940e 07ef 	CALL __3gZipCall
                 ; 0000 00EB     delay_ms(2000);
00031b ede0      	LDI  R30,LOW(2000)
00031c e0f7      	LDI  R31,HIGH(2000)
00031d 93fa      	ST   -Y,R31
00031e 93ea      	ST   -Y,R30
00031f 940e 1976 	CALL _delay_ms
                 ; 0000 00EC     _3gZipOpen(1,0,SERVER_IP,SERVER_PORT);
000321 e0e1      	LDI  R30,LOW(1)
000322 93ea      	ST   -Y,R30
000323 e0e0      	LDI  R30,LOW(0)
000324 93ea      	ST   -Y,R30
000325 e8eb      	LDI  R30,LOW(_SERVER_IP)
000326 e0fa      	LDI  R31,HIGH(_SERVER_IP)
000327 93fa      	ST   -Y,R31
000328 93ea      	ST   -Y,R30
000329 e9e0      	LDI  R30,LOW(8080)
00032a e1ff      	LDI  R31,HIGH(8080)
00032b 93fa      	ST   -Y,R31
00032c 93ea      	ST   -Y,R30
00032d 940e 0902 	CALL __3gZipOpen
                 ; 0000 00ED     delay_ms(2000);
00032f ede0      	LDI  R30,LOW(2000)
000330 e0f7      	LDI  R31,HIGH(2000)
000331 93fa      	ST   -Y,R31
000332 93ea      	ST   -Y,R30
000333 940e 1976 	CALL _delay_ms
                 ; 0000 00EE 
                 ; 0000 00EF     timecounter=milSecCounter;
000335 91e0 146f 	LDS  R30,_milSecCounter
000337 91f0 1470 	LDS  R31,_milSecCounter+1
000339 9160 1471 	LDS  R22,_milSecCounter+2
00033b 9170 1472 	LDS  R23,_milSecCounter+3
                +
00033d 01de     +MOVW R26 , R28
00033e 57a1     +SUBI R26 , LOW ( - 143 )
00033f 4fbf     +SBCI R27 , HIGH ( - 143 )
000340 93ed     +ST X + , R30
000341 93fd     +ST X + , R31
000342 936d     +ST X + , R22
000343 937c     +ST X , R23
                 	__PUTD1SX 143
                 ; 0000 00F0     while (1)
                 _0x22:
                 ; 0000 00F1         {
                 ; 0000 00F2             if ((milSecCounter-timecounter)>=19999)
                +
000344 01de     +MOVW R26 , R28
000345 57a1     +SUBI R26 , LOW ( - 143 )
000346 4fbf     +SBCI R27 , HIGH ( - 143 )
000347 900d     +LD R0 , X +
000348 901d     +LD R1 , X +
000349 918d     +LD R24 , X +
00034a 919c     +LD R25 , X
00034b 01d0     +MOVW R26 , R0
                 	__GETD2SX 143
00034c 91e0 146f 	LDS  R30,_milSecCounter
00034e 91f0 1470 	LDS  R31,_milSecCounter+1
000350 9160 1471 	LDS  R22,_milSecCounter+2
000352 9170 1472 	LDS  R23,_milSecCounter+3
000354 940e 1b2f 	CALL __SUBD12
                +
000356 31ef     +CPI R30 , LOW ( 0x4E1F )
000357 e4ae     +LDI R26 , HIGH ( 0x4E1F )
000358 07fa     +CPC R31 , R26
000359 e0a0     +LDI R26 , BYTE3 ( 0x4E1F )
00035a 076a     +CPC R22 , R26
00035b e0a0     +LDI R26 , BYTE4 ( 0x4E1F )
00035c 077a     +CPC R23 , R26
                 	__CPD1N 0x4E1F
00035d f410      	BRSH PC+3
00035e 940c 04ae 	JMP _0x25
                 ; 0000 00F3                 {
                 ; 0000 00F4                     error=0;
000360 e000      	LDI  R16,LOW(0)
                 ; 0000 00F5                     error+=SHT_Measure((unsigned char*)( &humi_val.i),&checksum,HUMI);  //measure humidity
000361 01fe      	MOVW R30,R28
000362 9634      	ADIW R30,4
000363 93fa      	ST   -Y,R31
000364 93ea      	ST   -Y,R30
000365 b7ed      	IN   R30,SPL
000366 b7fe      	IN   R31,SPH
000367 93fa      	ST   -Y,R31
000368 93ea      	ST   -Y,R30
000369 933f      	PUSH R19
00036a e0e1      	LDI  R30,LOW(1)
00036b 93ea      	ST   -Y,R30
00036c 940e 10dd 	CALL _SHT_Measure
00036e 913f      	POP  R19
00036f 0f0e      	ADD  R16,R30
                 ; 0000 00F6                     error+=SHT_Measure((unsigned char*) (&temp_val.i),&checksum,TEMP);  //measure temperature
000370 01fe      	MOVW R30,R28
000371 93fa      	ST   -Y,R31
000372 93ea      	ST   -Y,R30
000373 b7ed      	IN   R30,SPL
000374 b7fe      	IN   R31,SPH
000375 93fa      	ST   -Y,R31
000376 93ea      	ST   -Y,R30
000377 933f      	PUSH R19
000378 e0e0      	LDI  R30,LOW(0)
000379 93ea      	ST   -Y,R30
00037a 940e 10dd 	CALL _SHT_Measure
00037c 913f      	POP  R19
00037d 0f0e      	ADD  R16,R30
                 ; 0000 00F7                     error += SHT_Read_StatusReg(&inp, &checksum);
00037e b7ed      	IN   R30,SPL
00037f b7fe      	IN   R31,SPH
000380 93fa      	ST   -Y,R31
000381 93ea      	ST   -Y,R30
000382 932f      	PUSH R18
000383 b7ed      	IN   R30,SPL
000384 b7fe      	IN   R31,SPH
000385 93fa      	ST   -Y,R31
000386 93ea      	ST   -Y,R30
000387 933f      	PUSH R19
000388 940e 10c6 	CALL _SHT_Read_StatusReg
00038a 913f      	POP  R19
00038b 912f      	POP  R18
00038c 0f0e      	ADD  R16,R30
                 ; 0000 00F8                     if (error!=0) SHT_ConnectionRest();
00038d 3000      	CPI  R16,0
00038e f019      	BREQ _0x26
00038f 940e 10a6 	CALL _SHT_ConnectionRest
                 ; 0000 00F9                     else
000391 c026      	RJMP _0x27
                 _0x26:
                 ; 0000 00FA                         {
                 ; 0000 00FB                             humi_val.f=(float)tempervalue[1];                   //converts integer to float
                +
000392 91e0 147a+LDS R30 , _tempervalue + ( 2 )
000394 91f0 147b+LDS R31 , _tempervalue + ( 2 ) + 1
                 	__GETW1MN _tempervalue,2
000396 2766      	CLR  R22
000397 2777      	CLR  R23
000398 940e 19ee 	CALL __CDF1
                +
00039a 83ec     +STD Y + 4 , R30
00039b 83fd     +STD Y + 4 + 1 , R31
00039c 836e     +STD Y + 4 + 2 , R22
00039d 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 00FC                             temp_val.f=(float)tempervalue[0];                   //converts integer to float
00039e 91e0 1478 	LDS  R30,_tempervalue
0003a0 91f0 1479 	LDS  R31,_tempervalue+1
0003a2 2766      	CLR  R22
0003a3 2777      	CLR  R23
0003a4 940e 19ee 	CALL __CDF1
0003a6 940e 1c29 	CALL __PUTD1S0
                 ; 0000 00FD                             humi_val.f=Calc_SHT71(humi_val.f,&temp_val.f);      //calculate humidity, temperature
                +
0003a8 81ec     +LDD R30 , Y + 4
0003a9 81fd     +LDD R31 , Y + 4 + 1
0003aa 816e     +LDD R22 , Y + 4 + 2
0003ab 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0003ac 940e 1c2e 	CALL __PUTPARD1
0003ae 01fe      	MOVW R30,R28
0003af 9634      	ADIW R30,4
0003b0 93fa      	ST   -Y,R31
0003b1 93ea      	ST   -Y,R30
0003b2 940e 1153 	CALL _Calc_SHT71
                +
0003b4 83ec     +STD Y + 4 , R30
0003b5 83fd     +STD Y + 4 + 1 , R31
0003b6 836e     +STD Y + 4 + 2 , R22
0003b7 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 00FE                         }
                 _0x27:
                 ; 0000 00FF                     temperature=temp_val.f;
0003b8 940e 1c24 	CALL __GETD1S0
0003ba 93e0 14a4 	STS  _temperature,R30
0003bc 93f0 14a5 	STS  _temperature+1,R31
0003be 9360 14a6 	STS  _temperature+2,R22
0003c0 9370 14a7 	STS  _temperature+3,R23
                 ; 0000 0100                     humidity=humi_val.f;
                +
0003c2 81ec     +LDD R30 , Y + 4
0003c3 81fd     +LDD R31 , Y + 4 + 1
0003c4 816e     +LDD R22 , Y + 4 + 2
0003c5 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0003c6 93e0 14a8 	STS  _humidity,R30
0003c8 93f0 14a9 	STS  _humidity+1,R31
0003ca 9360 14aa 	STS  _humidity+2,R22
0003cc 9370 14ab 	STS  _humidity+3,R23
                 ; 0000 0101                     dustconcentration=getPM10Concentration();
0003ce 940e 0ee7 	CALL _getPM10Concentration
0003d0 93e0 14ac 	STS  _dustconcentration,R30
0003d2 93f0 14ad 	STS  _dustconcentration+1,R31
                 ; 0000 0102 
                 ; 0000 0103                     //for testing only***********
                 ; 0000 0104                     //poutput=USART3;
                 ; 0000 0105                     //printf("%c%c%cT%+04.1fH%04.1f3V%03uI%03.1f5V%03uI%03.1fD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,voltage3k,current3k,voltage5k,current5k,dustconcentration,ETX,CR,LF);
                 ; 0000 0106                     //***************************
                 ; 0000 0107 
                 ; 0000 0108                     sprintf(periodicpacket,"%c%c%cT%+04.1fH%04.1f3V%03uI%03.1f5V%03uI%03.1fD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,voltage3k,current3k,voltage5k,current5k,dustconcentration,ETX,CR,LF);
0003d4 01fe      	MOVW R30,R28
0003d5 59ee      	SUBI R30,LOW(-(98))
0003d6 4fff      	SBCI R31,HIGH(-(98))
0003d7 93fa      	ST   -Y,R31
0003d8 93ea      	ST   -Y,R30
                +
0003d9 e5e0     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0003da e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0003db 93fa      	ST   -Y,R31
0003dc 93ea      	ST   -Y,R30
                +
0003dd e0e2     +LDI R30 , LOW ( 0x2 )
0003de e0f0     +LDI R31 , HIGH ( 0x2 )
0003df e060     +LDI R22 , BYTE3 ( 0x2 )
0003e0 e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
0003e1 940e 1c2e 	CALL __PUTPARD1
                +
0003e3 e3e5     +LDI R30 , LOW ( 0x35 )
0003e4 e0f0     +LDI R31 , HIGH ( 0x35 )
0003e5 e060     +LDI R22 , BYTE3 ( 0x35 )
0003e6 e070     +LDI R23 , BYTE4 ( 0x35 )
                 	__GETD1N 0x35
0003e7 940e 1c2e 	CALL __PUTPARD1
                +
0003e9 e3e0     +LDI R30 , LOW ( 0x30 )
0003ea e0f0     +LDI R31 , HIGH ( 0x30 )
0003eb e060     +LDI R22 , BYTE3 ( 0x30 )
0003ec e070     +LDI R23 , BYTE4 ( 0x30 )
                 	__GETD1N 0x30
0003ed 940e 1c2e 	CALL __PUTPARD1
0003ef 91e0 14a4 	LDS  R30,_temperature
0003f1 91f0 14a5 	LDS  R31,_temperature+1
0003f3 9160 14a6 	LDS  R22,_temperature+2
0003f5 9170 14a7 	LDS  R23,_temperature+3
0003f7 940e 1c2e 	CALL __PUTPARD1
0003f9 91e0 14a8 	LDS  R30,_humidity
0003fb 91f0 14a9 	LDS  R31,_humidity+1
0003fd 9160 14aa 	LDS  R22,_humidity+2
0003ff 9170 14ab 	LDS  R23,_humidity+3
000401 940e 1c2e 	CALL __PUTPARD1
000403 91e0 14b6 	LDS  R30,_voltage3k
000405 91f0 14b7 	LDS  R31,_voltage3k+1
000407 2766      	CLR  R22
000408 2777      	CLR  R23
000409 940e 1c2e 	CALL __PUTPARD1
00040b 91e0 14ae 	LDS  R30,_current3k
00040d 91f0 14af 	LDS  R31,_current3k+1
00040f 9160 14b0 	LDS  R22,_current3k+2
000411 9170 14b1 	LDS  R23,_current3k+3
000413 940e 1c2e 	CALL __PUTPARD1
000415 91e0 14b8 	LDS  R30,_voltage5k
000417 91f0 14b9 	LDS  R31,_voltage5k+1
000419 2766      	CLR  R22
00041a 2777      	CLR  R23
00041b 940e 1c2e 	CALL __PUTPARD1
00041d 91e0 14b2 	LDS  R30,_current5k
00041f 91f0 14b3 	LDS  R31,_current5k+1
000421 9160 14b4 	LDS  R22,_current5k+2
000423 9170 14b5 	LDS  R23,_current5k+3
000425 940e 1c2e 	CALL __PUTPARD1
000427 91e0 14ac 	LDS  R30,_dustconcentration
000429 91f0 14ad 	LDS  R31,_dustconcentration+1
00042b 2766      	CLR  R22
00042c 2777      	CLR  R23
00042d 940e 1c2e 	CALL __PUTPARD1
                +
00042f e0e3     +LDI R30 , LOW ( 0x3 )
000430 e0f0     +LDI R31 , HIGH ( 0x3 )
000431 e060     +LDI R22 , BYTE3 ( 0x3 )
000432 e070     +LDI R23 , BYTE4 ( 0x3 )
                 	__GETD1N 0x3
000433 940e 1c2e 	CALL __PUTPARD1
                +
000435 e0ed     +LDI R30 , LOW ( 0xD )
000436 e0f0     +LDI R31 , HIGH ( 0xD )
000437 e060     +LDI R22 , BYTE3 ( 0xD )
000438 e070     +LDI R23 , BYTE4 ( 0xD )
                 	__GETD1N 0xD
000439 940e 1c2e 	CALL __PUTPARD1
                +
00043b e0ea     +LDI R30 , LOW ( 0xA )
00043c e0f0     +LDI R31 , HIGH ( 0xA )
00043d e060     +LDI R22 , BYTE3 ( 0xA )
00043e e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00043f 940e 1c2e 	CALL __PUTPARD1
000441 e384      	LDI  R24,52
000442 940e 16ef 	CALL _sprintf
000444 96e8      	ADIW R28,56
                 ; 0000 0109                     for (packindex=0;packindex<strlen(periodicpacket);packindex++) sprintf(periodicpacket3g+strlen(periodicpacket3g),"%02X",periodicpacket[packindex]);
000445 e010      	LDI  R17,LOW(0)
                 _0x29:
000446 01fe      	MOVW R30,R28
000447 59ee      	SUBI R30,LOW(-(98))
000448 4fff      	SBCI R31,HIGH(-(98))
000449 93fa      	ST   -Y,R31
00044a 93ea      	ST   -Y,R30
00044b 940e 176d 	CALL _strlen
00044d 2fa1      	MOV  R26,R17
00044e e0b0      	LDI  R27,0
00044f 17ae      	CP   R26,R30
000450 07bf      	CPC  R27,R31
000451 f518      	BRSH _0x2A
000452 01fe      	MOVW R30,R28
000453 9638      	ADIW R30,8
000454 93fa      	ST   -Y,R31
000455 93ea      	ST   -Y,R30
000456 940e 176d 	CALL _strlen
000458 01de      	MOVW R26,R28
000459 9618      	ADIW R26,8
00045a 0fea      	ADD  R30,R26
00045b 1ffb      	ADC  R31,R27
00045c 93fa      	ST   -Y,R31
00045d 93ea      	ST   -Y,R30
                +
00045e e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 65 ) )
00045f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 65 ) )
                 	__POINTW1FN _0x0,65
000460 93fa      	ST   -Y,R31
000461 93ea      	ST   -Y,R30
000462 2fe1      	MOV  R30,R17
000463 e0f0      	LDI  R31,0
000464 01de      	MOVW R26,R28
000465 59aa      	SUBI R26,LOW(-(102))
000466 4fbf      	SBCI R27,HIGH(-(102))
000467 0fae      	ADD  R26,R30
000468 1fbf      	ADC  R27,R31
000469 91ec      	LD   R30,X
00046a 27ff      	CLR  R31
00046b 2766      	CLR  R22
00046c 2777      	CLR  R23
00046d 940e 1c2e 	CALL __PUTPARD1
00046f e084      	LDI  R24,4
000470 940e 16ef 	CALL _sprintf
000472 9628      	ADIW R28,8
000473 5f1f      	SUBI R17,-1
000474 cfd1      	RJMP _0x29
                 _0x2A:
                 ; 0000 010C _3gZipSend(1,periodicpacket3g);
000475 e0e1      	LDI  R30,LOW(1)
000476 93ea      	ST   -Y,R30
000477 01fe      	MOVW R30,R28
000478 9639      	ADIW R30,9
000479 93fa      	ST   -Y,R31
00047a 93ea      	ST   -Y,R30
00047b 940e 09e5 	CALL __3gZipSend
                 ; 0000 010D                     memset(periodicpacket,0,sizeof(periodicpacket));
00047d 01fe      	MOVW R30,R28
00047e 59ee      	SUBI R30,LOW(-(98))
00047f 4fff      	SBCI R31,HIGH(-(98))
000480 93fa      	ST   -Y,R31
000481 93ea      	ST   -Y,R30
000482 e0e0      	LDI  R30,LOW(0)
000483 93ea      	ST   -Y,R30
000484 e2ed      	LDI  R30,LOW(45)
000485 e0f0      	LDI  R31,HIGH(45)
000486 93fa      	ST   -Y,R31
000487 93ea      	ST   -Y,R30
000488 940e 1754 	CALL _memset
                 ; 0000 010E                     memset(periodicpacket3g,0,sizeof(periodicpacket3g));
00048a 01fe      	MOVW R30,R28
00048b 9638      	ADIW R30,8
00048c 93fa      	ST   -Y,R31
00048d 93ea      	ST   -Y,R30
00048e e0e0      	LDI  R30,LOW(0)
00048f 93ea      	ST   -Y,R30
000490 e5ea      	LDI  R30,LOW(90)
000491 e0f0      	LDI  R31,HIGH(90)
000492 93fa      	ST   -Y,R31
000493 93ea      	ST   -Y,R30
000494 940e 1754 	CALL _memset
                 ; 0000 010F                     milSecCounter=0;
000496 e0e0      	LDI  R30,LOW(0)
000497 93e0 146f 	STS  _milSecCounter,R30
000499 93e0 1470 	STS  _milSecCounter+1,R30
00049b 93e0 1471 	STS  _milSecCounter+2,R30
00049d 93e0 1472 	STS  _milSecCounter+3,R30
                 ; 0000 0110                     timecounter=milSecCounter;
00049f 91e0 146f 	LDS  R30,_milSecCounter
0004a1 91f0 1470 	LDS  R31,_milSecCounter+1
0004a3 9160 1471 	LDS  R22,_milSecCounter+2
0004a5 9170 1472 	LDS  R23,_milSecCounter+3
                +
0004a7 01de     +MOVW R26 , R28
0004a8 57a1     +SUBI R26 , LOW ( - 143 )
0004a9 4fbf     +SBCI R27 , HIGH ( - 143 )
0004aa 93ed     +ST X + , R30
0004ab 93fd     +ST X + , R31
0004ac 936d     +ST X + , R22
0004ad 937c     +ST X , R23
                 	__PUTD1SX 143
                 ; 0000 0111                 }
                 ; 0000 0112             getRequestFromServerAndRespond();
                 _0x25:
0004ae 940e 0bb6 	CALL _getRequestFromServerAndRespond
                 ; 0000 0113             getDataFromZigbeeRouterAndForwardToServer();
0004b0 940e 0e84 	CALL _getDataFromZigbeeRouterAndForwardToServer
                 ; 0000 0114         };
0004b2 ce91      	RJMP _0x22
                 ; 0000 0115 }
                 _0x2B:
0004b3 cfff      	RJMP _0x2B
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0119 {
                 ; 0000 011A     ADMUX=(adc_input & 0x07) | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
                 ; 0000 011B     if (adc_input & 0x08) ADCSRB |= 0x08;
                 ; 0000 011C     else ADCSRB &= 0xf7;
                 ; 0000 011D     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 011E     delay_us(10);
                 ; 0000 011F     // Start the AD conversion
                 ; 0000 0120     ADCSRA|=0x40;
                 ; 0000 0121     // Wait for the AD conversion to complete
                 ; 0000 0122     while ((ADCSRA & 0x10)==0);
                 ; 0000 0123     ADCSRA|=0x10;
                 ; 0000 0124     return ADCW;
                 ; 0000 0125 }
                 ;
                 ;// Get a character from the USART Receiver buffer
                 ;char getchar(void)
                 ; 0000 0129 {
                 _getchar:
                 ; 0000 012A     char data;
                 ; 0000 012B     switch(poutput)
0004b4 931a      	ST   -Y,R17
                 ;	data -> R17
0004b5 91e0 146e 	LDS  R30,_poutput
0004b7 e0f0      	LDI  R31,0
                 ; 0000 012C         {
                 ; 0000 012D             case USART0:
0004b8 9730      	SBIW R30,0
0004b9 f4e1      	BRNE _0x34
                 ; 0000 012E                 while (rx_counter0==0);
                 _0x35:
0004ba 2c07      	MOV  R0,R7
0004bb 2808      	OR   R0,R8
0004bc f3e9      	BREQ _0x35
                 ; 0000 012F                 data=rx_buffer0[rx_rd_index0];
0004bd e9aa      	LDI  R26,LOW(_rx_buffer0)
0004be e0ba      	LDI  R27,HIGH(_rx_buffer0)
0004bf 0da5      	ADD  R26,R5
0004c0 1db6      	ADC  R27,R6
0004c1 911c      	LD   R17,X
                 ; 0000 0130                 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                +
0004c2 2de5     +MOV R30 , R5
0004c3 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
0004c4 9631      	ADIW R30,1
                +
0004c5 2e5e     +MOV R5 , R30
0004c6 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
0004c7 3ee8      	CPI  R30,LOW(0x3E8)
0004c8 e0a3      	LDI  R26,HIGH(0x3E8)
0004c9 07fa      	CPC  R31,R26
0004ca f411      	BRNE _0x38
0004cb 2455      	CLR  R5
0004cc 2466      	CLR  R6
                 ; 0000 0131                 #asm("cli")
                 _0x38:
0004cd 94f8      	cli
                 ; 0000 0132                 --rx_counter0;
                +
0004ce 2de7     +MOV R30 , R7
0004cf 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
0004d0 9731      	SBIW R30,1
                +
0004d1 2e7e     +MOV R7 , R30
0004d2 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 0133                 #asm("sei")
0004d3 9478      	sei
                 ; 0000 0134                 return data;
0004d4 2fe1      	MOV  R30,R17
0004d5 c061      	RJMP _0x20A0011
                 ; 0000 0135             break;
                 ; 0000 0136 
                 ; 0000 0137             case USART1:
                 _0x34:
0004d6 30e1      	CPI  R30,LOW(0x1)
0004d7 e0a0      	LDI  R26,HIGH(0x1)
0004d8 07fa      	CPC  R31,R26
0004d9 f4e1      	BRNE _0x39
                 ; 0000 0138                 while (rx_counter1==0);
                 _0x3A:
0004da 2c0d      	MOV  R0,R13
0004db 280e      	OR   R0,R14
0004dc f3e9      	BREQ _0x3A
                 ; 0000 0139                 data=rx_buffer1[rx_rd_index1];
0004dd e8a2      	LDI  R26,LOW(_rx_buffer1)
0004de e0be      	LDI  R27,HIGH(_rx_buffer1)
0004df 0dab      	ADD  R26,R11
0004e0 1dbc      	ADC  R27,R12
0004e1 911c      	LD   R17,X
                 ; 0000 013A                 if (++rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                +
0004e2 2deb     +MOV R30 , R11
0004e3 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
0004e4 9631      	ADIW R30,1
                +
0004e5 2ebe     +MOV R11 , R30
0004e6 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
0004e7 3ee8      	CPI  R30,LOW(0x3E8)
0004e8 e0a3      	LDI  R26,HIGH(0x3E8)
0004e9 07fa      	CPC  R31,R26
0004ea f411      	BRNE _0x3D
0004eb 24bb      	CLR  R11
0004ec 24cc      	CLR  R12
                 ; 0000 013B                 #asm("cli")
                 _0x3D:
0004ed 94f8      	cli
                 ; 0000 013C                 --rx_counter1;
                +
0004ee 2ded     +MOV R30 , R13
0004ef 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
0004f0 9731      	SBIW R30,1
                +
0004f1 2ede     +MOV R13 , R30
0004f2 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 013D                 #asm("sei")
0004f3 9478      	sei
                 ; 0000 013E                 return data;
0004f4 2fe1      	MOV  R30,R17
0004f5 c041      	RJMP _0x20A0011
                 ; 0000 013F             break;
                 ; 0000 0140 
                 ; 0000 0141             case USART2:
                 _0x39:
0004f6 30e2      	CPI  R30,LOW(0x2)
0004f7 e0a0      	LDI  R26,HIGH(0x2)
0004f8 07fa      	CPC  R31,R26
0004f9 f4e9      	BRNE _0x3E
                 ; 0000 0142                 while (rx_counter2==0);
                 _0x3F:
0004fa 91e0 146a 	LDS  R30,_rx_counter2
0004fc 30e0      	CPI  R30,0
0004fd f3e1      	BREQ _0x3F
                 ; 0000 0143                 data=rx_buffer2[rx_rd_index2];
0004fe 91e0 1469 	LDS  R30,_rx_rd_index2
000500 e0f0      	LDI  R31,0
000501 59e6      	SUBI R30,LOW(-_rx_buffer2)
000502 4efd      	SBCI R31,HIGH(-_rx_buffer2)
000503 8110      	LD   R17,Z
                 ; 0000 0144                 if (++rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
000504 91a0 1469 	LDS  R26,_rx_rd_index2
000506 5faf      	SUBI R26,-LOW(1)
000507 93a0 1469 	STS  _rx_rd_index2,R26
000509 3faf      	CPI  R26,LOW(0xFF)
00050a f419      	BRNE _0x42
00050b e0e0      	LDI  R30,LOW(0)
00050c 93e0 1469 	STS  _rx_rd_index2,R30
                 ; 0000 0145                 #asm("cli")
                 _0x42:
00050e 94f8      	cli
                 ; 0000 0146                 --rx_counter2;
00050f 91e0 146a 	LDS  R30,_rx_counter2
000511 50e1      	SUBI R30,LOW(1)
000512 93e0 146a 	STS  _rx_counter2,R30
                 ; 0000 0147                 #asm("sei")
000514 9478      	sei
                 ; 0000 0148                 return data;
000515 2fe1      	MOV  R30,R17
000516 c020      	RJMP _0x20A0011
                 ; 0000 0149             break;
                 ; 0000 014A 
                 ; 0000 014B             case USART3:
                 _0x3E:
000517 30e3      	CPI  R30,LOW(0x3)
000518 e0a0      	LDI  R26,HIGH(0x3)
000519 07fa      	CPC  R31,R26
00051a f4e1      	BRNE _0x33
                 ; 0000 014C                 while (rx_counter3==0);
                 _0x44:
00051b 91e0 146d 	LDS  R30,_rx_counter3
00051d 30e0      	CPI  R30,0
00051e f3e1      	BREQ _0x44
                 ; 0000 014D                 data=rx_buffer3[rx_rd_index3];
00051f 91e0 146c 	LDS  R30,_rx_rd_index3
000521 e0f0      	LDI  R31,0
000522 59e7      	SUBI R30,LOW(-_rx_buffer3)
000523 4efc      	SBCI R31,HIGH(-_rx_buffer3)
000524 8110      	LD   R17,Z
                 ; 0000 014E                 if (++rx_rd_index3 == RX_BUFFER_SIZE3) rx_rd_index3=0;
000525 91a0 146c 	LDS  R26,_rx_rd_index3
000527 5faf      	SUBI R26,-LOW(1)
000528 93a0 146c 	STS  _rx_rd_index3,R26
00052a 3faf      	CPI  R26,LOW(0xFF)
00052b f419      	BRNE _0x47
00052c e0e0      	LDI  R30,LOW(0)
00052d 93e0 146c 	STS  _rx_rd_index3,R30
                 ; 0000 014F                 #asm("cli")
                 _0x47:
00052f 94f8      	cli
                 ; 0000 0150                 --rx_counter3;
000530 91e0 146d 	LDS  R30,_rx_counter3
000532 50e1      	SUBI R30,LOW(1)
000533 93e0 146d 	STS  _rx_counter3,R30
                 ; 0000 0151                 #asm("sei")
000535 9478      	sei
                 ; 0000 0152                 return data;
000536 2fe1      	MOV  R30,R17
                 ; 0000 0153             break;
                 ; 0000 0154         }
                 _0x33:
                 ; 0000 0155 }
                 _0x20A0011:
000537 9119      	LD   R17,Y+
000538 9508      	RET
                 ;
                 ;// Write a character to the USART Transmitter
                 ;void putchar(char c)
                 ; 0000 0159 {
                 _putchar:
                 ; 0000 015A     switch(poutput)
                 ;	c -> Y+0
000539 91e0 146e 	LDS  R30,_poutput
00053b e0f0      	LDI  R31,0
                 ; 0000 015B         {
                 ; 0000 015C             case USART0:
00053c 9730      	SBIW R30,0
00053d f441      	BRNE _0x4B
                 ; 0000 015D                 while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
                 _0x4C:
00053e 91e0 00c0 	LDS  R30,192
000540 72e0      	ANDI R30,LOW(0x20)
000541 f3e1      	BREQ _0x4C
                 ; 0000 015E                 UDR0=c;
000542 81e8      	LD   R30,Y
000543 93e0 00c6 	STS  198,R30
                 ; 0000 015F             break;
000545 c023      	RJMP _0x4A
                 ; 0000 0160 
                 ; 0000 0161             case USART1:
                 _0x4B:
000546 30e1      	CPI  R30,LOW(0x1)
000547 e0a0      	LDI  R26,HIGH(0x1)
000548 07fa      	CPC  R31,R26
000549 f441      	BRNE _0x4F
                 ; 0000 0162                 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 _0x50:
00054a 91e0 00c8 	LDS  R30,200
00054c 72e0      	ANDI R30,LOW(0x20)
00054d f3e1      	BREQ _0x50
                 ; 0000 0163                 UDR1=c;
00054e 81e8      	LD   R30,Y
00054f 93e0 00ce 	STS  206,R30
                 ; 0000 0164             break;
000551 c017      	RJMP _0x4A
                 ; 0000 0165 
                 ; 0000 0166             case USART2:
                 _0x4F:
000552 30e2      	CPI  R30,LOW(0x2)
000553 e0a0      	LDI  R26,HIGH(0x2)
000554 07fa      	CPC  R31,R26
000555 f441      	BRNE _0x53
                 ; 0000 0167                 while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
                 _0x54:
000556 91e0 00d0 	LDS  R30,208
000558 72e0      	ANDI R30,LOW(0x20)
000559 f3e1      	BREQ _0x54
                 ; 0000 0168                 UDR2=c;
00055a 81e8      	LD   R30,Y
00055b 93e0 00d6 	STS  214,R30
                 ; 0000 0169             break;
00055d c00b      	RJMP _0x4A
                 ; 0000 016A 
                 ; 0000 016B             case USART3:
                 _0x53:
00055e 30e3      	CPI  R30,LOW(0x3)
00055f e0a0      	LDI  R26,HIGH(0x3)
000560 07fa      	CPC  R31,R26
000561 f439      	BRNE _0x4A
                 ; 0000 016C                 while ((UCSR3A & DATA_REGISTER_EMPTY)==0);
                 _0x58:
000562 91e0 0130 	LDS  R30,304
000564 72e0      	ANDI R30,LOW(0x20)
000565 f3e1      	BREQ _0x58
                 ; 0000 016D                 UDR3=c;
000566 81e8      	LD   R30,Y
000567 93e0 0136 	STS  310,R30
                 ; 0000 016E             break;
                 ; 0000 016F         }
                 _0x4A:
                 ; 0000 0170 }
000569 9621      	ADIW R28,1
00056a 9508      	RET
                 ;
                 ;// Count available data in serial receive buffer
                 ;unsigned int serialAvailable(void)
                 ; 0000 0174 {
                 _serialAvailable:
                 ; 0000 0175     switch(poutput)
00056b 91e0 146e 	LDS  R30,_poutput
00056d e0f0      	LDI  R31,0
                 ; 0000 0176         {
                 ; 0000 0177             case USART0:
00056e 9730      	SBIW R30,0
00056f f421      	BRNE _0x5E
                 ; 0000 0178                 return rx_counter0;
                +
000570 2de7     +MOV R30 , R7
000571 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000572 9508      	RET
                 ; 0000 0179             break;
000573 c017      	RJMP _0x5D
                 ; 0000 017A 
                 ; 0000 017B             case USART1:
                 _0x5E:
000574 30e1      	CPI  R30,LOW(0x1)
000575 e0a0      	LDI  R26,HIGH(0x1)
000576 07fa      	CPC  R31,R26
000577 f421      	BRNE _0x5F
                 ; 0000 017C                 return rx_counter1;
                +
000578 2ded     +MOV R30 , R13
000579 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
00057a 9508      	RET
                 ; 0000 017D             break;
00057b c00f      	RJMP _0x5D
                 ; 0000 017E 
                 ; 0000 017F             case USART2:
                 _0x5F:
00057c 30e2      	CPI  R30,LOW(0x2)
00057d e0a0      	LDI  R26,HIGH(0x2)
00057e 07fa      	CPC  R31,R26
00057f f419      	BRNE _0x60
                 ; 0000 0180                 return rx_counter2;
000580 91e0 146a 	LDS  R30,_rx_counter2
000582 c006      	RJMP _0x20A0010
                 ; 0000 0181             break;
                 ; 0000 0182 
                 ; 0000 0183             case USART3:
                 _0x60:
000583 30e3      	CPI  R30,LOW(0x3)
000584 e0a0      	LDI  R26,HIGH(0x3)
000585 07fa      	CPC  R31,R26
000586 f421      	BRNE _0x5D
                 ; 0000 0184                 return rx_counter3;
000587 91e0 146d 	LDS  R30,_rx_counter3
                 _0x20A0010:
000589 e0f0      	LDI  R31,0
00058a 9508      	RET
                 ; 0000 0185             break;
                 ; 0000 0186         }
                 _0x5D:
                 ; 0000 0187 }
00058b 9508      	RET
                 ;
                 ;// Initialize microcontroller
                 ;void mcuInit(void)
                 ; 0000 018B {
                 _mcuInit:
                 ; 0000 018C     // Crystal Oscillator division factor: 1
                 ; 0000 018D     #pragma optsize-
                 ; 0000 018E     CLKPR=0x80;
00058c e8e0      	LDI  R30,LOW(128)
00058d 93e0 0061 	STS  97,R30
                 ; 0000 018F     CLKPR=0x00;
00058f e0e0      	LDI  R30,LOW(0)
000590 93e0 0061 	STS  97,R30
                 ; 0000 0190     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0191     #pragma optsize+
                 ; 0000 0192     #endif
                 ; 0000 0193 
                 ; 0000 0194     DDRC=0x00;
000592 b9e7      	OUT  0x7,R30
                 ; 0000 0195     PORTC=0x00;
000593 b9e8      	OUT  0x8,R30
                 ; 0000 0196 
                 ; 0000 0197     TCCR0A=0x00;
000594 bde4      	OUT  0x24,R30
                 ; 0000 0198     TCCR0B=0x03;
000595 e0e3      	LDI  R30,LOW(3)
000596 bde5      	OUT  0x25,R30
                 ; 0000 0199     TCNT0=0x00;
000597 e0e0      	LDI  R30,LOW(0)
000598 bde6      	OUT  0x26,R30
                 ; 0000 019A     OCR0A=0x00;
000599 bde7      	OUT  0x27,R30
                 ; 0000 019B     OCR0B=0x00;
00059a bde8      	OUT  0x28,R30
                 ; 0000 019C     TIMSK0=0x01;
00059b e0e1      	LDI  R30,LOW(1)
00059c 93e0 006e 	STS  110,R30
                 ; 0000 019D     // USART0 initialization
                 ; 0000 019E     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 019F     // USART0 Receiver: On
                 ; 0000 01A0     // USART0 Transmitter: On
                 ; 0000 01A1     // USART0 Mode: Asynchronous
                 ; 0000 01A2     // USART0 Baud Rate: 9600
                 ; 0000 01A3     UCSR0A=0x00;
00059e e0e0      	LDI  R30,LOW(0)
00059f 93e0 00c0 	STS  192,R30
                 ; 0000 01A4     UCSR0B=0x98;
0005a1 e9e8      	LDI  R30,LOW(152)
0005a2 93e0 00c1 	STS  193,R30
                 ; 0000 01A5     UCSR0C=0x06;
0005a4 e0e6      	LDI  R30,LOW(6)
0005a5 93e0 00c2 	STS  194,R30
                 ; 0000 01A6     UBRR0H=0x00;
0005a7 e0e0      	LDI  R30,LOW(0)
0005a8 93e0 00c5 	STS  197,R30
                 ; 0000 01A7     UBRR0L=0x67;
0005aa e6e7      	LDI  R30,LOW(103)
0005ab 93e0 00c4 	STS  196,R30
                 ; 0000 01A8 
                 ; 0000 01A9     // USART1 initialization
                 ; 0000 01AA     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01AB     // USART1 Receiver: On
                 ; 0000 01AC     // USART1 Transmitter: On
                 ; 0000 01AD     // USART1 Mode: Asynchronous
                 ; 0000 01AE     // USART1 Baud Rate: 9600
                 ; 0000 01AF     UCSR1A=0x00;
0005ad e0e0      	LDI  R30,LOW(0)
0005ae 93e0 00c8 	STS  200,R30
                 ; 0000 01B0     UCSR1B=0x98;
0005b0 e9e8      	LDI  R30,LOW(152)
0005b1 93e0 00c9 	STS  201,R30
                 ; 0000 01B1     UCSR1C=0x06;
0005b3 e0e6      	LDI  R30,LOW(6)
0005b4 93e0 00ca 	STS  202,R30
                 ; 0000 01B2     UBRR1H=0x00;
0005b6 e0e0      	LDI  R30,LOW(0)
0005b7 93e0 00cd 	STS  205,R30
                 ; 0000 01B3     UBRR1L=0x67;
0005b9 e6e7      	LDI  R30,LOW(103)
0005ba 93e0 00cc 	STS  204,R30
                 ; 0000 01B4 
                 ; 0000 01B5     // USART2 initialization
                 ; 0000 01B6     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01B7     // USART2 Receiver: On
                 ; 0000 01B8     // USART2 Transmitter: On
                 ; 0000 01B9     // USART2 Mode: Asynchronous
                 ; 0000 01BA     // USART2 Baud Rate: 9600
                 ; 0000 01BB     UCSR2A=0x00;
0005bc e0e0      	LDI  R30,LOW(0)
0005bd 93e0 00d0 	STS  208,R30
                 ; 0000 01BC     UCSR2B=0x98;
0005bf e9e8      	LDI  R30,LOW(152)
0005c0 93e0 00d1 	STS  209,R30
                 ; 0000 01BD     UCSR2C=0x06;
0005c2 e0e6      	LDI  R30,LOW(6)
0005c3 93e0 00d2 	STS  210,R30
                 ; 0000 01BE     UBRR2H=0x00;
0005c5 e0e0      	LDI  R30,LOW(0)
0005c6 93e0 00d5 	STS  213,R30
                 ; 0000 01BF     UBRR2L=0x67;
0005c8 e6e7      	LDI  R30,LOW(103)
0005c9 93e0 00d4 	STS  212,R30
                 ; 0000 01C0 
                 ; 0000 01C1      // USART3 initialization
                 ; 0000 01C2     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01C3     // USART3 Receiver: On
                 ; 0000 01C4     // USART3 Transmitter: On
                 ; 0000 01C5     // USART3 Mode: Asynchronous
                 ; 0000 01C6     // USART3 Baud Rate: 9600
                 ; 0000 01C7     UCSR3A=0x00;
0005cb e0e0      	LDI  R30,LOW(0)
0005cc 93e0 0130 	STS  304,R30
                 ; 0000 01C8     UCSR3B=0x98;
0005ce e9e8      	LDI  R30,LOW(152)
0005cf 93e0 0131 	STS  305,R30
                 ; 0000 01C9     UCSR3C=0x06;
0005d1 e0e6      	LDI  R30,LOW(6)
0005d2 93e0 0132 	STS  306,R30
                 ; 0000 01CA     UBRR3H=0x00;
0005d4 e0e0      	LDI  R30,LOW(0)
0005d5 93e0 0135 	STS  309,R30
                 ; 0000 01CB     UBRR3L=0x67;
0005d7 e6e7      	LDI  R30,LOW(103)
0005d8 93e0 0134 	STS  308,R30
                 ; 0000 01CC 
                 ; 0000 01CD     // Analog Comparator initialization
                 ; 0000 01CE     // Analog Comparator: Off
                 ; 0000 01CF     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01D0     ACSR=0x80;
0005da e8e0      	LDI  R30,LOW(128)
0005db bfe0      	OUT  0x30,R30
                 ; 0000 01D1     ADCSRB=0x00;
0005dc e0e0      	LDI  R30,LOW(0)
0005dd 93e0 007b 	STS  123,R30
                 ; 0000 01D2 
                 ; 0000 01D3     // ADC initialization
                 ; 0000 01D4     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 01D5     // ADC Voltage Reference: AVCC pin
                 ; 0000 01D6     // ADC Auto Trigger Source: Free Running
                 ; 0000 01D7     // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 01D8     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 01D9     DIDR0=0x0F;
0005df e0ef      	LDI  R30,LOW(15)
0005e0 93e0 007e 	STS  126,R30
                 ; 0000 01DA     // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
                 ; 0000 01DB     // ADC12: On, ADC13: On, ADC14: On, ADC15: On
                 ; 0000 01DC     DIDR2=0x00;
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 93e0 007d 	STS  125,R30
                 ; 0000 01DD     ADMUX=ADC_VREF_TYPE & 0xff;
0005e5 e4e0      	LDI  R30,LOW(64)
0005e6 93e0 007c 	STS  124,R30
                 ; 0000 01DE     ADCSRA=0xA4;
0005e8 eae4      	LDI  R30,LOW(164)
0005e9 93e0 007a 	STS  122,R30
                 ; 0000 01DF     ADCSRB&=0xF8;
0005eb 91e0 007b 	LDS  R30,123
0005ed 7fe8      	ANDI R30,LOW(0xF8)
0005ee 93e0 007b 	STS  123,R30
                 ; 0000 01E0 
                 ; 0000 01E1     // Global enable interrupts
                 ; 0000 01E2     #asm("sei")
0005f0 9478      	sei
                 ; 0000 01E3 }
0005f1 9508      	RET
                 ;
                 ;void xbeeTransmit(char *packet,int _dataLength,long int address64H,long int address64L)
                 ; 0000 01E6 {
                 _xbeeTransmit:
                 ; 0000 01E7     long int i;
                 ; 0000 01E8     char checkSum,destByte,locaddH,locaddL;
                 ; 0000 01E9     int length=0;
                 ; 0000 01EA     int dataLength=_dataLength;
                 ; 0000 01EB //    static char frameID=0x01;
                 ; 0000 01EC //    frameID++;
                 ; 0000 01ED //    if (frameID==0x00) frameID=0x01;
                 ; 0000 01EE     locaddL=XBEE_16BIT_ADDRESS;
0005f2 9726      	SBIW R28,6
0005f3 940e 1c4f 	CALL __SAVELOCR6
                 ;	*packet -> Y+22
                 ;	_dataLength -> Y+20
                 ;	address64H -> Y+16
                 ;	address64L -> Y+12
                 ;	i -> Y+8
                 ;	checkSum -> R17
                 ;	destByte -> R16
                 ;	locaddH -> R19
                 ;	locaddL -> R18
                 ;	length -> R20,R21
                 ;	dataLength -> Y+6
                +
0005f5 e040     +LDI R20 , LOW ( 0 )
0005f6 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0005f7 89ec      	LDD  R30,Y+20
0005f8 89fd      	LDD  R31,Y+20+1
0005f9 83ee      	STD  Y+6,R30
0005fa 83ff      	STD  Y+6+1,R31
0005fb ef2e      	LDI  R18,LOW(254)
                 ; 0000 01EF     locaddH=XBEE_16BIT_ADDRESS>>8;
0005fc ef3f      	LDI  R19,LOW(255)
                 ; 0000 01F0     checkSum=0xFF;
0005fd ef1f      	LDI  R17,LOW(255)
                 ; 0000 01F1     length=dataLength+14;
0005fe 963e      	ADIW R30,14
0005ff 01af      	MOVW R20,R30
                 ; 0000 01F2     checkSum-=XBEE_FRAME_TYPE_TXREQ;
000600 2fe1      	MOV  R30,R17
000601 e0f0      	LDI  R31,0
000602 9770      	SBIW R30,16
000603 2f1e      	MOV  R17,R30
                 ; 0000 01F3     checkSum-=XBEE_FRAME_ID; // checkSum-=frameID;
000604 2fe1      	MOV  R30,R17
000605 e0f0      	LDI  R31,0
000606 9730      	SBIW R30,0
000607 2f1e      	MOV  R17,R30
                 ; 0000 01F4     checkSum-=locaddL;
000608 2fa1      	MOV  R26,R17
000609 27bb      	CLR  R27
00060a 2fe2      	MOV  R30,R18
00060b e0f0      	LDI  R31,0
00060c 940e 1c39 	CALL __SWAPW12
00060e 1bea      	SUB  R30,R26
00060f 0bfb      	SBC  R31,R27
000610 2f1e      	MOV  R17,R30
                 ; 0000 01F5     checkSum-=locaddH;
000611 2fa1      	MOV  R26,R17
000612 27bb      	CLR  R27
000613 2fe3      	MOV  R30,R19
000614 e0f0      	LDI  R31,0
000615 940e 1c39 	CALL __SWAPW12
000617 1bea      	SUB  R30,R26
000618 0bfb      	SBC  R31,R27
000619 2f1e      	MOV  R17,R30
                 ; 0000 01F6     checkSum-=BROADCAST_RADIUS;
00061a 2fe1      	MOV  R30,R17
00061b e0f0      	LDI  R31,0
00061c 9730      	SBIW R30,0
00061d 2f1e      	MOV  R17,R30
                 ; 0000 01F7     checkSum-= XBEE_TX_OPTIONS;
00061e 2fe1      	MOV  R30,R17
00061f e0f0      	LDI  R31,0
000620 9730      	SBIW R30,0
000621 2f1e      	MOV  R17,R30
                 ; 0000 01F8     poutput=USART0;
000622 e0e0      	LDI  R30,LOW(0)
000623 93e0 146e 	STS  _poutput,R30
                 ; 0000 01F9     putchar(XBEE_START_DELIMITER);
000625 e7ee      	LDI  R30,LOW(126)
000626 93ea      	ST   -Y,R30
000627 df11      	RCALL _putchar
                 ; 0000 01FA     putchar(XBEE_LENGTH_MSB);
000628 e0e0      	LDI  R30,LOW(0)
000629 93ea      	ST   -Y,R30
00062a df0e      	RCALL _putchar
                 ; 0000 01FB     putchar(length);
00062b 934a      	ST   -Y,R20
00062c df0c      	RCALL _putchar
                 ; 0000 01FC     putchar(XBEE_FRAME_TYPE_TXREQ);
00062d e1e0      	LDI  R30,LOW(16)
00062e 93ea      	ST   -Y,R30
00062f df09      	RCALL _putchar
                 ; 0000 01FD     putchar(XBEE_FRAME_ID); // putchar(frameID);
000630 e0e0      	LDI  R30,LOW(0)
000631 93ea      	ST   -Y,R30
000632 df06      	RCALL _putchar
                 ; 0000 01FE     for (i=4;i>0;i--)
                +
000633 e0e4     +LDI R30 , LOW ( 0x4 )
000634 e0f0     +LDI R31 , HIGH ( 0x4 )
000635 e060     +LDI R22 , BYTE3 ( 0x4 )
000636 e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
                +
000637 87e8     +STD Y + 8 , R30
000638 87f9     +STD Y + 8 + 1 , R31
000639 876a     +STD Y + 8 + 2 , R22
00063a 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 _0x63:
                +
00063b 85a8     +LDD R26 , Y + 8
00063c 85b9     +LDD R27 , Y + 8 + 1
00063d 858a     +LDD R24 , Y + 8 + 2
00063e 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00063f 940e 1c44 	CALL __CPD02
000641 f54c      	BRGE _0x64
                 ; 0000 01FF         {
                 ; 0000 0200             destByte=address64H>>(8*(i-1));
                +
000642 85e8     +LDD R30 , Y + 8
000643 85f9     +LDD R31 , Y + 8 + 1
000644 856a     +LDD R22 , Y + 8 + 2
000645 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
000646 50e1     +SUBI R30 , LOW ( 1 )
000647 40f0     +SBCI R31 , HIGH ( 1 )
000648 4060     +SBCI R22 , BYTE3 ( 1 )
000649 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
00064a 0fee      	LSL  R30
00064b 0fee      	LSL  R30
00064c 0fee      	LSL  R30
                +
00064d 89a8     +LDD R26 , Y + 16
00064e 89b9     +LDD R27 , Y + 16 + 1
00064f 898a     +LDD R24 , Y + 16 + 2
000650 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
000651 940e 1b51 	CALL __ASRD12
000653 2f0e      	MOV  R16,R30
                 ; 0000 0201             putchar(destByte);
000654 930a      	ST   -Y,R16
000655 dee3      	RCALL _putchar
                 ; 0000 0202             checkSum-=destByte;
000656 2fa1      	MOV  R26,R17
000657 27bb      	CLR  R27
000658 2fe0      	MOV  R30,R16
000659 e0f0      	LDI  R31,0
00065a 940e 1c39 	CALL __SWAPW12
00065c 1bea      	SUB  R30,R26
00065d 0bfb      	SBC  R31,R27
00065e 2f1e      	MOV  R17,R30
                 ; 0000 0203         }
                +
00065f 85e8     +LDD R30 , Y + 8
000660 85f9     +LDD R31 , Y + 8 + 1
000661 856a     +LDD R22 , Y + 8 + 2
000662 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000663 9731      	SBIW R30,1
000664 4060      	SBCI R22,0
000665 4070      	SBCI R23,0
                +
000666 87e8     +STD Y + 8 , R30
000667 87f9     +STD Y + 8 + 1 , R31
000668 876a     +STD Y + 8 + 2 , R22
000669 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
00066a cfd0      	RJMP _0x63
                 _0x64:
                 ; 0000 0204     for (i=4;i>0;i--)
                +
00066b e0e4     +LDI R30 , LOW ( 0x4 )
00066c e0f0     +LDI R31 , HIGH ( 0x4 )
00066d e060     +LDI R22 , BYTE3 ( 0x4 )
00066e e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
                +
00066f 87e8     +STD Y + 8 , R30
000670 87f9     +STD Y + 8 + 1 , R31
000671 876a     +STD Y + 8 + 2 , R22
000672 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 _0x66:
                +
000673 85a8     +LDD R26 , Y + 8
000674 85b9     +LDD R27 , Y + 8 + 1
000675 858a     +LDD R24 , Y + 8 + 2
000676 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000677 940e 1c44 	CALL __CPD02
000679 f54c      	BRGE _0x67
                 ; 0000 0205         {
                 ; 0000 0206             destByte=address64L>>(8*(i-1));
                +
00067a 85e8     +LDD R30 , Y + 8
00067b 85f9     +LDD R31 , Y + 8 + 1
00067c 856a     +LDD R22 , Y + 8 + 2
00067d 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
00067e 50e1     +SUBI R30 , LOW ( 1 )
00067f 40f0     +SBCI R31 , HIGH ( 1 )
000680 4060     +SBCI R22 , BYTE3 ( 1 )
000681 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
000682 0fee      	LSL  R30
000683 0fee      	LSL  R30
000684 0fee      	LSL  R30
                +
000685 85ac     +LDD R26 , Y + 12
000686 85bd     +LDD R27 , Y + 12 + 1
000687 858e     +LDD R24 , Y + 12 + 2
000688 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000689 940e 1b51 	CALL __ASRD12
00068b 2f0e      	MOV  R16,R30
                 ; 0000 0207             putchar(destByte);
00068c 930a      	ST   -Y,R16
00068d deab      	RCALL _putchar
                 ; 0000 0208             checkSum-=destByte;
00068e 2fa1      	MOV  R26,R17
00068f 27bb      	CLR  R27
000690 2fe0      	MOV  R30,R16
000691 e0f0      	LDI  R31,0
000692 940e 1c39 	CALL __SWAPW12
000694 1bea      	SUB  R30,R26
000695 0bfb      	SBC  R31,R27
000696 2f1e      	MOV  R17,R30
                 ; 0000 0209         }
                +
000697 85e8     +LDD R30 , Y + 8
000698 85f9     +LDD R31 , Y + 8 + 1
000699 856a     +LDD R22 , Y + 8 + 2
00069a 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00069b 9731      	SBIW R30,1
00069c 4060      	SBCI R22,0
00069d 4070      	SBCI R23,0
                +
00069e 87e8     +STD Y + 8 , R30
00069f 87f9     +STD Y + 8 + 1 , R31
0006a0 876a     +STD Y + 8 + 2 , R22
0006a1 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0006a2 cfd0      	RJMP _0x66
                 _0x67:
                 ; 0000 020A     putchar(locaddH);
0006a3 933a      	ST   -Y,R19
0006a4 de94      	RCALL _putchar
                 ; 0000 020B     putchar(locaddL);
0006a5 932a      	ST   -Y,R18
0006a6 de92      	RCALL _putchar
                 ; 0000 020C     putchar(BROADCAST_RADIUS);
0006a7 e0e0      	LDI  R30,LOW(0)
0006a8 93ea      	ST   -Y,R30
0006a9 de8f      	RCALL _putchar
                 ; 0000 020D     putchar(XBEE_TX_OPTIONS);
0006aa e0e0      	LDI  R30,LOW(0)
0006ab 93ea      	ST   -Y,R30
0006ac de8c      	RCALL _putchar
                 ; 0000 020E     for (i=0;i<dataLength;i++)
0006ad e0e0      	LDI  R30,LOW(0)
                +
0006ae 87e8     +STD Y + 8 , R30
0006af 87e9     +STD Y + 8 + 1 , R30
0006b0 87ea     +STD Y + 8 + 2 , R30
0006b1 87eb     +STD Y + 8 + 3 , R30
                 	__CLRD1S 8
                 _0x69:
0006b2 81ee      	LDD  R30,Y+6
0006b3 81ff      	LDD  R31,Y+6+1
                +
0006b4 85a8     +LDD R26 , Y + 8
0006b5 85b9     +LDD R27 , Y + 8 + 1
0006b6 858a     +LDD R24 , Y + 8 + 2
0006b7 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0006b8 940e 1b71 	CALL __CWD1
0006ba 940e 1c4a 	CALL __CPD21
0006bc f524      	BRGE _0x6A
                 ; 0000 020F         {
                 ; 0000 0210             putchar(packet[i]);
0006bd 85e8      	LDD  R30,Y+8
0006be 85f9      	LDD  R31,Y+8+1
0006bf 89ae      	LDD  R26,Y+22
0006c0 89bf      	LDD  R27,Y+22+1
0006c1 0fae      	ADD  R26,R30
0006c2 1fbf      	ADC  R27,R31
0006c3 91ec      	LD   R30,X
0006c4 93ea      	ST   -Y,R30
0006c5 de73      	RCALL _putchar
                 ; 0000 0211             checkSum-=packet[i];
0006c6 2e01      	MOV  R0,R17
0006c7 2411      	CLR  R1
0006c8 85e8      	LDD  R30,Y+8
0006c9 85f9      	LDD  R31,Y+8+1
0006ca 89ae      	LDD  R26,Y+22
0006cb 89bf      	LDD  R27,Y+22+1
0006cc 0fae      	ADD  R26,R30
0006cd 1fbf      	ADC  R27,R31
0006ce 91ac      	LD   R26,X
0006cf 27bb      	CLR  R27
0006d0 01f0      	MOVW R30,R0
0006d1 1bea      	SUB  R30,R26
0006d2 0bfb      	SBC  R31,R27
0006d3 2f1e      	MOV  R17,R30
                 ; 0000 0212         }
                +
0006d4 85e8     +LDD R30 , Y + 8
0006d5 85f9     +LDD R31 , Y + 8 + 1
0006d6 856a     +LDD R22 , Y + 8 + 2
0006d7 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
0006d8 5fef     +SUBI R30 , LOW ( - 1 )
0006d9 4fff     +SBCI R31 , HIGH ( - 1 )
0006da 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0006db 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0006dc 87e8     +STD Y + 8 , R30
0006dd 87f9     +STD Y + 8 + 1 , R31
0006de 876a     +STD Y + 8 + 2 , R22
0006df 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0006e0 cfd1      	RJMP _0x69
                 _0x6A:
                 ; 0000 0213     putchar(checkSum);
0006e1 931a      	ST   -Y,R17
0006e2 de56      	RCALL _putchar
                 ; 0000 0214 }
0006e3 940e 1c56 	CALL __LOADLOCR6
0006e5 9668      	ADIW R28,24
0006e6 9508      	RET
                 ;
                 ;unsigned char xbeeReceive(char * recvPacket)
                 ; 0000 0217 {
                 _xbeeReceive:
                 ; 0000 0218     char temp=0,lengthMSB=0,lengthLSB=0,index,_64sourceAddress[10]="",_16sourceAddress[4]="",rxOptions=0,_checkSum=0xFF,_recvCheckSum=0;
                 ; 0000 0219     int packetLength=0;
                 ; 0000 021A     poutput=USART0;
0006e7 9761      	SBIW R28,17
0006e8 e181      	LDI  R24,17
0006e9 e0a0      	LDI  R26,LOW(0)
0006ea e0b0      	LDI  R27,HIGH(0)
0006eb e2e4      	LDI  R30,LOW(_0x6B*2)
0006ec e0f1      	LDI  R31,HIGH(_0x6B*2)
0006ed 940e 1c5d 	CALL __INITLOCB
0006ef 940e 1c4f 	CALL __SAVELOCR6
                 ;	*recvPacket -> Y+23
                 ;	temp -> R17
                 ;	lengthMSB -> R16
                 ;	lengthLSB -> R19
                 ;	index -> R18
                 ;	_64sourceAddress -> Y+13
                 ;	_16sourceAddress -> Y+9
                 ;	rxOptions -> R21
                 ;	_checkSum -> R20
                 ;	_recvCheckSum -> Y+8
                 ;	packetLength -> Y+6
0006f1 e010      	LDI  R17,0
0006f2 e000      	LDI  R16,0
0006f3 e030      	LDI  R19,0
0006f4 e050      	LDI  R21,0
0006f5 ef4f      	LDI  R20,255
0006f6 e0e0      	LDI  R30,LOW(0)
0006f7 93e0 146e 	STS  _poutput,R30
                 ; 0000 021B     if (serialAvailable())
0006f9 de71      	RCALL _serialAvailable
0006fa 9730      	SBIW R30,0
0006fb f411      	BRNE PC+3
0006fc 940c 07a6 	JMP _0x6C
                 ; 0000 021C         {
                 ; 0000 021D             temp=getchar();
0006fe ddb5      	RCALL _getchar
0006ff 2f1e      	MOV  R17,R30
                 ; 0000 021E             if (temp==XBEE_START_DELIMITER)
000700 371e      	CPI  R17,126
000701 f011      	BREQ PC+3
000702 940c 07a3 	JMP _0x6D
                 ; 0000 021F                 {
                 ; 0000 0220                     while (serialAvailable()<2);
                 _0x6E:
000704 de66      	RCALL _serialAvailable
000705 9732      	SBIW R30,2
000706 f3e8      	BRLO _0x6E
                 ; 0000 0221                     lengthMSB=getchar();
000707 ddac      	RCALL _getchar
000708 2f0e      	MOV  R16,R30
                 ; 0000 0222                     lengthLSB=getchar();
000709 ddaa      	RCALL _getchar
00070a 2f3e      	MOV  R19,R30
                 ; 0000 0223                     packetLength=(lengthMSB<<8)+lengthLSB;
00070b 2ff0      	MOV  R31,R16
00070c e0e0      	LDI  R30,LOW(0)
00070d 01df      	MOVW R26,R30
00070e 2fe3      	MOV  R30,R19
00070f e0f0      	LDI  R31,0
000710 0fea      	ADD  R30,R26
000711 1ffb      	ADC  R31,R27
000712 83ee      	STD  Y+6,R30
000713 83ff      	STD  Y+6+1,R31
                 ; 0000 0224                     if (packetLength>12)
000714 81ae      	LDD  R26,Y+6
000715 81bf      	LDD  R27,Y+6+1
000716 971d      	SBIW R26,13
000717 f414      	BRGE PC+3
000718 940c 07a1 	JMP _0x71
                 ; 0000 0225                         {
                 ; 0000 0226                             temp=getchar();
00071a dd99      	RCALL _getchar
00071b 2f1e      	MOV  R17,R30
                 ; 0000 0227                             if (temp==XBEE_FRAME_TYPE_RXPACKET)
00071c 3910      	CPI  R17,144
00071d f011      	BREQ PC+3
00071e 940c 079f 	JMP _0x72
                 ; 0000 0228                                 {
                 ; 0000 0229                                     _checkSum-=XBEE_FRAME_TYPE_RXPACKET;
000720 2fe4      	MOV  R30,R20
000721 e0f0      	LDI  R31,0
000722 59e0      	SUBI R30,LOW(144)
000723 40f0      	SBCI R31,HIGH(144)
000724 2f4e      	MOV  R20,R30
                 ; 0000 022A                                     while (serialAvailable()<8);
                 _0x73:
000725 de45      	RCALL _serialAvailable
000726 9738      	SBIW R30,8
000727 f3e8      	BRLO _0x73
                 ; 0000 022B                                     for (index=0;index<8;index++)
000728 e020      	LDI  R18,LOW(0)
                 _0x77:
000729 3028      	CPI  R18,8
00072a f4a0      	BRSH _0x78
                 ; 0000 022C                                         {
                 ; 0000 022D                                             temp=getchar();
00072b dd88      	RCALL _getchar
00072c 2f1e      	MOV  R17,R30
                 ; 0000 022E                                             _64sourceAddress[index]=temp;
00072d 2fe2      	MOV  R30,R18
00072e e0f0      	LDI  R31,0
00072f 01de      	MOVW R26,R28
000730 961d      	ADIW R26,13
000731 0fea      	ADD  R30,R26
000732 1ffb      	ADC  R31,R27
000733 8310      	ST   Z,R17
                 ; 0000 022F                                             _checkSum-=temp;
000734 2fa4      	MOV  R26,R20
000735 27bb      	CLR  R27
000736 2fe1      	MOV  R30,R17
000737 e0f0      	LDI  R31,0
000738 940e 1c39 	CALL __SWAPW12
00073a 1bea      	SUB  R30,R26
00073b 0bfb      	SBC  R31,R27
00073c 2f4e      	MOV  R20,R30
                 ; 0000 0230                                         }
00073d 5f2f      	SUBI R18,-1
00073e cfea      	RJMP _0x77
                 _0x78:
                 ; 0000 0231                                     while (serialAvailable()<2);
                 _0x79:
00073f de2b      	RCALL _serialAvailable
000740 9732      	SBIW R30,2
000741 f3e8      	BRLO _0x79
                 ; 0000 0232                                     for (index=0;index<2;index++)
000742 e020      	LDI  R18,LOW(0)
                 _0x7D:
000743 3022      	CPI  R18,2
000744 f4a0      	BRSH _0x7E
                 ; 0000 0233                                         {
                 ; 0000 0234                                             temp=getchar();
000745 dd6e      	RCALL _getchar
000746 2f1e      	MOV  R17,R30
                 ; 0000 0235                                             _16sourceAddress[index]=temp;
000747 2fe2      	MOV  R30,R18
000748 e0f0      	LDI  R31,0
000749 01de      	MOVW R26,R28
00074a 9619      	ADIW R26,9
00074b 0fea      	ADD  R30,R26
00074c 1ffb      	ADC  R31,R27
00074d 8310      	ST   Z,R17
                 ; 0000 0236                                             _checkSum-=temp;
00074e 2fa4      	MOV  R26,R20
00074f 27bb      	CLR  R27
000750 2fe1      	MOV  R30,R17
000751 e0f0      	LDI  R31,0
000752 940e 1c39 	CALL __SWAPW12
000754 1bea      	SUB  R30,R26
000755 0bfb      	SBC  R31,R27
000756 2f4e      	MOV  R20,R30
                 ; 0000 0237                                         }
000757 5f2f      	SUBI R18,-1
000758 cfea      	RJMP _0x7D
                 _0x7E:
                 ; 0000 0238                                     while (serialAvailable()<1);
                 _0x7F:
000759 de11      	RCALL _serialAvailable
00075a 9731      	SBIW R30,1
00075b f3e8      	BRLO _0x7F
                 ; 0000 0239                                     rxOptions=getchar();
00075c dd57      	RCALL _getchar
00075d 2f5e      	MOV  R21,R30
                 ; 0000 023A                                     _checkSum-=rxOptions;
00075e 2fa4      	MOV  R26,R20
00075f 27bb      	CLR  R27
000760 2fe5      	MOV  R30,R21
000761 e0f0      	LDI  R31,0
000762 940e 1c39 	CALL __SWAPW12
000764 1bea      	SUB  R30,R26
000765 0bfb      	SBC  R31,R27
000766 2f4e      	MOV  R20,R30
                 ; 0000 023B                                     while (serialAvailable()<12);
                 _0x82:
000767 de03      	RCALL _serialAvailable
000768 973c      	SBIW R30,12
000769 f3e8      	BRLO _0x82
                 ; 0000 023C                                     for (index=0;index<(packetLength-12);index++)
00076a e020      	LDI  R18,LOW(0)
                 _0x86:
00076b 81ee      	LDD  R30,Y+6
00076c 81ff      	LDD  R31,Y+6+1
00076d 973c      	SBIW R30,12
00076e 2fa2      	MOV  R26,R18
00076f e0b0      	LDI  R27,0
000770 17ae      	CP   R26,R30
000771 07bf      	CPC  R27,R31
000772 f4a4      	BRGE _0x87
                 ; 0000 023D                                         {
                 ; 0000 023E                                             temp=getchar();
000773 dd40      	RCALL _getchar
000774 2f1e      	MOV  R17,R30
                 ; 0000 023F                                             recvPacket[index]=temp;
000775 2fe2      	MOV  R30,R18
000776 89af      	LDD  R26,Y+23
000777 8db8      	LDD  R27,Y+23+1
000778 e0f0      	LDI  R31,0
000779 0fea      	ADD  R30,R26
00077a 1ffb      	ADC  R31,R27
00077b 8310      	ST   Z,R17
                 ; 0000 0240                                             _checkSum-=temp;
00077c 2fa4      	MOV  R26,R20
00077d 27bb      	CLR  R27
00077e 2fe1      	MOV  R30,R17
00077f e0f0      	LDI  R31,0
000780 940e 1c39 	CALL __SWAPW12
000782 1bea      	SUB  R30,R26
000783 0bfb      	SBC  R31,R27
000784 2f4e      	MOV  R20,R30
                 ; 0000 0241                                         }
000785 5f2f      	SUBI R18,-1
000786 cfe4      	RJMP _0x86
                 _0x87:
                 ; 0000 0242                                     while (serialAvailable()<1);
                 _0x88:
000787 dde3      	RCALL _serialAvailable
000788 9731      	SBIW R30,1
000789 f3e8      	BRLO _0x88
                 ; 0000 0243                                     _recvCheckSum=getchar();
00078a dd29      	RCALL _getchar
00078b 87e8      	STD  Y+8,R30
                 ; 0000 0244                                     if (_recvCheckSum!=_checkSum)
00078c 85a8      	LDD  R26,Y+8
00078d 174a      	CP   R20,R26
00078e f071      	BREQ _0x8B
                 ; 0000 0245                                         {
                 ; 0000 0246                                             memset(recvPacket,0,sizeof(recvPacket));
00078f 89ef      	LDD  R30,Y+23
000790 8df8      	LDD  R31,Y+23+1
000791 93fa      	ST   -Y,R31
000792 93ea      	ST   -Y,R30
000793 e0e0      	LDI  R30,LOW(0)
000794 93ea      	ST   -Y,R30
000795 e0e2      	LDI  R30,LOW(2)
000796 e0f0      	LDI  R31,HIGH(2)
000797 93fa      	ST   -Y,R31
000798 93ea      	ST   -Y,R30
000799 940e 1754 	CALL _memset
                 ; 0000 0247                                             return 0;
00079b e0e0      	LDI  R30,LOW(0)
00079c c00a      	RJMP _0x20A000F
                 ; 0000 0248                                         }
                 ; 0000 0249                                     else return 1;
                 _0x8B:
00079d e0e1      	LDI  R30,LOW(1)
00079e c008      	RJMP _0x20A000F
                 ; 0000 024A                                 }
                 ; 0000 024B                             else return 0;
                 _0x72:
00079f e0e0      	LDI  R30,LOW(0)
0007a0 c006      	RJMP _0x20A000F
                 ; 0000 024C                         }
                 ; 0000 024D                     else return 0;
                 _0x71:
0007a1 e0e0      	LDI  R30,LOW(0)
0007a2 c004      	RJMP _0x20A000F
                 ; 0000 024E                 }
                 ; 0000 024F             else return 0;
                 _0x6D:
0007a3 e0e0      	LDI  R30,LOW(0)
0007a4 c002      	RJMP _0x20A000F
                 ; 0000 0250         }
                 _0x8F:
                 ; 0000 0251     else return 0;
0007a5 c001      	RJMP _0x90
                 _0x6C:
0007a6 e0e0      	LDI  R30,LOW(0)
                 ; 0000 0252 
                 ; 0000 0253 }
                 _0x90:
                 _0x20A000F:
0007a7 940e 1c56 	CALL __LOADLOCR6
0007a9 9669      	ADIW R28,25
0007aa 9508      	RET
                 ;
                 ;unsigned char _3gEchoOff(void)
                 ; 0000 0256 {
                 __3gEchoOff:
                 ; 0000 0257     char temp=0x00, index=0;
                 ; 0000 0258     char _3gRespond[10];
                 ; 0000 0259     memset(_3gRespond,0,sizeof(_3gRespond));
0007ab 972a      	SBIW R28,10
0007ac 931a      	ST   -Y,R17
0007ad 930a      	ST   -Y,R16
                 ;	temp -> R17
                 ;	index -> R16
                 ;	_3gRespond -> Y+2
0007ae e010      	LDI  R17,0
0007af e000      	LDI  R16,0
0007b0 01fe      	MOVW R30,R28
0007b1 9632      	ADIW R30,2
0007b2 93fa      	ST   -Y,R31
0007b3 93ea      	ST   -Y,R30
0007b4 e0e0      	LDI  R30,LOW(0)
0007b5 93ea      	ST   -Y,R30
0007b6 e0ea      	LDI  R30,LOW(10)
0007b7 e0f0      	LDI  R31,HIGH(10)
0007b8 93fa      	ST   -Y,R31
0007b9 93ea      	ST   -Y,R30
0007ba 940e 1754 	CALL _memset
                 ; 0000 025A     poutput=USART1;
0007bc e0e1      	LDI  R30,LOW(1)
0007bd 93e0 146e 	STS  _poutput,R30
                 ; 0000 025B     printf("ATE0\r");
                +
0007bf e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 70 ) )
0007c0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 70 ) )
                 	__POINTW1FN _0x0,70
0007c1 93fa      	ST   -Y,R31
0007c2 93ea      	ST   -Y,R30
0007c3 e080      	LDI  R24,0
0007c4 940e 172d 	CALL _printf
0007c6 9622      	ADIW R28,2
                 ; 0000 025C     while (temp!=LF) temp=getchar();
                 _0x91:
0007c7 301a      	CPI  R17,10
0007c8 f019      	BREQ _0x93
0007c9 dcea      	RCALL _getchar
0007ca 2f1e      	MOV  R17,R30
0007cb cffb      	RJMP _0x91
                 _0x93:
                 ; 0000 025D temp=getchar();
0007cc dce7      	RCALL _getchar
0007cd 2f1e      	MOV  R17,R30
                 ; 0000 025E     while (temp!=LF) // while the read character is not <LF>
                 _0x94:
0007ce 301a      	CPI  R17,10
0007cf f061      	BREQ _0x96
                 ; 0000 025F         {
                 ; 0000 0260             _3gRespond[index]=temp; // put temp value to _3gRespond array
0007d0 2fe0      	MOV  R30,R16
0007d1 e0f0      	LDI  R31,0
0007d2 01de      	MOVW R26,R28
0007d3 9612      	ADIW R26,2
0007d4 0fea      	ADD  R30,R26
0007d5 1ffb      	ADC  R31,R27
0007d6 8310      	ST   Z,R17
                 ; 0000 0261             index++; // increment index
0007d7 5f0f      	SUBI R16,-1
                 ; 0000 0262             temp=getchar(); // read a character
0007d8 dcdb      	RCALL _getchar
0007d9 2f1e      	MOV  R17,R30
                 ; 0000 0263             if (index==9) break; // if index reach the last element of _3gRespond array
0007da 3009      	CPI  R16,9
0007db f791      	BRNE _0x94
                 ; 0000 0264         }
                 _0x96:
                 ; 0000 0265     if (strstr(_3gRespond,"OK")!=NULL)  return 1;
0007dc 01fe      	MOVW R30,R28
0007dd 9632      	ADIW R30,2
0007de 93fa      	ST   -Y,R31
0007df 93ea      	ST   -Y,R30
                +
0007e0 e0e0     +LDI R30 , LOW ( _0x99 + ( 0 ) )
0007e1 e0fa     +LDI R31 , HIGH ( _0x99 + ( 0 ) )
                 	__POINTW1MN _0x99,0
0007e2 93fa      	ST   -Y,R31
0007e3 93ea      	ST   -Y,R30
0007e4 940e 1797 	CALL _strstr
0007e6 9730      	SBIW R30,0
0007e7 f011      	BREQ _0x98
0007e8 e0e1      	LDI  R30,LOW(1)
0007e9 c001      	RJMP _0x20A000E
                 ; 0000 0266     else return 0;
                 _0x98:
0007ea e0e0      	LDI  R30,LOW(0)
                 ; 0000 0267 }
                 _0x20A000E:
0007eb 8119      	LDD  R17,Y+1
0007ec 8108      	LDD  R16,Y+0
0007ed 962c      	ADIW R28,12
0007ee 9508      	RET
                 
                 	.DSEG
                 _0x99:
000a00           	.BYTE 0x3
                 ;
                 ;unsigned char _3gZipCall(unsigned char _state)
                 ; 0000 026A {
                 
                 	.CSEG
                 __3gZipCall:
                 ; 0000 026B     char _3gRespond[70];
                 ; 0000 026C     char temp=0x00, index=0;
                 ; 0000 026D     memset(_3gRespond,0,sizeof(_3gRespond));
0007ef 97ef      	SBIW R28,63
0007f0 9727      	SBIW R28,7
0007f1 931a      	ST   -Y,R17
0007f2 930a      	ST   -Y,R16
                 ;	_state -> Y+72
                 ;	_3gRespond -> Y+2
                 ;	temp -> R17
                 ;	index -> R16
0007f3 e010      	LDI  R17,0
0007f4 e000      	LDI  R16,0
0007f5 01fe      	MOVW R30,R28
0007f6 9632      	ADIW R30,2
0007f7 93fa      	ST   -Y,R31
0007f8 93ea      	ST   -Y,R30
0007f9 e0e0      	LDI  R30,LOW(0)
0007fa 93ea      	ST   -Y,R30
0007fb e4e6      	LDI  R30,LOW(70)
0007fc e0f0      	LDI  R31,HIGH(70)
0007fd 93fa      	ST   -Y,R31
0007fe 93ea      	ST   -Y,R30
0007ff 940e 1754 	CALL _memset
                 ; 0000 026E     poutput=USART1;
000801 e0e1      	LDI  R30,LOW(1)
000802 93e0 146e 	STS  _poutput,R30
                 ; 0000 026F     printf("AT+ZIPCALL=%u\r",_state); // send zipcall command
                +
000804 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 79 ) )
000805 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 79 ) )
                 	__POINTW1FN _0x0,79
000806 93fa      	ST   -Y,R31
000807 93ea      	ST   -Y,R30
                +
000808 01fe     +MOVW R30 , R28
000809 5be6     +SUBI R30 , LOW ( - 74 )
00080a 4fff     +SBCI R31 , HIGH ( - 74 )
00080b 81e0     +LD R30 , Z
                 	__GETB1SX 74
00080c 27ff      	CLR  R31
00080d 2766      	CLR  R22
00080e 2777      	CLR  R23
00080f 940e 1c2e 	CALL __PUTPARD1
000811 e084      	LDI  R24,4
000812 940e 172d 	CALL _printf
000814 9626      	ADIW R28,6
                 ; 0000 0270     //while (serialAvailable()<13); // wait until serial available or 2500 ms passed IF command ATE1 activated
                 ; 0000 0271     //for (index=0;index<13;index++) temp=getchar(); // get the same command string that was sent earlier IF command ATE1 activated
                 ; 0000 0272     //temp=0x00; // reset temp var
                 ; 0000 0273     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
                 _0x9B:
000815 301a      	CPI  R17,10
000816 f019      	BREQ _0x9D
000817 dc9c      	RCALL _getchar
000818 2f1e      	MOV  R17,R30
000819 cffb      	RJMP _0x9B
                 _0x9D:
                 ; 0000 0275 if (_state==1)
                +
00081a 01de     +MOVW R26 , R28
00081b 5ba8     +SUBI R26 , LOW ( - 72 )
00081c 4fbf     +SBCI R27 , HIGH ( - 72 )
00081d 91ac     +LD R26 , X
                 	__GETB2SX 72
00081e 30a1      	CPI  R26,LOW(0x1)
00081f f011      	BREQ PC+3
000820 940c 08b2 	JMP _0x9E
                 ; 0000 0276         {
                 ; 0000 0277             temp=getchar(); // read 1 character from serial
000822 dc91      	RCALL _getchar
000823 2f1e      	MOV  R17,R30
                 ; 0000 0278             while (temp!=LF) // while the read character is not <LF>
                 _0x9F:
000824 301a      	CPI  R17,10
000825 f061      	BREQ _0xA1
                 ; 0000 0279                 {
                 ; 0000 027A                     _3gRespond[index]=temp; // put temp value to _3gRespond array
000826 2fe0      	MOV  R30,R16
000827 e0f0      	LDI  R31,0
000828 01de      	MOVW R26,R28
000829 9612      	ADIW R26,2
00082a 0fea      	ADD  R30,R26
00082b 1ffb      	ADC  R31,R27
00082c 8310      	ST   Z,R17
                 ; 0000 027B                     index++; // increment index
00082d 5f0f      	SUBI R16,-1
                 ; 0000 027C                     temp=getchar(); // read a character
00082e dc85      	RCALL _getchar
00082f 2f1e      	MOV  R17,R30
                 ; 0000 027D                     if (index==69) break; // if index reach the last element of _3gRespond array
000830 3405      	CPI  R16,69
000831 f791      	BRNE _0x9F
                 ; 0000 027E                 }
                 _0xA1:
                 ; 0000 027F             if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
000832 01fe      	MOVW R30,R28
000833 9632      	ADIW R30,2
000834 93fa      	ST   -Y,R31
000835 93ea      	ST   -Y,R30
                +
000836 e0e3     +LDI R30 , LOW ( _0xA4 + ( 0 ) )
000837 e0fa     +LDI R31 , HIGH ( _0xA4 + ( 0 ) )
                 	__POINTW1MN _0xA4,0
000838 93fa      	ST   -Y,R31
000839 93ea      	ST   -Y,R30
00083a 940e 1797 	CALL _strstr
00083c 9730      	SBIW R30,0
00083d f071      	BREQ _0xA3
                 ; 0000 0280                 {
                 ; 0000 0281                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
00083e 01fe      	MOVW R30,R28
00083f 9632      	ADIW R30,2
000840 93fa      	ST   -Y,R31
000841 93ea      	ST   -Y,R30
000842 e0e0      	LDI  R30,LOW(0)
000843 93ea      	ST   -Y,R30
000844 e4e6      	LDI  R30,LOW(70)
000845 e0f0      	LDI  R31,HIGH(70)
000846 93fa      	ST   -Y,R31
000847 93ea      	ST   -Y,R30
000848 940e 1754 	CALL _memset
                 ; 0000 0282                     return 0;
00084a e0e0      	LDI  R30,LOW(0)
00084b c0b1      	RJMP _0x20A000D
                 ; 0000 0283                 }
                 ; 0000 0284             else if (strstr(_3gRespond,"+ZIPCALL: 1")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
                 _0xA3:
00084c 01fe      	MOVW R30,R28
00084d 9632      	ADIW R30,2
00084e 93fa      	ST   -Y,R31
00084f 93ea      	ST   -Y,R30
                +
000850 e0e9     +LDI R30 , LOW ( _0xA4 + ( 6 ) )
000851 e0fa     +LDI R31 , HIGH ( _0xA4 + ( 6 ) )
                 	__POINTW1MN _0xA4,6
000852 93fa      	ST   -Y,R31
000853 93ea      	ST   -Y,R30
000854 940e 1797 	CALL _strstr
000856 9730      	SBIW R30,0
000857 f411      	BRNE PC+3
000858 940c 08b1 	JMP _0xA6
                 ; 0000 0285                 {
                 ; 0000 0286                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
00085a 01fe      	MOVW R30,R28
00085b 9632      	ADIW R30,2
00085c 93fa      	ST   -Y,R31
00085d 93ea      	ST   -Y,R30
00085e e0e0      	LDI  R30,LOW(0)
00085f 93ea      	ST   -Y,R30
000860 e4e6      	LDI  R30,LOW(70)
000861 e0f0      	LDI  R31,HIGH(70)
000862 93fa      	ST   -Y,R31
000863 93ea      	ST   -Y,R30
000864 940e 1754 	CALL _memset
                 ; 0000 0287                     temp=0x00; // reset temp var
000866 e010      	LDI  R17,LOW(0)
                 ; 0000 0288                     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
                 _0xA7:
000867 301a      	CPI  R17,10
000868 f019      	BREQ _0xA9
000869 dc4a      	RCALL _getchar
00086a 2f1e      	MOV  R17,R30
00086b cffb      	RJMP _0xA7
                 _0xA9:
                 ; 0000 0289 index=0;
00086c e000      	LDI  R16,LOW(0)
                 ; 0000 028A                     temp=getchar();
00086d dc46      	RCALL _getchar
00086e 2f1e      	MOV  R17,R30
                 ; 0000 028B                     while (temp!=LF)
                 _0xAA:
00086f 301a      	CPI  R17,10
000870 f061      	BREQ _0xAC
                 ; 0000 028C                         {
                 ; 0000 028D                             _3gRespond[index]=temp; // put temp value to _3gRespond array
000871 2fe0      	MOV  R30,R16
000872 e0f0      	LDI  R31,0
000873 01de      	MOVW R26,R28
000874 9612      	ADIW R26,2
000875 0fea      	ADD  R30,R26
000876 1ffb      	ADC  R31,R27
000877 8310      	ST   Z,R17
                 ; 0000 028E                             index++; // increment index
000878 5f0f      	SUBI R16,-1
                 ; 0000 028F                             temp=getchar(); // read a character
000879 dc3a      	RCALL _getchar
00087a 2f1e      	MOV  R17,R30
                 ; 0000 0290                             if (index==69) break; // if index reach the last element of _3gRespond array
00087b 3405      	CPI  R16,69
00087c f791      	BRNE _0xAA
                 ; 0000 0291                         }
                 _0xAC:
                 ; 0000 0292                     if (strstr(_3gRespond,"OK")!=NULL) // if the  _3gRespond array contains "OK",
00087d 01fe      	MOVW R30,R28
00087e 9632      	ADIW R30,2
00087f 93fa      	ST   -Y,R31
000880 93ea      	ST   -Y,R30
                +
000881 e1e5     +LDI R30 , LOW ( _0xA4 + ( 18 ) )
000882 e0fa     +LDI R31 , HIGH ( _0xA4 + ( 18 ) )
                 	__POINTW1MN _0xA4,18
000883 93fa      	ST   -Y,R31
000884 93ea      	ST   -Y,R30
000885 940e 1797 	CALL _strstr
000887 9730      	SBIW R30,0
000888 f071      	BREQ _0xAE
                 ; 0000 0293                         {
                 ; 0000 0294                             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
000889 01fe      	MOVW R30,R28
00088a 9632      	ADIW R30,2
00088b 93fa      	ST   -Y,R31
00088c 93ea      	ST   -Y,R30
00088d e0e0      	LDI  R30,LOW(0)
00088e 93ea      	ST   -Y,R30
00088f e4e6      	LDI  R30,LOW(70)
000890 e0f0      	LDI  R31,HIGH(70)
000891 93fa      	ST   -Y,R31
000892 93ea      	ST   -Y,R30
000893 940e 1754 	CALL _memset
                 ; 0000 0295                             return 1;
000895 e0e1      	LDI  R30,LOW(1)
000896 c066      	RJMP _0x20A000D
                 ; 0000 0296                         }
                 ; 0000 0297                     else if (strstr(_3gRespond,"OK")==NULL)
                 _0xAE:
000897 01fe      	MOVW R30,R28
000898 9632      	ADIW R30,2
000899 93fa      	ST   -Y,R31
00089a 93ea      	ST   -Y,R30
                +
00089b e1e8     +LDI R30 , LOW ( _0xA4 + ( 21 ) )
00089c e0fa     +LDI R31 , HIGH ( _0xA4 + ( 21 ) )
                 	__POINTW1MN _0xA4,21
00089d 93fa      	ST   -Y,R31
00089e 93ea      	ST   -Y,R30
00089f 940e 1797 	CALL _strstr
0008a1 9730      	SBIW R30,0
0008a2 f471      	BRNE _0xB0
                 ; 0000 0298                         {
                 ; 0000 0299                             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
0008a3 01fe      	MOVW R30,R28
0008a4 9632      	ADIW R30,2
0008a5 93fa      	ST   -Y,R31
0008a6 93ea      	ST   -Y,R30
0008a7 e0e0      	LDI  R30,LOW(0)
0008a8 93ea      	ST   -Y,R30
0008a9 e4e6      	LDI  R30,LOW(70)
0008aa e0f0      	LDI  R31,HIGH(70)
0008ab 93fa      	ST   -Y,R31
0008ac 93ea      	ST   -Y,R30
0008ad 940e 1754 	CALL _memset
                 ; 0000 029A                             return 0;
0008af e0e0      	LDI  R30,LOW(0)
0008b0 c04c      	RJMP _0x20A000D
                 ; 0000 029B                         }
                 ; 0000 029C                 }
                 _0xB0:
                 ; 0000 029D         }
                 _0xA6:
                 ; 0000 029E     else if (_state==0)
0008b1 c04b      	RJMP _0xB1
                 _0x9E:
                +
0008b2 01fe     +MOVW R30 , R28
0008b3 5be8     +SUBI R30 , LOW ( - 72 )
0008b4 4fff     +SBCI R31 , HIGH ( - 72 )
0008b5 81e0     +LD R30 , Z
                 	__GETB1SX 72
0008b6 30e0      	CPI  R30,0
0008b7 f011      	BREQ PC+3
0008b8 940c 08fd 	JMP _0xB2
                 ; 0000 029F         {
                 ; 0000 02A0             temp=getchar(); // read 1 character from serial
0008ba dbf9      	RCALL _getchar
0008bb 2f1e      	MOV  R17,R30
                 ; 0000 02A1             while (temp!=LF) // while the read character is not <LF>
                 _0xB3:
0008bc 301a      	CPI  R17,10
0008bd f061      	BREQ _0xB5
                 ; 0000 02A2                 {
                 ; 0000 02A3                     _3gRespond[index]=temp; // put temp value to _3gRespond array
0008be 2fe0      	MOV  R30,R16
0008bf e0f0      	LDI  R31,0
0008c0 01de      	MOVW R26,R28
0008c1 9612      	ADIW R26,2
0008c2 0fea      	ADD  R30,R26
0008c3 1ffb      	ADC  R31,R27
0008c4 8310      	ST   Z,R17
                 ; 0000 02A4                     index++; // increment index
0008c5 5f0f      	SUBI R16,-1
                 ; 0000 02A5                     temp=getchar(); // read a character
0008c6 dbed      	RCALL _getchar
0008c7 2f1e      	MOV  R17,R30
                 ; 0000 02A6                     if (index==69) break; // if index reach the last element of _3gRespond array
0008c8 3405      	CPI  R16,69
0008c9 f791      	BRNE _0xB3
                 ; 0000 02A7                 }
                 _0xB5:
                 ; 0000 02A8             if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
0008ca 01fe      	MOVW R30,R28
0008cb 9632      	ADIW R30,2
0008cc 93fa      	ST   -Y,R31
0008cd 93ea      	ST   -Y,R30
                +
0008ce e1eb     +LDI R30 , LOW ( _0xA4 + ( 24 ) )
0008cf e0fa     +LDI R31 , HIGH ( _0xA4 + ( 24 ) )
                 	__POINTW1MN _0xA4,24
0008d0 93fa      	ST   -Y,R31
0008d1 93ea      	ST   -Y,R30
0008d2 940e 1797 	CALL _strstr
0008d4 9730      	SBIW R30,0
0008d5 f071      	BREQ _0xB7
                 ; 0000 02A9                 {
                 ; 0000 02AA                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
0008d6 01fe      	MOVW R30,R28
0008d7 9632      	ADIW R30,2
0008d8 93fa      	ST   -Y,R31
0008d9 93ea      	ST   -Y,R30
0008da e0e0      	LDI  R30,LOW(0)
0008db 93ea      	ST   -Y,R30
0008dc e4e6      	LDI  R30,LOW(70)
0008dd e0f0      	LDI  R31,HIGH(70)
0008de 93fa      	ST   -Y,R31
0008df 93ea      	ST   -Y,R30
0008e0 940e 1754 	CALL _memset
                 ; 0000 02AB                     return 0;
0008e2 e0e0      	LDI  R30,LOW(0)
0008e3 c019      	RJMP _0x20A000D
                 ; 0000 02AC                 }
                 ; 0000 02AD             else if (strstr(_3gRespond,"OK")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
                 _0xB7:
0008e4 01fe      	MOVW R30,R28
0008e5 9632      	ADIW R30,2
0008e6 93fa      	ST   -Y,R31
0008e7 93ea      	ST   -Y,R30
                +
0008e8 e2e1     +LDI R30 , LOW ( _0xA4 + ( 30 ) )
0008e9 e0fa     +LDI R31 , HIGH ( _0xA4 + ( 30 ) )
                 	__POINTW1MN _0xA4,30
0008ea 93fa      	ST   -Y,R31
0008eb 93ea      	ST   -Y,R30
0008ec 940e 1797 	CALL _strstr
0008ee 9730      	SBIW R30,0
0008ef f069      	BREQ _0xB9
                 ; 0000 02AE                 {
                 ; 0000 02AF                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
0008f0 01fe      	MOVW R30,R28
0008f1 9632      	ADIW R30,2
0008f2 93fa      	ST   -Y,R31
0008f3 93ea      	ST   -Y,R30
0008f4 e0e0      	LDI  R30,LOW(0)
0008f5 93ea      	ST   -Y,R30
0008f6 e4e6      	LDI  R30,LOW(70)
0008f7 e0f0      	LDI  R31,HIGH(70)
0008f8 93fa      	ST   -Y,R31
0008f9 93ea      	ST   -Y,R30
0008fa 940e 1754 	CALL _memset
                 ; 0000 02B0                     return 1;
0008fc e0e1      	LDI  R30,LOW(1)
                 ; 0000 02B1                 }
                 ; 0000 02B2         }
                 _0xB9:
                 ; 0000 02B3 }
                 _0xB2:
                 _0xB1:
                 _0x20A000D:
0008fd 8119      	LDD  R17,Y+1
0008fe 8108      	LDD  R16,Y+0
0008ff 96ef      	ADIW R28,63
000900 962a      	ADIW R28,10
000901 9508      	RET
                 
                 	.DSEG
                 _0xA4:
000a03           	.BYTE 0x21
                 ;
                 ;unsigned char _3gZipOpen(unsigned char _socketID,unsigned char _type,char *_remoteIP,unsigned int _remotePort)
                 ; 0000 02B6 {
                 
                 	.CSEG
                 __3gZipOpen:
                 ; 0000 02B7     char _3gRespond[70];
                 ; 0000 02B8     char temp=0x00, index=0;
                 ; 0000 02B9     memset(_3gRespond,0,sizeof(_3gRespond));
000902 97ef      	SBIW R28,63
000903 9727      	SBIW R28,7
000904 931a      	ST   -Y,R17
000905 930a      	ST   -Y,R16
                 ;	_socketID -> Y+77
                 ;	_type -> Y+76
                 ;	*_remoteIP -> Y+74
                 ;	_remotePort -> Y+72
                 ;	_3gRespond -> Y+2
                 ;	temp -> R17
                 ;	index -> R16
000906 e010      	LDI  R17,0
000907 e000      	LDI  R16,0
000908 01fe      	MOVW R30,R28
000909 9632      	ADIW R30,2
00090a 93fa      	ST   -Y,R31
00090b 93ea      	ST   -Y,R30
00090c e0e0      	LDI  R30,LOW(0)
00090d 93ea      	ST   -Y,R30
00090e e4e6      	LDI  R30,LOW(70)
00090f e0f0      	LDI  R31,HIGH(70)
000910 93fa      	ST   -Y,R31
000911 93ea      	ST   -Y,R30
000912 940e 1754 	CALL _memset
                 ; 0000 02BA     poutput=USART1;
000914 e0e1      	LDI  R30,LOW(1)
000915 93e0 146e 	STS  _poutput,R30
                 ; 0000 02BB     printf("AT+ZIPOPEN=%u,%u,%s,%u\r",_socketID,_type,_remoteIP,_remotePort); // send zipcall command
                +
000917 ebea     +LDI R30 , LOW ( 2 * _0x0 + ( 112 ) )
000918 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 112 ) )
                 	__POINTW1FN _0x0,112
000919 93fa      	ST   -Y,R31
00091a 93ea      	ST   -Y,R30
                +
00091b 01fe     +MOVW R30 , R28
00091c 5be1     +SUBI R30 , LOW ( - 79 )
00091d 4fff     +SBCI R31 , HIGH ( - 79 )
00091e 81e0     +LD R30 , Z
                 	__GETB1SX 79
00091f 27ff      	CLR  R31
000920 2766      	CLR  R22
000921 2777      	CLR  R23
000922 940e 1c2e 	CALL __PUTPARD1
                +
000924 01fe     +MOVW R30 , R28
000925 5aee     +SUBI R30 , LOW ( - 82 )
000926 4fff     +SBCI R31 , HIGH ( - 82 )
000927 81e0     +LD R30 , Z
                 	__GETB1SX 82
000928 27ff      	CLR  R31
000929 2766      	CLR  R22
00092a 2777      	CLR  R23
00092b 940e 1c2e 	CALL __PUTPARD1
                +
00092d 01fe     +MOVW R30 , R28
00092e 5aec     +SUBI R30 , LOW ( - 84 )
00092f 4fff     +SBCI R31 , HIGH ( - 84 )
000930 9001     +LD R0 , Z +
000931 81f0     +LD R31 , Z
000932 2de0     +MOV R30 , R0
                 	__GETW1SX 84
000933 2766      	CLR  R22
000934 2777      	CLR  R23
000935 940e 1c2e 	CALL __PUTPARD1
                +
000937 01fe     +MOVW R30 , R28
000938 5aea     +SUBI R30 , LOW ( - 86 )
000939 4fff     +SBCI R31 , HIGH ( - 86 )
00093a 9001     +LD R0 , Z +
00093b 81f0     +LD R31 , Z
00093c 2de0     +MOV R30 , R0
                 	__GETW1SX 86
00093d 2766      	CLR  R22
00093e 2777      	CLR  R23
00093f 940e 1c2e 	CALL __PUTPARD1
000941 e180      	LDI  R24,16
000942 940e 172d 	CALL _printf
000944 9662      	ADIW R28,18
                 ; 0000 02BC     //while (serialAvailable()<32); // wait until serial available or 2500 ms passed, IF command ATE1 activated
                 ; 0000 02BD     //for (index=0;index<32;index++) temp=getchar(); // get the same command string that was sent earlier, IF command ATE1 activated
                 ; 0000 02BE     temp=0x00; // reset temp var
000945 e010      	LDI  R17,LOW(0)
                 ; 0000 02BF     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
                 _0xBA:
000946 301a      	CPI  R17,10
000947 f021      	BREQ _0xBC
000948 940e 04b4 	CALL _getchar
00094a 2f1e      	MOV  R17,R30
00094b cffa      	RJMP _0xBA
                 _0xBC:
                 ; 0000 02C0 index=0;
00094c e000      	LDI  R16,LOW(0)
                 ; 0000 02C1     temp=getchar(); // read 1 character from serial
00094d 940e 04b4 	CALL _getchar
00094f 2f1e      	MOV  R17,R30
                 ; 0000 02C2     while (temp!=LF) // while the read character is not <LF>
                 _0xBD:
000950 301a      	CPI  R17,10
000951 f069      	BREQ _0xBF
                 ; 0000 02C3         {
                 ; 0000 02C4             _3gRespond[index]=temp; // put temp value to _3gRespond array
000952 2fe0      	MOV  R30,R16
000953 e0f0      	LDI  R31,0
000954 01de      	MOVW R26,R28
000955 9612      	ADIW R26,2
000956 0fea      	ADD  R30,R26
000957 1ffb      	ADC  R31,R27
000958 8310      	ST   Z,R17
                 ; 0000 02C5             index++; // increment index
000959 5f0f      	SUBI R16,-1
                 ; 0000 02C6             temp=getchar(); // read a character
00095a 940e 04b4 	CALL _getchar
00095c 2f1e      	MOV  R17,R30
                 ; 0000 02C7             if (index==69) break; // if index reach the last element of _3gRespond array
00095d 3405      	CPI  R16,69
00095e f789      	BRNE _0xBD
                 ; 0000 02C8         }
                 _0xBF:
                 ; 0000 02C9     if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
00095f 01fe      	MOVW R30,R28
000960 9632      	ADIW R30,2
000961 93fa      	ST   -Y,R31
000962 93ea      	ST   -Y,R30
                +
000963 e2e4     +LDI R30 , LOW ( _0xC2 + ( 0 ) )
000964 e0fa     +LDI R31 , HIGH ( _0xC2 + ( 0 ) )
                 	__POINTW1MN _0xC2,0
000965 93fa      	ST   -Y,R31
000966 93ea      	ST   -Y,R30
000967 940e 1797 	CALL _strstr
000969 9730      	SBIW R30,0
00096a f071      	BREQ _0xC1
                 ; 0000 02CA         {
                 ; 0000 02CB             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
00096b 01fe      	MOVW R30,R28
00096c 9632      	ADIW R30,2
00096d 93fa      	ST   -Y,R31
00096e 93ea      	ST   -Y,R30
00096f e0e0      	LDI  R30,LOW(0)
000970 93ea      	ST   -Y,R30
000971 e4e6      	LDI  R30,LOW(70)
000972 e0f0      	LDI  R31,HIGH(70)
000973 93fa      	ST   -Y,R31
000974 93ea      	ST   -Y,R30
000975 940e 1754 	CALL _memset
                 ; 0000 02CC             return 0;
000977 e0e0      	LDI  R30,LOW(0)
000978 c067      	RJMP _0x20A000C
                 ; 0000 02CD         }
                 ; 0000 02CE     else if (strstr(_3gRespond,"+ZIPSTAT: 1")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
                 _0xC1:
000979 01fe      	MOVW R30,R28
00097a 9632      	ADIW R30,2
00097b 93fa      	ST   -Y,R31
00097c 93ea      	ST   -Y,R30
                +
00097d e2ea     +LDI R30 , LOW ( _0xC2 + ( 6 ) )
00097e e0fa     +LDI R31 , HIGH ( _0xC2 + ( 6 ) )
                 	__POINTW1MN _0xC2,6
00097f 93fa      	ST   -Y,R31
000980 93ea      	ST   -Y,R30
000981 940e 1797 	CALL _strstr
000983 9730      	SBIW R30,0
000984 f411      	BRNE PC+3
000985 940c 09e0 	JMP _0xC4
                 ; 0000 02CF         {
                 ; 0000 02D0             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
000987 01fe      	MOVW R30,R28
000988 9632      	ADIW R30,2
000989 93fa      	ST   -Y,R31
00098a 93ea      	ST   -Y,R30
00098b e0e0      	LDI  R30,LOW(0)
00098c 93ea      	ST   -Y,R30
00098d e4e6      	LDI  R30,LOW(70)
00098e e0f0      	LDI  R31,HIGH(70)
00098f 93fa      	ST   -Y,R31
000990 93ea      	ST   -Y,R30
000991 940e 1754 	CALL _memset
                 ; 0000 02D1             temp=0x00; // reset temp var
000993 e010      	LDI  R17,LOW(0)
                 ; 0000 02D2             while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
                 _0xC5:
000994 301a      	CPI  R17,10
000995 f021      	BREQ _0xC7
000996 940e 04b4 	CALL _getchar
000998 2f1e      	MOV  R17,R30
000999 cffa      	RJMP _0xC5
                 _0xC7:
                 ; 0000 02D3 index=0;
00099a e000      	LDI  R16,LOW(0)
                 ; 0000 02D4             temp=getchar();
00099b 940e 04b4 	CALL _getchar
00099d 2f1e      	MOV  R17,R30
                 ; 0000 02D5             while (temp!=LF)
                 _0xC8:
00099e 301a      	CPI  R17,10
00099f f069      	BREQ _0xCA
                 ; 0000 02D6                 {
                 ; 0000 02D7                     _3gRespond[index]=temp; // put temp value to _3gRespond array
0009a0 2fe0      	MOV  R30,R16
0009a1 e0f0      	LDI  R31,0
0009a2 01de      	MOVW R26,R28
0009a3 9612      	ADIW R26,2
0009a4 0fea      	ADD  R30,R26
0009a5 1ffb      	ADC  R31,R27
0009a6 8310      	ST   Z,R17
                 ; 0000 02D8                     index++; // increment index
0009a7 5f0f      	SUBI R16,-1
                 ; 0000 02D9                     temp=getchar(); // read a character
0009a8 940e 04b4 	CALL _getchar
0009aa 2f1e      	MOV  R17,R30
                 ; 0000 02DA                     if (index==69) break; // if index reach the last element of _3gRespond array
0009ab 3405      	CPI  R16,69
0009ac f789      	BRNE _0xC8
                 ; 0000 02DB                 }
                 _0xCA:
                 ; 0000 02DC             if (strstr(_3gRespond,"OK")!=NULL) // if the  _3gRespond array contains "OK",
0009ad 01fe      	MOVW R30,R28
0009ae 9632      	ADIW R30,2
0009af 93fa      	ST   -Y,R31
0009b0 93ea      	ST   -Y,R30
                +
0009b1 e3e6     +LDI R30 , LOW ( _0xC2 + ( 18 ) )
0009b2 e0fa     +LDI R31 , HIGH ( _0xC2 + ( 18 ) )
                 	__POINTW1MN _0xC2,18
0009b3 93fa      	ST   -Y,R31
0009b4 93ea      	ST   -Y,R30
0009b5 940e 1797 	CALL _strstr
0009b7 9730      	SBIW R30,0
0009b8 f071      	BREQ _0xCC
                 ; 0000 02DD                 {
                 ; 0000 02DE                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
0009b9 01fe      	MOVW R30,R28
0009ba 9632      	ADIW R30,2
0009bb 93fa      	ST   -Y,R31
0009bc 93ea      	ST   -Y,R30
0009bd e0e0      	LDI  R30,LOW(0)
0009be 93ea      	ST   -Y,R30
0009bf e4e6      	LDI  R30,LOW(70)
0009c0 e0f0      	LDI  R31,HIGH(70)
0009c1 93fa      	ST   -Y,R31
0009c2 93ea      	ST   -Y,R30
0009c3 940e 1754 	CALL _memset
                 ; 0000 02DF                     return 1;
0009c5 e0e1      	LDI  R30,LOW(1)
0009c6 c019      	RJMP _0x20A000C
                 ; 0000 02E0                 }
                 ; 0000 02E1             else if (strstr(_3gRespond,"OK")==NULL)
                 _0xCC:
0009c7 01fe      	MOVW R30,R28
0009c8 9632      	ADIW R30,2
0009c9 93fa      	ST   -Y,R31
0009ca 93ea      	ST   -Y,R30
                +
0009cb e3e9     +LDI R30 , LOW ( _0xC2 + ( 21 ) )
0009cc e0fa     +LDI R31 , HIGH ( _0xC2 + ( 21 ) )
                 	__POINTW1MN _0xC2,21
0009cd 93fa      	ST   -Y,R31
0009ce 93ea      	ST   -Y,R30
0009cf 940e 1797 	CALL _strstr
0009d1 9730      	SBIW R30,0
0009d2 f469      	BRNE _0xCE
                 ; 0000 02E2                 {
                 ; 0000 02E3                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
0009d3 01fe      	MOVW R30,R28
0009d4 9632      	ADIW R30,2
0009d5 93fa      	ST   -Y,R31
0009d6 93ea      	ST   -Y,R30
0009d7 e0e0      	LDI  R30,LOW(0)
0009d8 93ea      	ST   -Y,R30
0009d9 e4e6      	LDI  R30,LOW(70)
0009da e0f0      	LDI  R31,HIGH(70)
0009db 93fa      	ST   -Y,R31
0009dc 93ea      	ST   -Y,R30
0009dd 940e 1754 	CALL _memset
                 ; 0000 02E4                     return 0;
0009df e0e0      	LDI  R30,LOW(0)
                 ; 0000 02E5                 }
                 ; 0000 02E6         }
                 _0xCE:
                 ; 0000 02E7 }
                 _0xC4:
                 _0x20A000C:
0009e0 8119      	LDD  R17,Y+1
0009e1 8108      	LDD  R16,Y+0
0009e2 96ef      	ADIW R28,63
0009e3 962f      	ADIW R28,15
0009e4 9508      	RET
                 
                 	.DSEG
                 _0xC2:
000a24           	.BYTE 0x18
                 ;
                 ;unsigned char _3gZipSend(unsigned char _socketID,char *_data)
                 ; 0000 02EA {
                 
                 	.CSEG
                 __3gZipSend:
                 ; 0000 02EB     char _3gRespond[70];
                 ; 0000 02EC     char temp=0x00, index=0;
                 ; 0000 02ED     memset(_3gRespond,0,sizeof(_3gRespond));
0009e5 97ef      	SBIW R28,63
0009e6 9727      	SBIW R28,7
0009e7 931a      	ST   -Y,R17
0009e8 930a      	ST   -Y,R16
                 ;	_socketID -> Y+74
                 ;	*_data -> Y+72
                 ;	_3gRespond -> Y+2
                 ;	temp -> R17
                 ;	index -> R16
0009e9 e010      	LDI  R17,0
0009ea e000      	LDI  R16,0
0009eb 01fe      	MOVW R30,R28
0009ec 9632      	ADIW R30,2
0009ed 93fa      	ST   -Y,R31
0009ee 93ea      	ST   -Y,R30
0009ef e0e0      	LDI  R30,LOW(0)
0009f0 93ea      	ST   -Y,R30
0009f1 e4e6      	LDI  R30,LOW(70)
0009f2 e0f0      	LDI  R31,HIGH(70)
0009f3 93fa      	ST   -Y,R31
0009f4 93ea      	ST   -Y,R30
0009f5 940e 1754 	CALL _memset
                 ; 0000 02EE     poutput=USART1;
0009f7 e0e1      	LDI  R30,LOW(1)
0009f8 93e0 146e 	STS  _poutput,R30
                 ; 0000 02EF     printf("AT+ZIPSEND=%u,%s\r",_socketID,_data); // send zipcall command
                +
0009fa edee     +LDI R30 , LOW ( 2 * _0x0 + ( 148 ) )
0009fb e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 148 ) )
                 	__POINTW1FN _0x0,148
0009fc 93fa      	ST   -Y,R31
0009fd 93ea      	ST   -Y,R30
                +
0009fe 01fe     +MOVW R30 , R28
0009ff 5be4     +SUBI R30 , LOW ( - 76 )
000a00 4fff     +SBCI R31 , HIGH ( - 76 )
000a01 81e0     +LD R30 , Z
                 	__GETB1SX 76
000a02 27ff      	CLR  R31
000a03 2766      	CLR  R22
000a04 2777      	CLR  R23
000a05 940e 1c2e 	CALL __PUTPARD1
                +
000a07 01fe     +MOVW R30 , R28
000a08 5be2     +SUBI R30 , LOW ( - 78 )
000a09 4fff     +SBCI R31 , HIGH ( - 78 )
000a0a 9001     +LD R0 , Z +
000a0b 81f0     +LD R31 , Z
000a0c 2de0     +MOV R30 , R0
                 	__GETW1SX 78
000a0d 2766      	CLR  R22
000a0e 2777      	CLR  R23
000a0f 940e 1c2e 	CALL __PUTPARD1
000a11 e088      	LDI  R24,8
000a12 940e 172d 	CALL _printf
000a14 962a      	ADIW R28,10
                 ; 0000 02F0     //while (serialAvailable()<30); // wait until serial available or 2500 ms passed, IF command ATE1 activated
                 ; 0000 02F1     //for (index=0;index<(14+strlen(_data));index++) temp=getchar(); // get the same command string that was sent earliear, IF command ATE1 activated
                 ; 0000 02F2     temp=0x00; // reset temp var
000a15 e010      	LDI  R17,LOW(0)
                 ; 0000 02F3     while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
                 _0xCF:
000a16 301a      	CPI  R17,10
000a17 f021      	BREQ _0xD1
000a18 940e 04b4 	CALL _getchar
000a1a 2f1e      	MOV  R17,R30
000a1b cffa      	RJMP _0xCF
                 _0xD1:
                 ; 0000 02F4 index=0;
000a1c e000      	LDI  R16,LOW(0)
                 ; 0000 02F5     temp=getchar(); // read 1 character from serial
000a1d 940e 04b4 	CALL _getchar
000a1f 2f1e      	MOV  R17,R30
                 ; 0000 02F6     while (temp!=LF) // while the read character is not <LF>
                 _0xD2:
000a20 301a      	CPI  R17,10
000a21 f069      	BREQ _0xD4
                 ; 0000 02F7         {
                 ; 0000 02F8             _3gRespond[index]=temp; // put temp value to _3gRespond array
000a22 2fe0      	MOV  R30,R16
000a23 e0f0      	LDI  R31,0
000a24 01de      	MOVW R26,R28
000a25 9612      	ADIW R26,2
000a26 0fea      	ADD  R30,R26
000a27 1ffb      	ADC  R31,R27
000a28 8310      	ST   Z,R17
                 ; 0000 02F9             index++; // increment index
000a29 5f0f      	SUBI R16,-1
                 ; 0000 02FA             temp=getchar(); // read a character
000a2a 940e 04b4 	CALL _getchar
000a2c 2f1e      	MOV  R17,R30
                 ; 0000 02FB             if (index==69) break; // if index reach the last element of _3gRespond array
000a2d 3405      	CPI  R16,69
000a2e f789      	BRNE _0xD2
                 ; 0000 02FC         }
                 _0xD4:
                 ; 0000 02FD     if (strstr(_3gRespond,"ERROR")!=NULL) // if the  _3gRespond array contains "ERROR",
000a2f 01fe      	MOVW R30,R28
000a30 9632      	ADIW R30,2
000a31 93fa      	ST   -Y,R31
000a32 93ea      	ST   -Y,R30
                +
000a33 e3ec     +LDI R30 , LOW ( _0xD7 + ( 0 ) )
000a34 e0fa     +LDI R31 , HIGH ( _0xD7 + ( 0 ) )
                 	__POINTW1MN _0xD7,0
000a35 93fa      	ST   -Y,R31
000a36 93ea      	ST   -Y,R30
000a37 940e 1797 	CALL _strstr
000a39 9730      	SBIW R30,0
000a3a f071      	BREQ _0xD6
                 ; 0000 02FE         {
                 ; 0000 02FF             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
000a3b 01fe      	MOVW R30,R28
000a3c 9632      	ADIW R30,2
000a3d 93fa      	ST   -Y,R31
000a3e 93ea      	ST   -Y,R30
000a3f e0e0      	LDI  R30,LOW(0)
000a40 93ea      	ST   -Y,R30
000a41 e4e6      	LDI  R30,LOW(70)
000a42 e0f0      	LDI  R31,HIGH(70)
000a43 93fa      	ST   -Y,R31
000a44 93ea      	ST   -Y,R30
000a45 940e 1754 	CALL _memset
                 ; 0000 0300             return 0;
000a47 e0e0      	LDI  R30,LOW(0)
000a48 c067      	RJMP _0x20A000B
                 ; 0000 0301         }
                 ; 0000 0302     else if (strstr(_3gRespond,"OK")!=NULL) // else if _3gRespond array contains "+ZIPCALL: 1",
                 _0xD6:
000a49 01fe      	MOVW R30,R28
000a4a 9632      	ADIW R30,2
000a4b 93fa      	ST   -Y,R31
000a4c 93ea      	ST   -Y,R30
                +
000a4d e4e2     +LDI R30 , LOW ( _0xD7 + ( 6 ) )
000a4e e0fa     +LDI R31 , HIGH ( _0xD7 + ( 6 ) )
                 	__POINTW1MN _0xD7,6
000a4f 93fa      	ST   -Y,R31
000a50 93ea      	ST   -Y,R30
000a51 940e 1797 	CALL _strstr
000a53 9730      	SBIW R30,0
000a54 f411      	BRNE PC+3
000a55 940c 0ab0 	JMP _0xD9
                 ; 0000 0303         {
                 ; 0000 0304             memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
000a57 01fe      	MOVW R30,R28
000a58 9632      	ADIW R30,2
000a59 93fa      	ST   -Y,R31
000a5a 93ea      	ST   -Y,R30
000a5b e0e0      	LDI  R30,LOW(0)
000a5c 93ea      	ST   -Y,R30
000a5d e4e6      	LDI  R30,LOW(70)
000a5e e0f0      	LDI  R31,HIGH(70)
000a5f 93fa      	ST   -Y,R31
000a60 93ea      	ST   -Y,R30
000a61 940e 1754 	CALL _memset
                 ; 0000 0305             temp=0x00; // reset temp var
000a63 e010      	LDI  R17,LOW(0)
                 ; 0000 0306             while (temp!=LF) temp=getchar(); // read the next character from serial until we get <LF>
                 _0xDA:
000a64 301a      	CPI  R17,10
000a65 f021      	BREQ _0xDC
000a66 940e 04b4 	CALL _getchar
000a68 2f1e      	MOV  R17,R30
000a69 cffa      	RJMP _0xDA
                 _0xDC:
                 ; 0000 0307 index=0;
000a6a e000      	LDI  R16,LOW(0)
                 ; 0000 0308             temp=getchar();
000a6b 940e 04b4 	CALL _getchar
000a6d 2f1e      	MOV  R17,R30
                 ; 0000 0309             while (temp!=LF)
                 _0xDD:
000a6e 301a      	CPI  R17,10
000a6f f069      	BREQ _0xDF
                 ; 0000 030A                 {
                 ; 0000 030B                     _3gRespond[index]=temp; // put temp value to _3gRespond array
000a70 2fe0      	MOV  R30,R16
000a71 e0f0      	LDI  R31,0
000a72 01de      	MOVW R26,R28
000a73 9612      	ADIW R26,2
000a74 0fea      	ADD  R30,R26
000a75 1ffb      	ADC  R31,R27
000a76 8310      	ST   Z,R17
                 ; 0000 030C                     index++; // increment index
000a77 5f0f      	SUBI R16,-1
                 ; 0000 030D                     temp=getchar(); // read a character
000a78 940e 04b4 	CALL _getchar
000a7a 2f1e      	MOV  R17,R30
                 ; 0000 030E                     if (index==69) break; // if index reach the last element of _3gRespond array
000a7b 3405      	CPI  R16,69
000a7c f789      	BRNE _0xDD
                 ; 0000 030F                 }
                 _0xDF:
                 ; 0000 0310             if (strstr(_3gRespond,"+ZIPSEND:")!=NULL) // if the  _3gRespond array contains "OK",
000a7d 01fe      	MOVW R30,R28
000a7e 9632      	ADIW R30,2
000a7f 93fa      	ST   -Y,R31
000a80 93ea      	ST   -Y,R30
                +
000a81 e4e5     +LDI R30 , LOW ( _0xD7 + ( 9 ) )
000a82 e0fa     +LDI R31 , HIGH ( _0xD7 + ( 9 ) )
                 	__POINTW1MN _0xD7,9
000a83 93fa      	ST   -Y,R31
000a84 93ea      	ST   -Y,R30
000a85 940e 1797 	CALL _strstr
000a87 9730      	SBIW R30,0
000a88 f071      	BREQ _0xE1
                 ; 0000 0311                 {
                 ; 0000 0312                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
000a89 01fe      	MOVW R30,R28
000a8a 9632      	ADIW R30,2
000a8b 93fa      	ST   -Y,R31
000a8c 93ea      	ST   -Y,R30
000a8d e0e0      	LDI  R30,LOW(0)
000a8e 93ea      	ST   -Y,R30
000a8f e4e6      	LDI  R30,LOW(70)
000a90 e0f0      	LDI  R31,HIGH(70)
000a91 93fa      	ST   -Y,R31
000a92 93ea      	ST   -Y,R30
000a93 940e 1754 	CALL _memset
                 ; 0000 0313                     return 1;
000a95 e0e1      	LDI  R30,LOW(1)
000a96 c019      	RJMP _0x20A000B
                 ; 0000 0314                 }
                 ; 0000 0315             else if (strstr(_3gRespond,"+ZIPSEND:")==NULL)
                 _0xE1:
000a97 01fe      	MOVW R30,R28
000a98 9632      	ADIW R30,2
000a99 93fa      	ST   -Y,R31
000a9a 93ea      	ST   -Y,R30
                +
000a9b e4ef     +LDI R30 , LOW ( _0xD7 + ( 19 ) )
000a9c e0fa     +LDI R31 , HIGH ( _0xD7 + ( 19 ) )
                 	__POINTW1MN _0xD7,19
000a9d 93fa      	ST   -Y,R31
000a9e 93ea      	ST   -Y,R30
000a9f 940e 1797 	CALL _strstr
000aa1 9730      	SBIW R30,0
000aa2 f469      	BRNE _0xE3
                 ; 0000 0316                 {
                 ; 0000 0317                     memset(_3gRespond,0,sizeof(_3gRespond)); // reset the array
000aa3 01fe      	MOVW R30,R28
000aa4 9632      	ADIW R30,2
000aa5 93fa      	ST   -Y,R31
000aa6 93ea      	ST   -Y,R30
000aa7 e0e0      	LDI  R30,LOW(0)
000aa8 93ea      	ST   -Y,R30
000aa9 e4e6      	LDI  R30,LOW(70)
000aaa e0f0      	LDI  R31,HIGH(70)
000aab 93fa      	ST   -Y,R31
000aac 93ea      	ST   -Y,R30
000aad 940e 1754 	CALL _memset
                 ; 0000 0318                     return 0;
000aaf e0e0      	LDI  R30,LOW(0)
                 ; 0000 0319                 }
                 ; 0000 031A         }
                 _0xE3:
                 ; 0000 031B }
                 _0xD9:
                 _0x20A000B:
000ab0 8119      	LDD  R17,Y+1
000ab1 8108      	LDD  R16,Y+0
000ab2 96ef      	ADIW R28,63
000ab3 962c      	ADIW R28,12
000ab4 9508      	RET
                 
                 	.DSEG
                 _0xD7:
000a3c           	.BYTE 0x1D
                 ;
                 ;int hex2int(char c)
                 ; 0000 031E {
                 
                 	.CSEG
                 _hex2int:
                 ; 0000 031F     int first=c/16-3;
                 ; 0000 0320     int second=c%16;
                 ; 0000 0321     int result=first*10+second;
                 ; 0000 0322     if (result>9) result--;
000ab5 940e 1c4f 	CALL __SAVELOCR6
                 ;	c -> Y+6
                 ;	first -> R16,R17
                 ;	second -> R18,R19
                 ;	result -> R20,R21
000ab7 81ae      	LDD  R26,Y+6
000ab8 e0b0      	LDI  R27,0
000ab9 e1e0      	LDI  R30,LOW(16)
000aba e0f0      	LDI  R31,HIGH(16)
000abb 940e 1ba9 	CALL __DIVW21
000abd 9733      	SBIW R30,3
000abe 018f      	MOVW R16,R30
000abf 81ae      	LDD  R26,Y+6
000ac0 27bb      	CLR  R27
000ac1 e1e0      	LDI  R30,LOW(16)
000ac2 e0f0      	LDI  R31,HIGH(16)
000ac3 940e 1bdf 	CALL __MODW21
000ac5 019f      	MOVW R18,R30
000ac6 01f8      	MOVW R30,R16
000ac7 e0aa      	LDI  R26,LOW(10)
000ac8 e0b0      	LDI  R27,HIGH(10)
000ac9 940e 1b7e 	CALL __MULW12
000acb 0fe2      	ADD  R30,R18
000acc 1ff3      	ADC  R31,R19
000acd 01af      	MOVW R20,R30
                +
000ace 304a     +CPI R20 , LOW ( 10 )
000acf e0e0     +LDI R30 , HIGH ( 10 )
000ad0 075e     +CPC R21 , R30
                 	__CPWRN 20,21,10
000ad1 f014      	BRLT _0xE4
                +
000ad2 5041     +SUBI R20 , LOW ( 1 )
000ad3 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
                 ; 0000 0323     return result;
                 _0xE4:
000ad4 01fa      	MOVW R30,R20
000ad5 940e 1c56 	CALL __LOADLOCR6
000ad7 9627      	ADIW R28,7
000ad8 9508      	RET
                 ; 0000 0324 }
                 ;
                 ;int hex2ascii(char c,char d)
                 ; 0000 0327 {
                 _hex2ascii:
                 ; 0000 0328     int high=hex2int(c)*16;
                 ; 0000 0329     int low=hex2int(d);
                 ; 0000 032A     return high+low;
000ad9 940e 1c51 	CALL __SAVELOCR4
                 ;	c -> Y+5
                 ;	d -> Y+4
                 ;	high -> R16,R17
                 ;	low -> R18,R19
000adb 81ed      	LDD  R30,Y+5
000adc 93ea      	ST   -Y,R30
000add dfd7      	RCALL _hex2int
000ade 940e 1b5d 	CALL __LSLW4
000ae0 018f      	MOVW R16,R30
000ae1 81ec      	LDD  R30,Y+4
000ae2 93ea      	ST   -Y,R30
000ae3 dfd1      	RCALL _hex2int
000ae4 019f      	MOVW R18,R30
000ae5 01f9      	MOVW R30,R18
000ae6 0fe0      	ADD  R30,R16
000ae7 1ff1      	ADC  R31,R17
000ae8 940e 1c58 	CALL __LOADLOCR4
000aea 9626      	ADIW R28,6
000aeb 9508      	RET
                 ; 0000 032B }
                 ;
                 ;unsigned char _3gZipReceive(char *_data)
                 ; 0000 032E {
                 __3gZipReceive:
                 ; 0000 032F     unsigned char index=0,index1=0;
                 ; 0000 0330     char _dataLength=0,buf=0;
                 ; 0000 0331     char temp;
                 ; 0000 0332     char _3gRespond[100],_dataLengthStr[3],*_3gRespond1;
                 ; 0000 0333     memset(_3gRespond,0,sizeof(_3gRespond));
000aec 97ef      	SBIW R28,63
000aed 97aa      	SBIW R28,42
000aee 940e 1c4f 	CALL __SAVELOCR6
                 ;	*_data -> Y+111
                 ;	index -> R17
                 ;	index1 -> R16
                 ;	_dataLength -> R19
                 ;	buf -> R18
                 ;	temp -> R21
                 ;	_3gRespond -> Y+11
                 ;	_dataLengthStr -> Y+8
                 ;	*_3gRespond1 -> Y+6
000af0 e010      	LDI  R17,0
000af1 e000      	LDI  R16,0
000af2 e030      	LDI  R19,0
000af3 e020      	LDI  R18,0
000af4 01fe      	MOVW R30,R28
000af5 963b      	ADIW R30,11
000af6 93fa      	ST   -Y,R31
000af7 93ea      	ST   -Y,R30
000af8 e0e0      	LDI  R30,LOW(0)
000af9 93ea      	ST   -Y,R30
000afa e6e4      	LDI  R30,LOW(100)
000afb e0f0      	LDI  R31,HIGH(100)
000afc 93fa      	ST   -Y,R31
000afd 93ea      	ST   -Y,R30
000afe 940e 1754 	CALL _memset
                 ; 0000 0334     memset(_dataLengthStr,0,sizeof(_dataLengthStr));
000b00 01fe      	MOVW R30,R28
000b01 9638      	ADIW R30,8
000b02 93fa      	ST   -Y,R31
000b03 93ea      	ST   -Y,R30
000b04 e0e0      	LDI  R30,LOW(0)
000b05 93ea      	ST   -Y,R30
000b06 e0e3      	LDI  R30,LOW(3)
000b07 e0f0      	LDI  R31,HIGH(3)
000b08 93fa      	ST   -Y,R31
000b09 93ea      	ST   -Y,R30
000b0a 940e 1754 	CALL _memset
                 ; 0000 0335     poutput=USART1;
000b0c e0e1      	LDI  R30,LOW(1)
000b0d 93e0 146e 	STS  _poutput,R30
                 ; 0000 0336     if (serialAvailable())
000b0f da5b      	RCALL _serialAvailable
000b10 9730      	SBIW R30,0
000b11 f411      	BRNE PC+3
000b12 940c 0bb0 	JMP _0xE5
                 ; 0000 0337         {
                 ; 0000 0338             temp=getchar();
000b14 940e 04b4 	CALL _getchar
000b16 2f5e      	MOV  R21,R30
                 ; 0000 0339             if (temp=='+')
000b17 325b      	CPI  R21,43
000b18 f011      	BREQ PC+3
000b19 940c 0bae 	JMP _0xE6
                 ; 0000 033A                 {
                 ; 0000 033B                     memset(_3gRespond,0,sizeof(_3gRespond));
000b1b 01fe      	MOVW R30,R28
000b1c 963b      	ADIW R30,11
000b1d 93fa      	ST   -Y,R31
000b1e 93ea      	ST   -Y,R30
000b1f e0e0      	LDI  R30,LOW(0)
000b20 93ea      	ST   -Y,R30
000b21 e6e4      	LDI  R30,LOW(100)
000b22 e0f0      	LDI  R31,HIGH(100)
000b23 93fa      	ST   -Y,R31
000b24 93ea      	ST   -Y,R30
000b25 940e 1754 	CALL _memset
                 ; 0000 033C                     gets(_3gRespond,sizeof(_3gRespond)-1);
000b27 01fe      	MOVW R30,R28
000b28 963b      	ADIW R30,11
000b29 93fa      	ST   -Y,R31
000b2a 93ea      	ST   -Y,R30
000b2b e6e3      	LDI  R30,LOW(99)
000b2c e0f0      	LDI  R31,HIGH(99)
000b2d 93fa      	ST   -Y,R31
000b2e 93ea      	ST   -Y,R30
000b2f 940e 1208 	CALL _gets
                 ; 0000 033D                     if ((strstr(_3gRespond,"ZIPRECV:")!=NULL)&&(strstr(_3gRespond,",02")!=NULL))
000b31 01fe      	MOVW R30,R28
000b32 963b      	ADIW R30,11
000b33 93fa      	ST   -Y,R31
000b34 93ea      	ST   -Y,R30
                +
000b35 e5e9     +LDI R30 , LOW ( _0xE8 + ( 0 ) )
000b36 e0fa     +LDI R31 , HIGH ( _0xE8 + ( 0 ) )
                 	__POINTW1MN _0xE8,0
000b37 93fa      	ST   -Y,R31
000b38 93ea      	ST   -Y,R30
000b39 940e 1797 	CALL _strstr
000b3b 9730      	SBIW R30,0
000b3c f061      	BREQ _0xE9
000b3d 01fe      	MOVW R30,R28
000b3e 963b      	ADIW R30,11
000b3f 93fa      	ST   -Y,R31
000b40 93ea      	ST   -Y,R30
                +
000b41 e6e2     +LDI R30 , LOW ( _0xE8 + ( 9 ) )
000b42 e0fa     +LDI R31 , HIGH ( _0xE8 + ( 9 ) )
                 	__POINTW1MN _0xE8,9
000b43 93fa      	ST   -Y,R31
000b44 93ea      	ST   -Y,R30
000b45 940e 1797 	CALL _strstr
000b47 9730      	SBIW R30,0
000b48 f409      	BRNE _0xEA
                 _0xE9:
000b49 c062      	RJMP _0xE7
                 _0xEA:
                 ; 0000 033E                         {
                 ; 0000 033F                             _3gRespond1=strtok(_3gRespond,",");
000b4a 01fe      	MOVW R30,R28
000b4b 963b      	ADIW R30,11
000b4c 93fa      	ST   -Y,R31
000b4d 93ea      	ST   -Y,R30
                +
000b4e e0e7     +LDI R30 , LOW ( 2 * _0x0 + ( 189 ) )
000b4f e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 189 ) )
                 	__POINTW1FN _0x0,189
000b50 93fa      	ST   -Y,R31
000b51 93ea      	ST   -Y,R30
000b52 940e 17bf 	CALL _strtok
000b54 83ee      	STD  Y+6,R30
000b55 83ff      	STD  Y+6+1,R31
                 ; 0000 0340                             _3gRespond1=strtok(NULL,",");
000b56 e0e0      	LDI  R30,LOW(0)
000b57 e0f0      	LDI  R31,HIGH(0)
000b58 93fa      	ST   -Y,R31
000b59 93ea      	ST   -Y,R30
                +
000b5a e0e7     +LDI R30 , LOW ( 2 * _0x0 + ( 189 ) )
000b5b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 189 ) )
                 	__POINTW1FN _0x0,189
000b5c 93fa      	ST   -Y,R31
000b5d 93ea      	ST   -Y,R30
000b5e 940e 17bf 	CALL _strtok
000b60 83ee      	STD  Y+6,R30
000b61 83ff      	STD  Y+6+1,R31
                 ; 0000 0341                             _3gRespond1=strtok(NULL,",");
000b62 e0e0      	LDI  R30,LOW(0)
000b63 e0f0      	LDI  R31,HIGH(0)
000b64 93fa      	ST   -Y,R31
000b65 93ea      	ST   -Y,R30
                +
000b66 e0e7     +LDI R30 , LOW ( 2 * _0x0 + ( 189 ) )
000b67 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 189 ) )
                 	__POINTW1FN _0x0,189
000b68 93fa      	ST   -Y,R31
000b69 93ea      	ST   -Y,R30
000b6a 940e 17bf 	CALL _strtok
000b6c 83ee      	STD  Y+6,R30
000b6d 83ff      	STD  Y+6+1,R31
                 ; 0000 0342                             _dataLength=strlen(_3gRespond1);
000b6e 93fa      	ST   -Y,R31
000b6f 93ea      	ST   -Y,R30
000b70 940e 176d 	CALL _strlen
000b72 2f3e      	MOV  R19,R30
                 ; 0000 0343                             for (index=0;index<_dataLength;index++)
000b73 e010      	LDI  R17,LOW(0)
                 _0xEC:
000b74 1713      	CP   R17,R19
000b75 f550      	BRSH _0xED
                 ; 0000 0344                                 {
                 ; 0000 0345                                     if ((index%2)!=0)
000b76 2fa1      	MOV  R26,R17
000b77 27bb      	CLR  R27
000b78 e0e2      	LDI  R30,LOW(2)
000b79 e0f0      	LDI  R31,HIGH(2)
000b7a 940e 1bdf 	CALL __MODW21
000b7c 9730      	SBIW R30,0
000b7d f0d1      	BREQ _0xEE
                 ; 0000 0346                                         {
                 ; 0000 0347                                             _data[index1]=hex2ascii(buf,_3gRespond1[index]);
000b7e 2fe0      	MOV  R30,R16
                +
000b7f 01de     +MOVW R26 , R28
000b80 59a1     +SUBI R26 , LOW ( - 111 )
000b81 4fbf     +SBCI R27 , HIGH ( - 111 )
000b82 900d     +LD R0 , X +
000b83 91bc     +LD R27 , X
000b84 2da0     +MOV R26 , R0
                 	__GETW2SX 111
000b85 e0f0      	LDI  R31,0
000b86 0fea      	ADD  R30,R26
000b87 1ffb      	ADC  R31,R27
000b88 93ff      	PUSH R31
000b89 93ef      	PUSH R30
000b8a 932a      	ST   -Y,R18
000b8b 81af      	LDD  R26,Y+7
000b8c 85b8      	LDD  R27,Y+7+1
000b8d 27ee      	CLR  R30
000b8e 0fa1      	ADD  R26,R17
000b8f 1fbe      	ADC  R27,R30
000b90 91ec      	LD   R30,X
000b91 93ea      	ST   -Y,R30
000b92 df46      	RCALL _hex2ascii
000b93 91af      	POP  R26
000b94 91bf      	POP  R27
000b95 93ec      	ST   X,R30
                 ; 0000 0348                                             index1++;
000b96 5f0f      	SUBI R16,-1
                 ; 0000 0349                                         }
                 ; 0000 034A                                     else buf=_3gRespond1[index];
000b97 c006      	RJMP _0xEF
                 _0xEE:
000b98 81ae      	LDD  R26,Y+6
000b99 81bf      	LDD  R27,Y+6+1
000b9a 27ee      	CLR  R30
000b9b 0fa1      	ADD  R26,R17
000b9c 1fbe      	ADC  R27,R30
000b9d 912c      	LD   R18,X
                 ; 0000 034B                                 }
                 _0xEF:
000b9e 5f1f      	SUBI R17,-1
000b9f cfd4      	RJMP _0xEC
                 _0xED:
                 ; 0000 034C                             _data[index1]=0;
                +
000ba0 01de     +MOVW R26 , R28
000ba1 59a1     +SUBI R26 , LOW ( - 111 )
000ba2 4fbf     +SBCI R27 , HIGH ( - 111 )
000ba3 900d     +LD R0 , X +
000ba4 91bc     +LD R27 , X
000ba5 2da0     +MOV R26 , R0
                 	__GETW2SX 111
000ba6 27ee      	CLR  R30
000ba7 0fa0      	ADD  R26,R16
000ba8 1fbe      	ADC  R27,R30
000ba9 93ec      	ST   X,R30
                 ; 0000 034D                             return 1;
000baa e0e1      	LDI  R30,LOW(1)
000bab c005      	RJMP _0x20A000A
                 ; 0000 034E                         }
                 ; 0000 034F                     else return 0;
                 _0xE7:
000bac e0e0      	LDI  R30,LOW(0)
000bad c003      	RJMP _0x20A000A
                 ; 0000 0350                 }
                 ; 0000 0351             else return 0;
                 _0xE6:
000bae e0e0      	LDI  R30,LOW(0)
000baf c001      	RJMP _0x20A000A
                 ; 0000 0352         }
                 ; 0000 0353     else return 0;
                 _0xE5:
000bb0 e0e0      	LDI  R30,LOW(0)
                 ; 0000 0354 }
                 _0x20A000A:
000bb1 940e 1c56 	CALL __LOADLOCR6
000bb3 96ef      	ADIW R28,63
000bb4 96e2      	ADIW R28,50
000bb5 9508      	RET
                 
                 	.DSEG
                 _0xE8:
000a59           	.BYTE 0xD
                 ;
                 ;void getRequestFromServerAndRespond(void)  // no prob
                 ; 0000 0357 {
                 
                 	.CSEG
                 _getRequestFromServerAndRespond:
                 ; 0000 0358     char request[20],_devid[3],_coordresp[40],_coordResponse[80];
                 ; 0000 0359     unsigned char index=0,indic1=0;
                 ; 0000 035A     int _devID;
                 ; 0000 035B     memset(request,0,sizeof(request));
000bb6 97ef      	SBIW R28,63
000bb7 97ef      	SBIW R28,63
000bb8 9761      	SBIW R28,17
000bb9 940e 1c51 	CALL __SAVELOCR4
                 ;	request -> Y+127
                 ;	_devid -> Y+124
                 ;	_coordresp -> Y+84
                 ;	_coordResponse -> Y+4
                 ;	index -> R17
                 ;	indic1 -> R16
                 ;	_devID -> R18,R19
000bbb e010      	LDI  R17,0
000bbc e000      	LDI  R16,0
000bbd 01fe      	MOVW R30,R28
000bbe 58e1      	SUBI R30,LOW(-(127))
000bbf 4fff      	SBCI R31,HIGH(-(127))
000bc0 93fa      	ST   -Y,R31
000bc1 93ea      	ST   -Y,R30
000bc2 e0e0      	LDI  R30,LOW(0)
000bc3 93ea      	ST   -Y,R30
000bc4 e1e4      	LDI  R30,LOW(20)
000bc5 e0f0      	LDI  R31,HIGH(20)
000bc6 93fa      	ST   -Y,R31
000bc7 93ea      	ST   -Y,R30
000bc8 940e 1754 	CALL _memset
                 ; 0000 035C     memset(_devid,0,sizeof(_devid));
000bca 01fe      	MOVW R30,R28
000bcb 58e4      	SUBI R30,LOW(-(124))
000bcc 4fff      	SBCI R31,HIGH(-(124))
000bcd 93fa      	ST   -Y,R31
000bce 93ea      	ST   -Y,R30
000bcf e0e0      	LDI  R30,LOW(0)
000bd0 93ea      	ST   -Y,R30
000bd1 e0e3      	LDI  R30,LOW(3)
000bd2 e0f0      	LDI  R31,HIGH(3)
000bd3 93fa      	ST   -Y,R31
000bd4 93ea      	ST   -Y,R30
000bd5 940e 1754 	CALL _memset
                 ; 0000 035D     memset(_coordresp,0,sizeof(_coordresp));
000bd7 01fe      	MOVW R30,R28
000bd8 5aec      	SUBI R30,LOW(-(84))
000bd9 4fff      	SBCI R31,HIGH(-(84))
000bda 93fa      	ST   -Y,R31
000bdb 93ea      	ST   -Y,R30
000bdc e0e0      	LDI  R30,LOW(0)
000bdd 93ea      	ST   -Y,R30
000bde e2e8      	LDI  R30,LOW(40)
000bdf e0f0      	LDI  R31,HIGH(40)
000be0 93fa      	ST   -Y,R31
000be1 93ea      	ST   -Y,R30
000be2 940e 1754 	CALL _memset
                 ; 0000 035E     memset(_coordResponse,0,sizeof(_coordResponse));
000be4 01fe      	MOVW R30,R28
000be5 9634      	ADIW R30,4
000be6 93fa      	ST   -Y,R31
000be7 93ea      	ST   -Y,R30
000be8 e0e0      	LDI  R30,LOW(0)
000be9 93ea      	ST   -Y,R30
000bea e5e0      	LDI  R30,LOW(80)
000beb e0f0      	LDI  R31,HIGH(80)
000bec 93fa      	ST   -Y,R31
000bed 93ea      	ST   -Y,R30
000bee 940e 1754 	CALL _memset
                 ; 0000 035F     indic1=_3gZipReceive(request);
000bf0 01fe      	MOVW R30,R28
000bf1 58e1      	SUBI R30,LOW(-(127))
000bf2 4fff      	SBCI R31,HIGH(-(127))
000bf3 93fa      	ST   -Y,R31
000bf4 93ea      	ST   -Y,R30
000bf5 def6      	RCALL __3gZipReceive
000bf6 2f0e      	MOV  R16,R30
                 ; 0000 0360 
                 ; 0000 0361     if (indic1==1)
000bf7 3001      	CPI  R16,1
000bf8 f011      	BREQ PC+3
000bf9 940c 0e7e 	JMP _0xF3
                 ; 0000 0362         {
                 ; 0000 0363             if (strstr(request,dev_id_chk)!=NULL) // if the serial_command contains this device's ID
000bfb 01fe      	MOVW R30,R28
000bfc 58e1      	SUBI R30,LOW(-(127))
000bfd 4fff      	SBCI R31,HIGH(-(127))
000bfe 93fa      	ST   -Y,R31
000bff 93ea      	ST   -Y,R30
000c00 e7e3      	LDI  R30,LOW(_dev_id_chk)
000c01 e1f4      	LDI  R31,HIGH(_dev_id_chk)
000c02 93fa      	ST   -Y,R31
000c03 93ea      	ST   -Y,R30
000c04 940e 1797 	CALL _strstr
000c06 9730      	SBIW R30,0
000c07 f411      	BRNE PC+3
000c08 940c 0e27 	JMP _0xF4
                 ; 0000 0364                 {
                 ; 0000 0365                     if (strstr(request,":ON3K")!=NULL)  //  if the request is to turn on LED 3K
000c0a 01fe      	MOVW R30,R28
000c0b 58e1      	SUBI R30,LOW(-(127))
000c0c 4fff      	SBCI R31,HIGH(-(127))
000c0d 93fa      	ST   -Y,R31
000c0e 93ea      	ST   -Y,R30
                +
000c0f e6e6     +LDI R30 , LOW ( _0xF6 + ( 0 ) )
000c10 e0fa     +LDI R31 , HIGH ( _0xF6 + ( 0 ) )
                 	__POINTW1MN _0xF6,0
000c11 93fa      	ST   -Y,R31
000c12 93ea      	ST   -Y,R30
000c13 940e 1797 	CALL _strstr
000c15 9730      	SBIW R30,0
000c16 f099      	BREQ _0xF5
                 ; 0000 0366                         {
                 ; 0000 0367                             current3k=1.5;
                +
000c17 e0e0     +LDI R30 , LOW ( 0x3FC00000 )
000c18 e0f0     +LDI R31 , HIGH ( 0x3FC00000 )
000c19 ec60     +LDI R22 , BYTE3 ( 0x3FC00000 )
000c1a e37f     +LDI R23 , BYTE4 ( 0x3FC00000 )
                 	__GETD1N 0x3FC00000
000c1b 93e0 14ae 	STS  _current3k,R30
000c1d 93f0 14af 	STS  _current3k+1,R31
000c1f 9360 14b0 	STS  _current3k+2,R22
000c21 9370 14b1 	STS  _current3k+3,R23
                 ; 0000 0368                             voltage3k=260;
000c23 e0e4      	LDI  R30,LOW(260)
000c24 e0f1      	LDI  R31,HIGH(260)
000c25 93e0 14b6 	STS  _voltage3k,R30
000c27 93f0 14b7 	STS  _voltage3k+1,R31
                 ; 0000 0369                         }
                 ; 0000 036A                     else if (strstr(request,":ON5K")!=NULL)  //  if the request is to turn on LED 5K
000c29 c1ef      	RJMP _0xF7
                 _0xF5:
000c2a 01fe      	MOVW R30,R28
000c2b 58e1      	SUBI R30,LOW(-(127))
000c2c 4fff      	SBCI R31,HIGH(-(127))
000c2d 93fa      	ST   -Y,R31
000c2e 93ea      	ST   -Y,R30
                +
000c2f e6ec     +LDI R30 , LOW ( _0xF6 + ( 6 ) )
000c30 e0fa     +LDI R31 , HIGH ( _0xF6 + ( 6 ) )
                 	__POINTW1MN _0xF6,6
000c31 93fa      	ST   -Y,R31
000c32 93ea      	ST   -Y,R30
000c33 940e 1797 	CALL _strstr
000c35 9730      	SBIW R30,0
000c36 f099      	BREQ _0xF8
                 ; 0000 036B                         {
                 ; 0000 036C                             current5k=1.5;
                +
000c37 e0e0     +LDI R30 , LOW ( 0x3FC00000 )
000c38 e0f0     +LDI R31 , HIGH ( 0x3FC00000 )
000c39 ec60     +LDI R22 , BYTE3 ( 0x3FC00000 )
000c3a e37f     +LDI R23 , BYTE4 ( 0x3FC00000 )
                 	__GETD1N 0x3FC00000
000c3b 93e0 14b2 	STS  _current5k,R30
000c3d 93f0 14b3 	STS  _current5k+1,R31
000c3f 9360 14b4 	STS  _current5k+2,R22
000c41 9370 14b5 	STS  _current5k+3,R23
                 ; 0000 036D                             voltage5k=260;
000c43 e0e4      	LDI  R30,LOW(260)
000c44 e0f1      	LDI  R31,HIGH(260)
000c45 93e0 14b8 	STS  _voltage5k,R30
000c47 93f0 14b9 	STS  _voltage5k+1,R31
                 ; 0000 036E                         }
                 ; 0000 036F                     else if (strstr(request,":OFF3K")!=NULL)  //  if the request is to turn off LED 3K
000c49 c1cf      	RJMP _0xF9
                 _0xF8:
000c4a 01fe      	MOVW R30,R28
000c4b 58e1      	SUBI R30,LOW(-(127))
000c4c 4fff      	SBCI R31,HIGH(-(127))
000c4d 93fa      	ST   -Y,R31
000c4e 93ea      	ST   -Y,R30
                +
000c4f e7e2     +LDI R30 , LOW ( _0xF6 + ( 12 ) )
000c50 e0fa     +LDI R31 , HIGH ( _0xF6 + ( 12 ) )
                 	__POINTW1MN _0xF6,12
000c51 93fa      	ST   -Y,R31
000c52 93ea      	ST   -Y,R30
000c53 940e 1797 	CALL _strstr
000c55 9730      	SBIW R30,0
000c56 f071      	BREQ _0xFA
                 ; 0000 0370                         {
                 ; 0000 0371                             current3k=0.0;
000c57 e0e0      	LDI  R30,LOW(0)
000c58 93e0 14ae 	STS  _current3k,R30
000c5a 93e0 14af 	STS  _current3k+1,R30
000c5c 93e0 14b0 	STS  _current3k+2,R30
000c5e 93e0 14b1 	STS  _current3k+3,R30
                 ; 0000 0372                             voltage3k=0;
000c60 93e0 14b6 	STS  _voltage3k,R30
000c62 93e0 14b7 	STS  _voltage3k+1,R30
                 ; 0000 0373                         }
                 ; 0000 0374                     else if (strstr(request,":OFF5K")!=NULL)  //  if the request is to turn off LED 5K
000c64 c1b4      	RJMP _0xFB
                 _0xFA:
000c65 01fe      	MOVW R30,R28
000c66 58e1      	SUBI R30,LOW(-(127))
000c67 4fff      	SBCI R31,HIGH(-(127))
000c68 93fa      	ST   -Y,R31
000c69 93ea      	ST   -Y,R30
                +
000c6a e7e9     +LDI R30 , LOW ( _0xF6 + ( 19 ) )
000c6b e0fa     +LDI R31 , HIGH ( _0xF6 + ( 19 ) )
                 	__POINTW1MN _0xF6,19
000c6c 93fa      	ST   -Y,R31
000c6d 93ea      	ST   -Y,R30
000c6e 940e 1797 	CALL _strstr
000c70 9730      	SBIW R30,0
000c71 f071      	BREQ _0xFC
                 ; 0000 0375                         {
                 ; 0000 0376                             current5k=0.0;
000c72 e0e0      	LDI  R30,LOW(0)
000c73 93e0 14b2 	STS  _current5k,R30
000c75 93e0 14b3 	STS  _current5k+1,R30
000c77 93e0 14b4 	STS  _current5k+2,R30
000c79 93e0 14b5 	STS  _current5k+3,R30
                 ; 0000 0377                             voltage5k=0;
000c7b 93e0 14b8 	STS  _voltage5k,R30
000c7d 93e0 14b9 	STS  _voltage5k+1,R30
                 ; 0000 0378                         }
                 ; 0000 0379                     else if (strstr(request,":TH")!=NULL)  //  if the request is to send temperature and humidity value
000c7f c199      	RJMP _0xFD
                 _0xFC:
000c80 01fe      	MOVW R30,R28
000c81 58e1      	SUBI R30,LOW(-(127))
000c82 4fff      	SBCI R31,HIGH(-(127))
000c83 93fa      	ST   -Y,R31
000c84 93ea      	ST   -Y,R30
                +
000c85 e8e0     +LDI R30 , LOW ( _0xF6 + ( 26 ) )
000c86 e0fa     +LDI R31 , HIGH ( _0xF6 + ( 26 ) )
                 	__POINTW1MN _0xF6,26
000c87 93fa      	ST   -Y,R31
000c88 93ea      	ST   -Y,R30
000c89 940e 1797 	CALL _strstr
000c8b 9730      	SBIW R30,0
000c8c f411      	BRNE PC+3
000c8d 940c 0d05 	JMP _0xFE
                 ; 0000 037A                         {
                 ; 0000 037B                             sprintf(_coordresp,"%c%c%cT%+04.1fH%04.1f%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,ETX,CR,LF);
000c8f 01fe      	MOVW R30,R28
000c90 5aec      	SUBI R30,LOW(-(84))
000c91 4fff      	SBCI R31,HIGH(-(84))
000c92 93fa      	ST   -Y,R31
000c93 93ea      	ST   -Y,R30
                +
000c94 e2e7     +LDI R30 , LOW ( 2 * _0x0 + ( 221 ) )
000c95 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 221 ) )
                 	__POINTW1FN _0x0,221
000c96 93fa      	ST   -Y,R31
000c97 93ea      	ST   -Y,R30
                +
000c98 e0e2     +LDI R30 , LOW ( 0x2 )
000c99 e0f0     +LDI R31 , HIGH ( 0x2 )
000c9a e060     +LDI R22 , BYTE3 ( 0x2 )
000c9b e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
000c9c 940e 1c2e 	CALL __PUTPARD1
                +
000c9e e3e5     +LDI R30 , LOW ( 0x35 )
000c9f e0f0     +LDI R31 , HIGH ( 0x35 )
000ca0 e060     +LDI R22 , BYTE3 ( 0x35 )
000ca1 e070     +LDI R23 , BYTE4 ( 0x35 )
                 	__GETD1N 0x35
000ca2 940e 1c2e 	CALL __PUTPARD1
                +
000ca4 e3e0     +LDI R30 , LOW ( 0x30 )
000ca5 e0f0     +LDI R31 , HIGH ( 0x30 )
000ca6 e060     +LDI R22 , BYTE3 ( 0x30 )
000ca7 e070     +LDI R23 , BYTE4 ( 0x30 )
                 	__GETD1N 0x30
000ca8 940e 1c2e 	CALL __PUTPARD1
000caa 91e0 14a4 	LDS  R30,_temperature
000cac 91f0 14a5 	LDS  R31,_temperature+1
000cae 9160 14a6 	LDS  R22,_temperature+2
000cb0 9170 14a7 	LDS  R23,_temperature+3
000cb2 940e 1c2e 	CALL __PUTPARD1
000cb4 91e0 14a8 	LDS  R30,_humidity
000cb6 91f0 14a9 	LDS  R31,_humidity+1
000cb8 9160 14aa 	LDS  R22,_humidity+2
000cba 9170 14ab 	LDS  R23,_humidity+3
000cbc 940e 1c2e 	CALL __PUTPARD1
                +
000cbe e0e3     +LDI R30 , LOW ( 0x3 )
000cbf e0f0     +LDI R31 , HIGH ( 0x3 )
000cc0 e060     +LDI R22 , BYTE3 ( 0x3 )
000cc1 e070     +LDI R23 , BYTE4 ( 0x3 )
                 	__GETD1N 0x3
000cc2 940e 1c2e 	CALL __PUTPARD1
                +
000cc4 e0ed     +LDI R30 , LOW ( 0xD )
000cc5 e0f0     +LDI R31 , HIGH ( 0xD )
000cc6 e060     +LDI R22 , BYTE3 ( 0xD )
000cc7 e070     +LDI R23 , BYTE4 ( 0xD )
                 	__GETD1N 0xD
000cc8 940e 1c2e 	CALL __PUTPARD1
                +
000cca e0ea     +LDI R30 , LOW ( 0xA )
000ccb e0f0     +LDI R31 , HIGH ( 0xA )
000ccc e060     +LDI R22 , BYTE3 ( 0xA )
000ccd e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000cce 940e 1c2e 	CALL __PUTPARD1
000cd0 e280      	LDI  R24,32
000cd1 940e 16ef 	CALL _sprintf
000cd3 96a4      	ADIW R28,36
                 ; 0000 037C                             for (index=0;index<strlen(_coordresp);index++) sprintf(_coordResponse+strlen(_coordResponse),"%02X",_coordresp[index]);
000cd4 e010      	LDI  R17,LOW(0)
                 _0x100:
000cd5 01fe      	MOVW R30,R28
000cd6 5aec      	SUBI R30,LOW(-(84))
000cd7 4fff      	SBCI R31,HIGH(-(84))
000cd8 93fa      	ST   -Y,R31
000cd9 93ea      	ST   -Y,R30
000cda 940e 176d 	CALL _strlen
000cdc 2fa1      	MOV  R26,R17
000cdd e0b0      	LDI  R27,0
000cde 17ae      	CP   R26,R30
000cdf 07bf      	CPC  R27,R31
000ce0 f518      	BRSH _0x101
000ce1 01fe      	MOVW R30,R28
000ce2 9634      	ADIW R30,4
000ce3 93fa      	ST   -Y,R31
000ce4 93ea      	ST   -Y,R30
000ce5 940e 176d 	CALL _strlen
000ce7 01de      	MOVW R26,R28
000ce8 9614      	ADIW R26,4
000ce9 0fea      	ADD  R30,R26
000cea 1ffb      	ADC  R31,R27
000ceb 93fa      	ST   -Y,R31
000cec 93ea      	ST   -Y,R30
                +
000ced e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 65 ) )
000cee e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 65 ) )
                 	__POINTW1FN _0x0,65
000cef 93fa      	ST   -Y,R31
000cf0 93ea      	ST   -Y,R30
000cf1 2fe1      	MOV  R30,R17
000cf2 e0f0      	LDI  R31,0
000cf3 01de      	MOVW R26,R28
000cf4 5aa8      	SUBI R26,LOW(-(88))
000cf5 4fbf      	SBCI R27,HIGH(-(88))
000cf6 0fae      	ADD  R26,R30
000cf7 1fbf      	ADC  R27,R31
000cf8 91ec      	LD   R30,X
000cf9 27ff      	CLR  R31
000cfa 2766      	CLR  R22
000cfb 2777      	CLR  R23
000cfc 940e 1c2e 	CALL __PUTPARD1
000cfe e084      	LDI  R24,4
000cff 940e 16ef 	CALL _sprintf
000d01 9628      	ADIW R28,8
000d02 5f1f      	SUBI R17,-1
000d03 cfd1      	RJMP _0x100
                 _0x101:
                 ; 0000 037E _3gZipSend(1,_coordResponse);
000d04 c10d      	RJMP _0x17F
                 ; 0000 037F                         }
                 ; 0000 0380                     else if (strstr(request,":VI")!=NULL)  //  if the request is to send voltage and current value
                 _0xFE:
000d05 01fe      	MOVW R30,R28
000d06 58e1      	SUBI R30,LOW(-(127))
000d07 4fff      	SBCI R31,HIGH(-(127))
000d08 93fa      	ST   -Y,R31
000d09 93ea      	ST   -Y,R30
                +
000d0a e8e4     +LDI R30 , LOW ( _0xF6 + ( 30 ) )
000d0b e0fa     +LDI R31 , HIGH ( _0xF6 + ( 30 ) )
                 	__POINTW1MN _0xF6,30
000d0c 93fa      	ST   -Y,R31
000d0d 93ea      	ST   -Y,R30
000d0e 940e 1797 	CALL _strstr
000d10 9730      	SBIW R30,0
000d11 f411      	BRNE PC+3
000d12 940c 0d9a 	JMP _0x103
                 ; 0000 0381                         {
                 ; 0000 0382                             sprintf(_coordresp,"%c%c%c3V%03uI%03.1f5V%03uI%03.1f%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),voltage3k,current3k,voltage5k,current5k,ETX,CR,LF);
000d14 01fe      	MOVW R30,R28
000d15 5aec      	SUBI R30,LOW(-(84))
000d16 4fff      	SBCI R31,HIGH(-(84))
000d17 93fa      	ST   -Y,R31
000d18 93ea      	ST   -Y,R30
                +
000d19 e4e7     +LDI R30 , LOW ( 2 * _0x0 + ( 253 ) )
000d1a e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 253 ) )
                 	__POINTW1FN _0x0,253
000d1b 93fa      	ST   -Y,R31
000d1c 93ea      	ST   -Y,R30
                +
000d1d e0e2     +LDI R30 , LOW ( 0x2 )
000d1e e0f0     +LDI R31 , HIGH ( 0x2 )
000d1f e060     +LDI R22 , BYTE3 ( 0x2 )
000d20 e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
000d21 940e 1c2e 	CALL __PUTPARD1
                +
000d23 e3e5     +LDI R30 , LOW ( 0x35 )
000d24 e0f0     +LDI R31 , HIGH ( 0x35 )
000d25 e060     +LDI R22 , BYTE3 ( 0x35 )
000d26 e070     +LDI R23 , BYTE4 ( 0x35 )
                 	__GETD1N 0x35
000d27 940e 1c2e 	CALL __PUTPARD1
                +
000d29 e3e0     +LDI R30 , LOW ( 0x30 )
000d2a e0f0     +LDI R31 , HIGH ( 0x30 )
000d2b e060     +LDI R22 , BYTE3 ( 0x30 )
000d2c e070     +LDI R23 , BYTE4 ( 0x30 )
                 	__GETD1N 0x30
000d2d 940e 1c2e 	CALL __PUTPARD1
000d2f 91e0 14b6 	LDS  R30,_voltage3k
000d31 91f0 14b7 	LDS  R31,_voltage3k+1
000d33 2766      	CLR  R22
000d34 2777      	CLR  R23
000d35 940e 1c2e 	CALL __PUTPARD1
000d37 91e0 14ae 	LDS  R30,_current3k
000d39 91f0 14af 	LDS  R31,_current3k+1
000d3b 9160 14b0 	LDS  R22,_current3k+2
000d3d 9170 14b1 	LDS  R23,_current3k+3
000d3f 940e 1c2e 	CALL __PUTPARD1
000d41 91e0 14b8 	LDS  R30,_voltage5k
000d43 91f0 14b9 	LDS  R31,_voltage5k+1
000d45 2766      	CLR  R22
000d46 2777      	CLR  R23
000d47 940e 1c2e 	CALL __PUTPARD1
000d49 91e0 14b2 	LDS  R30,_current5k
000d4b 91f0 14b3 	LDS  R31,_current5k+1
000d4d 9160 14b4 	LDS  R22,_current5k+2
000d4f 9170 14b5 	LDS  R23,_current5k+3
000d51 940e 1c2e 	CALL __PUTPARD1
                +
000d53 e0e3     +LDI R30 , LOW ( 0x3 )
000d54 e0f0     +LDI R31 , HIGH ( 0x3 )
000d55 e060     +LDI R22 , BYTE3 ( 0x3 )
000d56 e070     +LDI R23 , BYTE4 ( 0x3 )
                 	__GETD1N 0x3
000d57 940e 1c2e 	CALL __PUTPARD1
                +
000d59 e0ed     +LDI R30 , LOW ( 0xD )
000d5a e0f0     +LDI R31 , HIGH ( 0xD )
000d5b e060     +LDI R22 , BYTE3 ( 0xD )
000d5c e070     +LDI R23 , BYTE4 ( 0xD )
                 	__GETD1N 0xD
000d5d 940e 1c2e 	CALL __PUTPARD1
                +
000d5f e0ea     +LDI R30 , LOW ( 0xA )
000d60 e0f0     +LDI R31 , HIGH ( 0xA )
000d61 e060     +LDI R22 , BYTE3 ( 0xA )
000d62 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000d63 940e 1c2e 	CALL __PUTPARD1
000d65 e288      	LDI  R24,40
000d66 940e 16ef 	CALL _sprintf
000d68 96ac      	ADIW R28,44
                 ; 0000 0383                             for (index=0;index<strlen(_coordresp);index++) sprintf(_coordResponse+strlen(_coordResponse),"%02X",_coordresp[index]);
000d69 e010      	LDI  R17,LOW(0)
                 _0x105:
000d6a 01fe      	MOVW R30,R28
000d6b 5aec      	SUBI R30,LOW(-(84))
000d6c 4fff      	SBCI R31,HIGH(-(84))
000d6d 93fa      	ST   -Y,R31
000d6e 93ea      	ST   -Y,R30
000d6f 940e 176d 	CALL _strlen
000d71 2fa1      	MOV  R26,R17
000d72 e0b0      	LDI  R27,0
000d73 17ae      	CP   R26,R30
000d74 07bf      	CPC  R27,R31
000d75 f518      	BRSH _0x106
000d76 01fe      	MOVW R30,R28
000d77 9634      	ADIW R30,4
000d78 93fa      	ST   -Y,R31
000d79 93ea      	ST   -Y,R30
000d7a 940e 176d 	CALL _strlen
000d7c 01de      	MOVW R26,R28
000d7d 9614      	ADIW R26,4
000d7e 0fea      	ADD  R30,R26
000d7f 1ffb      	ADC  R31,R27
000d80 93fa      	ST   -Y,R31
000d81 93ea      	ST   -Y,R30
                +
000d82 e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 65 ) )
000d83 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 65 ) )
                 	__POINTW1FN _0x0,65
000d84 93fa      	ST   -Y,R31
000d85 93ea      	ST   -Y,R30
000d86 2fe1      	MOV  R30,R17
000d87 e0f0      	LDI  R31,0
000d88 01de      	MOVW R26,R28
000d89 5aa8      	SUBI R26,LOW(-(88))
000d8a 4fbf      	SBCI R27,HIGH(-(88))
000d8b 0fae      	ADD  R26,R30
000d8c 1fbf      	ADC  R27,R31
000d8d 91ec      	LD   R30,X
000d8e 27ff      	CLR  R31
000d8f 2766      	CLR  R22
000d90 2777      	CLR  R23
000d91 940e 1c2e 	CALL __PUTPARD1
000d93 e084      	LDI  R24,4
000d94 940e 16ef 	CALL _sprintf
000d96 9628      	ADIW R28,8
000d97 5f1f      	SUBI R17,-1
000d98 cfd1      	RJMP _0x105
                 _0x106:
                 ; 0000 0385 _3gZipSend(1,_coordResponse);
000d99 c078      	RJMP _0x17F
                 ; 0000 0386                         }
                 ; 0000 0387                     else if (strstr(request,":D")!=NULL)    //  if the request is to send dust concentration value
                 _0x103:
000d9a 01fe      	MOVW R30,R28
000d9b 58e1      	SUBI R30,LOW(-(127))
000d9c 4fff      	SBCI R31,HIGH(-(127))
000d9d 93fa      	ST   -Y,R31
000d9e 93ea      	ST   -Y,R30
                +
000d9f e8e8     +LDI R30 , LOW ( _0xF6 + ( 34 ) )
000da0 e0fa     +LDI R31 , HIGH ( _0xF6 + ( 34 ) )
                 	__POINTW1MN _0xF6,34
000da1 93fa      	ST   -Y,R31
000da2 93ea      	ST   -Y,R30
000da3 940e 1797 	CALL _strstr
000da5 9730      	SBIW R30,0
000da6 f411      	BRNE PC+3
000da7 940c 0e19 	JMP _0x108
                 ; 0000 0388                         {
                 ; 0000 0389                             sprintf(_coordresp,"%c%c%cD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),dustconcentration,ETX,CR,LF);
000da9 01fe      	MOVW R30,R28
000daa 5aec      	SUBI R30,LOW(-(84))
000dab 4fff      	SBCI R31,HIGH(-(84))
000dac 93fa      	ST   -Y,R31
000dad 93ea      	ST   -Y,R30
                +
000dae e7e1     +LDI R30 , LOW ( 2 * _0x0 + ( 295 ) )
000daf e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 295 ) )
                 	__POINTW1FN _0x0,295
000db0 93fa      	ST   -Y,R31
000db1 93ea      	ST   -Y,R30
                +
000db2 e0e2     +LDI R30 , LOW ( 0x2 )
000db3 e0f0     +LDI R31 , HIGH ( 0x2 )
000db4 e060     +LDI R22 , BYTE3 ( 0x2 )
000db5 e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
000db6 940e 1c2e 	CALL __PUTPARD1
                +
000db8 e3e5     +LDI R30 , LOW ( 0x35 )
000db9 e0f0     +LDI R31 , HIGH ( 0x35 )
000dba e060     +LDI R22 , BYTE3 ( 0x35 )
000dbb e070     +LDI R23 , BYTE4 ( 0x35 )
                 	__GETD1N 0x35
000dbc 940e 1c2e 	CALL __PUTPARD1
                +
000dbe e3e0     +LDI R30 , LOW ( 0x30 )
000dbf e0f0     +LDI R31 , HIGH ( 0x30 )
000dc0 e060     +LDI R22 , BYTE3 ( 0x30 )
000dc1 e070     +LDI R23 , BYTE4 ( 0x30 )
                 	__GETD1N 0x30
000dc2 940e 1c2e 	CALL __PUTPARD1
000dc4 91e0 14ac 	LDS  R30,_dustconcentration
000dc6 91f0 14ad 	LDS  R31,_dustconcentration+1
000dc8 2766      	CLR  R22
000dc9 2777      	CLR  R23
000dca 940e 1c2e 	CALL __PUTPARD1
                +
000dcc e0e3     +LDI R30 , LOW ( 0x3 )
000dcd e0f0     +LDI R31 , HIGH ( 0x3 )
000dce e060     +LDI R22 , BYTE3 ( 0x3 )
000dcf e070     +LDI R23 , BYTE4 ( 0x3 )
                 	__GETD1N 0x3
000dd0 940e 1c2e 	CALL __PUTPARD1
                +
000dd2 e0ed     +LDI R30 , LOW ( 0xD )
000dd3 e0f0     +LDI R31 , HIGH ( 0xD )
000dd4 e060     +LDI R22 , BYTE3 ( 0xD )
000dd5 e070     +LDI R23 , BYTE4 ( 0xD )
                 	__GETD1N 0xD
000dd6 940e 1c2e 	CALL __PUTPARD1
                +
000dd8 e0ea     +LDI R30 , LOW ( 0xA )
000dd9 e0f0     +LDI R31 , HIGH ( 0xA )
000dda e060     +LDI R22 , BYTE3 ( 0xA )
000ddb e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000ddc 940e 1c2e 	CALL __PUTPARD1
000dde e18c      	LDI  R24,28
000ddf 940e 16ef 	CALL _sprintf
000de1 96a0      	ADIW R28,32
                 ; 0000 038A                             for (index=0;index<strlen(_coordresp);index++) sprintf(_coordResponse+strlen(_coordResponse),"%02X",_coordresp[index]);
000de2 e010      	LDI  R17,LOW(0)
                 _0x10A:
000de3 01fe      	MOVW R30,R28
000de4 5aec      	SUBI R30,LOW(-(84))
000de5 4fff      	SBCI R31,HIGH(-(84))
000de6 93fa      	ST   -Y,R31
000de7 93ea      	ST   -Y,R30
000de8 940e 176d 	CALL _strlen
000dea 2fa1      	MOV  R26,R17
000deb e0b0      	LDI  R27,0
000dec 17ae      	CP   R26,R30
000ded 07bf      	CPC  R27,R31
000dee f518      	BRSH _0x10B
000def 01fe      	MOVW R30,R28
000df0 9634      	ADIW R30,4
000df1 93fa      	ST   -Y,R31
000df2 93ea      	ST   -Y,R30
000df3 940e 176d 	CALL _strlen
000df5 01de      	MOVW R26,R28
000df6 9614      	ADIW R26,4
000df7 0fea      	ADD  R30,R26
000df8 1ffb      	ADC  R31,R27
000df9 93fa      	ST   -Y,R31
000dfa 93ea      	ST   -Y,R30
                +
000dfb e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 65 ) )
000dfc e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 65 ) )
                 	__POINTW1FN _0x0,65
000dfd 93fa      	ST   -Y,R31
000dfe 93ea      	ST   -Y,R30
000dff 2fe1      	MOV  R30,R17
000e00 e0f0      	LDI  R31,0
000e01 01de      	MOVW R26,R28
000e02 5aa8      	SUBI R26,LOW(-(88))
000e03 4fbf      	SBCI R27,HIGH(-(88))
000e04 0fae      	ADD  R26,R30
000e05 1fbf      	ADC  R27,R31
000e06 91ec      	LD   R30,X
000e07 27ff      	CLR  R31
000e08 2766      	CLR  R22
000e09 2777      	CLR  R23
000e0a 940e 1c2e 	CALL __PUTPARD1
000e0c e084      	LDI  R24,4
000e0d 940e 16ef 	CALL _sprintf
000e0f 9628      	ADIW R28,8
000e10 5f1f      	SUBI R17,-1
000e11 cfd1      	RJMP _0x10A
                 _0x10B:
                 ; 0000 038C _3gZipSend(1,_coordResponse);
                 _0x17F:
000e12 e0e1      	LDI  R30,LOW(1)
000e13 93ea      	ST   -Y,R30
000e14 01fe      	MOVW R30,R28
000e15 9635      	ADIW R30,5
000e16 93fa      	ST   -Y,R31
000e17 93ea      	ST   -Y,R30
000e18 dbcc      	RCALL __3gZipSend
                 ; 0000 038D                         };
                 _0x108:
                 _0xFD:
                 _0xFB:
                 _0xF9:
                 _0xF7:
                 ; 0000 038E                     memset(request,0,sizeof(request)); // reset serial_command array
000e19 01fe      	MOVW R30,R28
000e1a 58e1      	SUBI R30,LOW(-(127))
000e1b 4fff      	SBCI R31,HIGH(-(127))
000e1c 93fa      	ST   -Y,R31
000e1d 93ea      	ST   -Y,R30
000e1e e0e0      	LDI  R30,LOW(0)
000e1f 93ea      	ST   -Y,R30
000e20 e1e4      	LDI  R30,LOW(20)
000e21 e0f0      	LDI  R31,HIGH(20)
000e22 93fa      	ST   -Y,R31
000e23 93ea      	ST   -Y,R30
000e24 940e 1754 	CALL _memset
                 ; 0000 038F                 }
                 ; 0000 0390             else if (strstr(request,dev_id_chk)==NULL)// if the serial_command doesn't contain this device's ID
000e26 c057      	RJMP _0x10C
                 _0xF4:
000e27 01fe      	MOVW R30,R28
000e28 58e1      	SUBI R30,LOW(-(127))
000e29 4fff      	SBCI R31,HIGH(-(127))
000e2a 93fa      	ST   -Y,R31
000e2b 93ea      	ST   -Y,R30
000e2c e7e3      	LDI  R30,LOW(_dev_id_chk)
000e2d e1f4      	LDI  R31,HIGH(_dev_id_chk)
000e2e 93fa      	ST   -Y,R31
000e2f 93ea      	ST   -Y,R30
000e30 940e 1797 	CALL _strstr
000e32 9730      	SBIW R30,0
000e33 f011      	BREQ PC+3
000e34 940c 0e7e 	JMP _0x10D
                 ; 0000 0391                 {
                 ; 0000 0392                     //for (index=1;index<3;index++) _devid[index-1]=request[index];
                 ; 0000 0393                     //_devID=atoi(_devid);
                 ; 0000 0394                     _devID=(request[1]<<8)+request[2];
                +
000e36 01fe     +MOVW R30 , R28
000e37 58e0     +SUBI R30 , LOW ( - 128 )
000e38 4fff     +SBCI R31 , HIGH ( - 128 )
000e39 81f0     +LD R31 , Z
000e3a 27ee     +CLR R30
                 	__LSLW8SX 128
000e3b 01df      	MOVW R26,R30
                +
000e3c 01fe     +MOVW R30 , R28
000e3d 57ef     +SUBI R30 , LOW ( - 129 )
000e3e 4fff     +SBCI R31 , HIGH ( - 129 )
000e3f 81e0     +LD R30 , Z
                 	__GETB1SX 129
000e40 e0f0      	LDI  R31,0
000e41 0fea      	ADD  R30,R26
000e42 1ffb      	ADC  R31,R27
000e43 019f      	MOVW R18,R30
                 ; 0000 0395                     for (index=0;index<sizeof(ledID);index++)
000e44 e010      	LDI  R17,LOW(0)
                 _0x10F:
000e45 3018      	CPI  R17,8
000e46 f478      	BRSH _0x110
                 ; 0000 0396                         {
                 ; 0000 0397                             if (_devID==ledID[index]) break;
000e47 2fe1      	MOV  R30,R17
000e48 e7ac      	LDI  R26,LOW(_ledID)
000e49 e1b4      	LDI  R27,HIGH(_ledID)
000e4a e0f0      	LDI  R31,0
000e4b 0fee      	LSL  R30
000e4c 1fff      	ROL  R31
000e4d 0fae      	ADD  R26,R30
000e4e 1fbf      	ADC  R27,R31
000e4f 940e 1c0b 	CALL __GETW1P
000e51 17e2      	CP   R30,R18
000e52 07f3      	CPC  R31,R19
000e53 f011      	BREQ _0x110
                 ; 0000 0398                         }
000e54 5f1f      	SUBI R17,-1
000e55 cfef      	RJMP _0x10F
                 _0x110:
                 ; 0000 0399                     xbeeTransmit(request,strlen(request),led_64bitaddress_high[index],led_64bitaddress_low[index]);
000e56 01fe      	MOVW R30,R28
000e57 58e1      	SUBI R30,LOW(-(127))
000e58 4fff      	SBCI R31,HIGH(-(127))
000e59 93fa      	ST   -Y,R31
000e5a 93ea      	ST   -Y,R30
000e5b 01fe      	MOVW R30,R28
000e5c 57ef      	SUBI R30,LOW(-(129))
000e5d 4fff      	SBCI R31,HIGH(-(129))
000e5e 93fa      	ST   -Y,R31
000e5f 93ea      	ST   -Y,R30
000e60 940e 176d 	CALL _strlen
000e62 93fa      	ST   -Y,R31
000e63 93ea      	ST   -Y,R30
000e64 2fe1      	MOV  R30,R17
000e65 e8a4      	LDI  R26,LOW(_led_64bitaddress_high)
000e66 e1b4      	LDI  R27,HIGH(_led_64bitaddress_high)
000e67 e0f0      	LDI  R31,0
000e68 940e 1b61 	CALL __LSLW2
000e6a 0fae      	ADD  R26,R30
000e6b 1fbf      	ADC  R27,R31
000e6c 940e 1c0f 	CALL __GETD1P
000e6e 940e 1c2e 	CALL __PUTPARD1
000e70 2fe1      	MOV  R30,R17
000e71 e9a4      	LDI  R26,LOW(_led_64bitaddress_low)
000e72 e1b4      	LDI  R27,HIGH(_led_64bitaddress_low)
000e73 e0f0      	LDI  R31,0
000e74 940e 1b61 	CALL __LSLW2
000e76 0fae      	ADD  R26,R30
000e77 1fbf      	ADC  R27,R31
000e78 940e 1c0f 	CALL __GETD1P
000e7a 940e 1c2e 	CALL __PUTPARD1
000e7c 940e 05f2 	CALL _xbeeTransmit
                 ; 0000 039A                 }
                 ; 0000 039B         }
                 _0x10D:
                 _0x10C:
                 ; 0000 039C }
                 _0xF3:
000e7e 940e 1c58 	CALL __LOADLOCR4
000e80 96ef      	ADIW R28,63
000e81 96ef      	ADIW R28,63
000e82 9665      	ADIW R28,21
000e83 9508      	RET
                 
                 	.DSEG
                 _0xF6:
000a66           	.BYTE 0x25
                 ;
                 ;void getDataFromZigbeeRouterAndForwardToServer(void)
                 ; 0000 039F {
                 
                 	.CSEG
                 _getDataFromZigbeeRouterAndForwardToServer:
                 ; 0000 03A0     char receivedPacket[40],_3gPacket[80];
                 ; 0000 03A1     unsigned char index,indic1;
                 ; 0000 03A2     memset(receivedPacket,0,sizeof(receivedPacket));
000e84 97ef      	SBIW R28,63
000e85 97e9      	SBIW R28,57
000e86 931a      	ST   -Y,R17
000e87 930a      	ST   -Y,R16
                 ;	receivedPacket -> Y+82
                 ;	_3gPacket -> Y+2
                 ;	index -> R17
                 ;	indic1 -> R16
000e88 01fe      	MOVW R30,R28
000e89 5aee      	SUBI R30,LOW(-(82))
000e8a 4fff      	SBCI R31,HIGH(-(82))
000e8b 93fa      	ST   -Y,R31
000e8c 93ea      	ST   -Y,R30
000e8d e0e0      	LDI  R30,LOW(0)
000e8e 93ea      	ST   -Y,R30
000e8f e2e8      	LDI  R30,LOW(40)
000e90 e0f0      	LDI  R31,HIGH(40)
000e91 93fa      	ST   -Y,R31
000e92 93ea      	ST   -Y,R30
000e93 940e 1754 	CALL _memset
                 ; 0000 03A3     memset(_3gPacket,0,sizeof(_3gPacket));
000e95 01fe      	MOVW R30,R28
000e96 9632      	ADIW R30,2
000e97 93fa      	ST   -Y,R31
000e98 93ea      	ST   -Y,R30
000e99 e0e0      	LDI  R30,LOW(0)
000e9a 93ea      	ST   -Y,R30
000e9b e5e0      	LDI  R30,LOW(80)
000e9c e0f0      	LDI  R31,HIGH(80)
000e9d 93fa      	ST   -Y,R31
000e9e 93ea      	ST   -Y,R30
000e9f 940e 1754 	CALL _memset
                 ; 0000 03A4     indic1=xbeeReceive(receivedPacket);
000ea1 01fe      	MOVW R30,R28
000ea2 5aee      	SUBI R30,LOW(-(82))
000ea3 4fff      	SBCI R31,HIGH(-(82))
000ea4 93fa      	ST   -Y,R31
000ea5 93ea      	ST   -Y,R30
000ea6 940e 06e7 	CALL _xbeeReceive
000ea8 2f0e      	MOV  R16,R30
                 ; 0000 03A5     if (indic1==1)
000ea9 3001      	CPI  R16,1
000eaa f5b9      	BRNE _0x112
                 ; 0000 03A6         {
                 ; 0000 03A7             for (index=0;index<strlen(receivedPacket);index++) sprintf(_3gPacket+strlen(_3gPacket),"%02X",receivedPacket[index]);
000eab e010      	LDI  R17,LOW(0)
                 _0x114:
000eac 01fe      	MOVW R30,R28
000ead 5aee      	SUBI R30,LOW(-(82))
000eae 4fff      	SBCI R31,HIGH(-(82))
000eaf 93fa      	ST   -Y,R31
000eb0 93ea      	ST   -Y,R30
000eb1 940e 176d 	CALL _strlen
000eb3 2fa1      	MOV  R26,R17
000eb4 e0b0      	LDI  R27,0
000eb5 17ae      	CP   R26,R30
000eb6 07bf      	CPC  R27,R31
000eb7 f518      	BRSH _0x115
000eb8 01fe      	MOVW R30,R28
000eb9 9632      	ADIW R30,2
000eba 93fa      	ST   -Y,R31
000ebb 93ea      	ST   -Y,R30
000ebc 940e 176d 	CALL _strlen
000ebe 01de      	MOVW R26,R28
000ebf 9612      	ADIW R26,2
000ec0 0fea      	ADD  R30,R26
000ec1 1ffb      	ADC  R31,R27
000ec2 93fa      	ST   -Y,R31
000ec3 93ea      	ST   -Y,R30
                +
000ec4 e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 65 ) )
000ec5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 65 ) )
                 	__POINTW1FN _0x0,65
000ec6 93fa      	ST   -Y,R31
000ec7 93ea      	ST   -Y,R30
000ec8 2fe1      	MOV  R30,R17
000ec9 e0f0      	LDI  R31,0
000eca 01de      	MOVW R26,R28
000ecb 5aaa      	SUBI R26,LOW(-(86))
000ecc 4fbf      	SBCI R27,HIGH(-(86))
000ecd 0fae      	ADD  R26,R30
000ece 1fbf      	ADC  R27,R31
000ecf 91ec      	LD   R30,X
000ed0 27ff      	CLR  R31
000ed1 2766      	CLR  R22
000ed2 2777      	CLR  R23
000ed3 940e 1c2e 	CALL __PUTPARD1
000ed5 e084      	LDI  R24,4
000ed6 940e 16ef 	CALL _sprintf
000ed8 9628      	ADIW R28,8
000ed9 5f1f      	SUBI R17,-1
000eda cfd1      	RJMP _0x114
                 _0x115:
                 ; 0000 03A9 _3gZipSend(1,_3gPacket);
000edb e0e1      	LDI  R30,LOW(1)
000edc 93ea      	ST   -Y,R30
000edd 01fe      	MOVW R30,R28
000ede 9633      	ADIW R30,3
000edf 93fa      	ST   -Y,R31
000ee0 93ea      	ST   -Y,R30
000ee1 db03      	RCALL __3gZipSend
                 ; 0000 03AA         }
                 ; 0000 03AB }
                 _0x112:
000ee2 8119      	LDD  R17,Y+1
000ee3 8108      	LDD  R16,Y+0
000ee4 96ef      	ADIW R28,63
000ee5 96eb      	ADIW R28,59
000ee6 9508      	RET
                 ;
                 ;unsigned int getPM10Concentration(void)
                 ; 0000 03AE {
                 _getPM10Concentration:
                 ; 0000 03AF     unsigned char i;
                 ; 0000 03B0     unsigned long d[14],measuredValue;
                 ; 0000 03B1     unsigned int CAI; // comprehensive air-quality index (korean AQI)
                 ; 0000 03B2     float pm10Conc;
                 ; 0000 03B3     poutput=USART2;
000ee7 97ef      	SBIW R28,63
000ee8 9721      	SBIW R28,1
000ee9 940e 1c51 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	d -> Y+12
                 ;	measuredValue -> Y+8
                 ;	CAI -> R18,R19
                 ;	pm10Conc -> Y+4
000eeb e0e2      	LDI  R30,LOW(2)
000eec 93e0 146e 	STS  _poutput,R30
                 ; 0000 03B4     putchar(0x11);
000eee e1e1      	LDI  R30,LOW(17)
000eef 93ea      	ST   -Y,R30
000ef0 940e 0539 	CALL _putchar
                 ; 0000 03B5     putchar(0x01);
000ef2 e0e1      	LDI  R30,LOW(1)
000ef3 93ea      	ST   -Y,R30
000ef4 940e 0539 	CALL _putchar
                 ; 0000 03B6     putchar(0x01);
000ef6 e0e1      	LDI  R30,LOW(1)
000ef7 93ea      	ST   -Y,R30
000ef8 940e 0539 	CALL _putchar
                 ; 0000 03B7     putchar(0xED);
000efa eeed      	LDI  R30,LOW(237)
000efb 93ea      	ST   -Y,R30
000efc 940e 0539 	CALL _putchar
                 ; 0000 03B8     if (getchar()==0x16)
000efe 940e 04b4 	CALL _getchar
000f00 31e6      	CPI  R30,LOW(0x16)
000f01 f501      	BRNE _0x116
                 ; 0000 03B9         {
                 ; 0000 03BA             if (getchar()==0x0D)
000f02 940e 04b4 	CALL _getchar
000f04 30ed      	CPI  R30,LOW(0xD)
000f05 f4e1      	BRNE _0x117
                 ; 0000 03BB                 {
                 ; 0000 03BC                     if (getchar()==0x01)
000f06 940e 04b4 	CALL _getchar
000f08 30e1      	CPI  R30,LOW(0x1)
000f09 f4c1      	BRNE _0x118
                 ; 0000 03BD                         {
                 ; 0000 03BE                             for (i=0;i<13;i++) d[i]=getchar();
000f0a e010      	LDI  R17,LOW(0)
                 _0x11A:
000f0b 301d      	CPI  R17,13
000f0c f4a8      	BRSH _0x11B
000f0d 2fe1      	MOV  R30,R17
000f0e e0f0      	LDI  R31,0
000f0f 01de      	MOVW R26,R28
000f10 961c      	ADIW R26,12
000f11 940e 1b61 	CALL __LSLW2
000f13 0fea      	ADD  R30,R26
000f14 1ffb      	ADC  R31,R27
000f15 93ff      	PUSH R31
000f16 93ef      	PUSH R30
000f17 940e 04b4 	CALL _getchar
000f19 91af      	POP  R26
000f1a 91bf      	POP  R27
000f1b 27ff      	CLR  R31
000f1c 2766      	CLR  R22
000f1d 2777      	CLR  R23
000f1e 940e 1c1a 	CALL __PUTDP1
000f20 5f1f      	SUBI R17,-1
000f21 cfe9      	RJMP _0x11A
                 _0x11B:
                 ; 0000 03BF }
                 ; 0000 03C0                 }
                 _0x118:
                 ; 0000 03C1         }
                 _0x117:
                 ; 0000 03C2     measuredValue=d[0]<<24|d[1]<<16|d[2]<<8|d[3]; //arrange the value
                 _0x116:
                +
000f22 85ac     +LDD R26 , Y + 12
000f23 85bd     +LDD R27 , Y + 12 + 1
000f24 858e     +LDD R24 , Y + 12 + 2
000f25 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000f26 e1e8      	LDI  R30,LOW(24)
000f27 940e 1b45 	CALL __LSLD12
000f29 01df      	MOVW R26,R30
000f2a 01cb      	MOVW R24,R22
                +
000f2b 89e8     +LDD R30 , Y + 16
000f2c 89f9     +LDD R31 , Y + 16 + 1
000f2d 896a     +LDD R22 , Y + 16 + 2
000f2e 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000f2f 940e 1b66 	CALL __LSLD16
000f31 940e 1b34 	CALL __ORD12
000f33 937f      	PUSH R23
000f34 936f      	PUSH R22
000f35 93ff      	PUSH R31
000f36 93ef      	PUSH R30
                +
000f37 89ac     +LDD R26 , Y + 20
000f38 89bd     +LDD R27 , Y + 20 + 1
000f39 898e     +LDD R24 , Y + 20 + 2
000f3a 899f     +LDD R25 , Y + 20 + 3
                 	__GETD2S 20
000f3b e0e8      	LDI  R30,LOW(8)
000f3c 940e 1b45 	CALL __LSLD12
000f3e 91af      	POP  R26
000f3f 91bf      	POP  R27
000f40 918f      	POP  R24
000f41 919f      	POP  R25
000f42 940e 1b34 	CALL __ORD12
                +
000f44 8da8     +LDD R26 , Y + 24
000f45 8db9     +LDD R27 , Y + 24 + 1
000f46 8d8a     +LDD R24 , Y + 24 + 2
000f47 8d9b     +LDD R25 , Y + 24 + 3
                 	__GETD2S 24
000f48 940e 1b34 	CALL __ORD12
                +
000f4a 87e8     +STD Y + 8 , R30
000f4b 87f9     +STD Y + 8 + 1 , R31
000f4c 876a     +STD Y + 8 + 2 , R22
000f4d 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 03C3     pm10Conc=measuredValue*0.03528;
000f4e 940e 19ec 	CALL __CDF1U
                +
000f50 eca3     +LDI R26 , LOW ( 0x3D1081C3 )
000f51 e8b1     +LDI R27 , HIGH ( 0x3D1081C3 )
000f52 e180     +LDI R24 , BYTE3 ( 0x3D1081C3 )
000f53 e39d     +LDI R25 , BYTE4 ( 0x3D1081C3 )
                 	__GETD2N 0x3D1081C3
000f54 940e 1a78 	CALL __MULF12
                +
000f56 83ec     +STD Y + 4 , R30
000f57 83fd     +STD Y + 4 + 1 , R31
000f58 836e     +STD Y + 4 + 2 , R22
000f59 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 03C4     if (pm10Conc>600.0) pm10Conc=600.0; //set 600 as highest concentration value, for CAI conversion purposes
                +
000f5a 81ac     +LDD R26 , Y + 4
000f5b 81bd     +LDD R27 , Y + 4 + 1
000f5c 818e     +LDD R24 , Y + 4 + 2
000f5d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000f5e e0e0     +LDI R30 , LOW ( 0x44160000 )
000f5f e0f0     +LDI R31 , HIGH ( 0x44160000 )
000f60 e166     +LDI R22 , BYTE3 ( 0x44160000 )
000f61 e474     +LDI R23 , BYTE4 ( 0x44160000 )
                 	__GETD1N 0x44160000
000f62 940e 1b0b 	CALL __CMPF12
000f64 f009      	BREQ PC+2
000f65 f410      	BRCC PC+3
000f66 940c 0f6c 	JMP  _0x11C
                +
000f68 83ec     +STD Y + 4 , R30
000f69 83fd     +STD Y + 4 + 1 , R31
000f6a 836e     +STD Y + 4 + 2 , R22
000f6b 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 03C5 
                 ; 0000 03C6     // PM10 to CAI conversion, see http://www.airkorea.or.kr/eng/cai/cai1
                 ; 0000 03C7     if ((0.0<=pm10Conc)&&(pm10Conc<31.0)) CAI=(unsigned int)(pm10Conc*5/3);
                 _0x11C:
000f6c 81ef      	LDD  R30,Y+7
000f6d 23ee      	TST  R30
000f6e f05a      	BRMI _0x11E
                +
000f6f 81ac     +LDD R26 , Y + 4
000f70 81bd     +LDD R27 , Y + 4 + 1
000f71 818e     +LDD R24 , Y + 4 + 2
000f72 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000f73 e0e0     +LDI R30 , LOW ( 0x41F80000 )
000f74 e0f0     +LDI R31 , HIGH ( 0x41F80000 )
000f75 ef68     +LDI R22 , BYTE3 ( 0x41F80000 )
000f76 e471     +LDI R23 , BYTE4 ( 0x41F80000 )
                 	__GETD1N 0x41F80000
000f77 940e 1b0b 	CALL __CMPF12
000f79 f008      	BRLO _0x11F
                 _0x11E:
000f7a c013      	RJMP _0x11D
                 _0x11F:
                +
000f7b 81ac     +LDD R26 , Y + 4
000f7c 81bd     +LDD R27 , Y + 4 + 1
000f7d 818e     +LDD R24 , Y + 4 + 2
000f7e 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000f7f e0e0     +LDI R30 , LOW ( 0x40A00000 )
000f80 e0f0     +LDI R31 , HIGH ( 0x40A00000 )
000f81 ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
000f82 e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
000f83 940e 1a78 	CALL __MULF12
000f85 01df      	MOVW R26,R30
000f86 01cb      	MOVW R24,R22
                +
000f87 e0e0     +LDI R30 , LOW ( 0x40400000 )
000f88 e0f0     +LDI R31 , HIGH ( 0x40400000 )
000f89 e460     +LDI R22 , BYTE3 ( 0x40400000 )
000f8a e470     +LDI R23 , BYTE4 ( 0x40400000 )
                 	__GETD1N 0x40400000
000f8b 940e 1ac6 	CALL __DIVF21
000f8d c096      	RJMP _0x180
                 ; 0000 03C8     else if ((31.0<=pm10Conc)&&(pm10Conc<81.0)) CAI=(unsigned int)(pm10Conc+20);
                 _0x11D:
                +
000f8e 81ec     +LDD R30 , Y + 4
000f8f 81fd     +LDD R31 , Y + 4 + 1
000f90 816e     +LDD R22 , Y + 4 + 2
000f91 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000f92 e0a0     +LDI R26 , LOW ( 0x41F80000 )
000f93 e0b0     +LDI R27 , HIGH ( 0x41F80000 )
000f94 ef88     +LDI R24 , BYTE3 ( 0x41F80000 )
000f95 e491     +LDI R25 , BYTE4 ( 0x41F80000 )
                 	__GETD2N 0x41F80000
000f96 940e 1b0b 	CALL __CMPF12
000f98 f019      	BREQ PC+4
000f99 f010      	BRCS PC+3
000f9a 940c 0fa7 	JMP  _0x122
                +
000f9c 81ac     +LDD R26 , Y + 4
000f9d 81bd     +LDD R27 , Y + 4 + 1
000f9e 818e     +LDD R24 , Y + 4 + 2
000f9f 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000fa0 e0e0     +LDI R30 , LOW ( 0x42A20000 )
000fa1 e0f0     +LDI R31 , HIGH ( 0x42A20000 )
000fa2 ea62     +LDI R22 , BYTE3 ( 0x42A20000 )
000fa3 e472     +LDI R23 , BYTE4 ( 0x42A20000 )
                 	__GETD1N 0x42A20000
000fa4 940e 1b0b 	CALL __CMPF12
000fa6 f008      	BRLO _0x123
                 _0x122:
000fa7 c009      	RJMP _0x121
                 _0x123:
                +
000fa8 81ec     +LDD R30 , Y + 4
000fa9 81fd     +LDD R31 , Y + 4 + 1
000faa 816e     +LDD R22 , Y + 4 + 2
000fab 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000fac e0a0     +LDI R26 , LOW ( 0x41A00000 )
000fad e0b0     +LDI R27 , HIGH ( 0x41A00000 )
000fae ea80     +LDI R24 , BYTE3 ( 0x41A00000 )
000faf e491     +LDI R25 , BYTE4 ( 0x41A00000 )
                 	__GETD2N 0x41A00000
000fb0 c071      	RJMP _0x181
                 ; 0000 03C9     else if ((81.0<=pm10Conc)&&(pm10Conc<151.0)) CAI=(unsigned int)((pm10Conc-81)*149/69+101);
                 _0x121:
                +
000fb1 81ec     +LDD R30 , Y + 4
000fb2 81fd     +LDD R31 , Y + 4 + 1
000fb3 816e     +LDD R22 , Y + 4 + 2
000fb4 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000fb5 e0a0     +LDI R26 , LOW ( 0x42A20000 )
000fb6 e0b0     +LDI R27 , HIGH ( 0x42A20000 )
000fb7 ea82     +LDI R24 , BYTE3 ( 0x42A20000 )
000fb8 e492     +LDI R25 , BYTE4 ( 0x42A20000 )
                 	__GETD2N 0x42A20000
000fb9 940e 1b0b 	CALL __CMPF12
000fbb f019      	BREQ PC+4
000fbc f010      	BRCS PC+3
000fbd 940c 0fca 	JMP  _0x126
                +
000fbf 81ac     +LDD R26 , Y + 4
000fc0 81bd     +LDD R27 , Y + 4 + 1
000fc1 818e     +LDD R24 , Y + 4 + 2
000fc2 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000fc3 e0e0     +LDI R30 , LOW ( 0x43170000 )
000fc4 e0f0     +LDI R31 , HIGH ( 0x43170000 )
000fc5 e167     +LDI R22 , BYTE3 ( 0x43170000 )
000fc6 e473     +LDI R23 , BYTE4 ( 0x43170000 )
                 	__GETD1N 0x43170000
000fc7 940e 1b0b 	CALL __CMPF12
000fc9 f008      	BRLO _0x127
                 _0x126:
000fca c01d      	RJMP _0x125
                 _0x127:
                +
000fcb 81ec     +LDD R30 , Y + 4
000fcc 81fd     +LDD R31 , Y + 4 + 1
000fcd 816e     +LDD R22 , Y + 4 + 2
000fce 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000fcf e0a0     +LDI R26 , LOW ( 0x42A20000 )
000fd0 e0b0     +LDI R27 , HIGH ( 0x42A20000 )
000fd1 ea82     +LDI R24 , BYTE3 ( 0x42A20000 )
000fd2 e492     +LDI R25 , BYTE4 ( 0x42A20000 )
                 	__GETD2N 0x42A20000
000fd3 940e 1a21 	CALL __SUBF12
                +
000fd5 e0a0     +LDI R26 , LOW ( 0x43150000 )
000fd6 e0b0     +LDI R27 , HIGH ( 0x43150000 )
000fd7 e185     +LDI R24 , BYTE3 ( 0x43150000 )
000fd8 e493     +LDI R25 , BYTE4 ( 0x43150000 )
                 	__GETD2N 0x43150000
000fd9 940e 1a78 	CALL __MULF12
000fdb 01df      	MOVW R26,R30
000fdc 01cb      	MOVW R24,R22
                +
000fdd e0e0     +LDI R30 , LOW ( 0x428A0000 )
000fde e0f0     +LDI R31 , HIGH ( 0x428A0000 )
000fdf e86a     +LDI R22 , BYTE3 ( 0x428A0000 )
000fe0 e472     +LDI R23 , BYTE4 ( 0x428A0000 )
                 	__GETD1N 0x428A0000
000fe1 940e 1ac6 	CALL __DIVF21
                +
000fe3 e0a0     +LDI R26 , LOW ( 0x42CA0000 )
000fe4 e0b0     +LDI R27 , HIGH ( 0x42CA0000 )
000fe5 ec8a     +LDI R24 , BYTE3 ( 0x42CA0000 )
000fe6 e492     +LDI R25 , BYTE4 ( 0x42CA0000 )
                 	__GETD2N 0x42CA0000
000fe7 c03a      	RJMP _0x181
                 ; 0000 03CA     else if ((151.0<=pm10Conc)&&(pm10Conc<=600.0)) CAI=(unsigned int)((pm10Conc-151)*249/449+251);
                 _0x125:
                +
000fe8 81ec     +LDD R30 , Y + 4
000fe9 81fd     +LDD R31 , Y + 4 + 1
000fea 816e     +LDD R22 , Y + 4 + 2
000feb 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000fec e0a0     +LDI R26 , LOW ( 0x43170000 )
000fed e0b0     +LDI R27 , HIGH ( 0x43170000 )
000fee e187     +LDI R24 , BYTE3 ( 0x43170000 )
000fef e493     +LDI R25 , BYTE4 ( 0x43170000 )
                 	__GETD2N 0x43170000
000ff0 940e 1b0b 	CALL __CMPF12
000ff2 f019      	BREQ PC+4
000ff3 f010      	BRCS PC+3
000ff4 940c 1005 	JMP  _0x12A
                +
000ff6 81ac     +LDD R26 , Y + 4
000ff7 81bd     +LDD R27 , Y + 4 + 1
000ff8 818e     +LDD R24 , Y + 4 + 2
000ff9 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000ffa e0e0     +LDI R30 , LOW ( 0x44160000 )
000ffb e0f0     +LDI R31 , HIGH ( 0x44160000 )
000ffc e166     +LDI R22 , BYTE3 ( 0x44160000 )
000ffd e474     +LDI R23 , BYTE4 ( 0x44160000 )
                 	__GETD1N 0x44160000
000ffe 940e 1b0b 	CALL __CMPF12
001000 f019      	BREQ PC+4
001001 f010      	BRCS PC+3
001002 940c 1005 	JMP  _0x12A
001004 c001      	RJMP _0x12B
                 _0x12A:
001005 c021      	RJMP _0x129
                 _0x12B:
                +
001006 81ec     +LDD R30 , Y + 4
001007 81fd     +LDD R31 , Y + 4 + 1
001008 816e     +LDD R22 , Y + 4 + 2
001009 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
00100a e0a0     +LDI R26 , LOW ( 0x43170000 )
00100b e0b0     +LDI R27 , HIGH ( 0x43170000 )
00100c e187     +LDI R24 , BYTE3 ( 0x43170000 )
00100d e493     +LDI R25 , BYTE4 ( 0x43170000 )
                 	__GETD2N 0x43170000
00100e 940e 1a21 	CALL __SUBF12
                +
001010 e0a0     +LDI R26 , LOW ( 0x43790000 )
001011 e0b0     +LDI R27 , HIGH ( 0x43790000 )
001012 e789     +LDI R24 , BYTE3 ( 0x43790000 )
001013 e493     +LDI R25 , BYTE4 ( 0x43790000 )
                 	__GETD2N 0x43790000
001014 940e 1a78 	CALL __MULF12
001016 01df      	MOVW R26,R30
001017 01cb      	MOVW R24,R22
                +
001018 e0e0     +LDI R30 , LOW ( 0x43E08000 )
001019 e8f0     +LDI R31 , HIGH ( 0x43E08000 )
00101a ee60     +LDI R22 , BYTE3 ( 0x43E08000 )
00101b e473     +LDI R23 , BYTE4 ( 0x43E08000 )
                 	__GETD1N 0x43E08000
00101c 940e 1ac6 	CALL __DIVF21
                +
00101e e0a0     +LDI R26 , LOW ( 0x437B0000 )
00101f e0b0     +LDI R27 , HIGH ( 0x437B0000 )
001020 e78b     +LDI R24 , BYTE3 ( 0x437B0000 )
001021 e493     +LDI R25 , BYTE4 ( 0x437B0000 )
                 	__GETD2N 0x437B0000
                 _0x181:
001022 940e 1a28 	CALL __ADDF12
                 _0x180:
001024 940e 19b5 	CALL __CFD1U
001026 019f      	MOVW R18,R30
                 ; 0000 03CB     return CAI;
                 _0x129:
001027 01f9      	MOVW R30,R18
001028 940e 1c58 	CALL __LOADLOCR4
00102a 96ef      	ADIW R28,63
00102b 9625      	ADIW R28,5
00102c 9508      	RET
                 ; 0000 03CC 
                 ; 0000 03CD     //return (unsigned int)(measuredValue*0.03528); // pm10 concentration in ug/mm3
                 ; 0000 03CE }
                 ;
                 ;char SHT_WriteByte(unsigned char bytte)
                 ; 0000 03D1 {
                 _SHT_WriteByte:
                 ; 0000 03D2     unsigned char i,error=0;
                 ; 0000 03D3     DDRC = 0b00000011;    //
00102d 931a      	ST   -Y,R17
00102e 930a      	ST   -Y,R16
                 ;	bytte -> Y+2
                 ;	i -> R17
                 ;	error -> R16
00102f e000      	LDI  R16,0
001030 e0e3      	LDI  R30,LOW(3)
001031 b9e7      	OUT  0x7,R30
                 ; 0000 03D4     for (i=0x80;i>0;i/=2) //shift bit for masking
001032 e810      	LDI  R17,LOW(128)
                 _0x12D:
001033 3011      	CPI  R17,1
001034 f098      	BRLO _0x12E
                 ; 0000 03D5         {
                 ; 0000 03D6             if (i & bytte)
001035 81ea      	LDD  R30,Y+2
001036 23e1      	AND  R30,R17
001037 f011      	BREQ _0x12F
                 ; 0000 03D7             DATA_OUT=1; //masking value with i , write to SENSI-BUS
001038 9a40      	SBI  0x8,0
                 ; 0000 03D8             else DATA_OUT=0;
001039 c001      	RJMP _0x132
                 _0x12F:
00103a 9840      	CBI  0x8,0
                 ; 0000 03D9             SCK=1;      //clk for SENSI-BUS
                 _0x132:
00103b 9a41      	SBI  0x8,1
                 ; 0000 03DA             delay_us(5); //pulswith approx. 5 us
                +
00103c e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00103d 958a     +DEC R24
00103e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 03DB             SCK=0;
00103f 9841      	CBI  0x8,1
                 ; 0000 03DC         }
001040 2fa1      	MOV  R26,R17
001041 e0b0      	LDI  R27,0
001042 e0e2      	LDI  R30,LOW(2)
001043 e0f0      	LDI  R31,HIGH(2)
001044 940e 1ba9 	CALL __DIVW21
001046 2f1e      	MOV  R17,R30
001047 cfeb      	RJMP _0x12D
                 _0x12E:
                 ; 0000 03DD     DATA_OUT=1;            //release dataline
001048 9a40      	SBI  0x8,0
                 ; 0000 03DE     DDRC = 0b00000010;    // DATA is Output
001049 e0e2      	LDI  R30,LOW(2)
00104a b9e7      	OUT  0x7,R30
                 ; 0000 03DF     SCK=1;                //clk #9 for ack
00104b 9a41      	SBI  0x8,1
                 ; 0000 03E0     delay_us(2);
                +
00104c e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00104d 958a     +DEC R24
00104e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 03E1     error=DATA_IN;       //check ack (DATA will be pulled down by SHT11)
00104f e0e0      	LDI  R30,0
001050 9930      	SBIC 0x6,0
001051 e0e1      	LDI  R30,1
001052 2f0e      	MOV  R16,R30
                 ; 0000 03E2     delay_us(2);
                +
001053 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
001054 958a     +DEC R24
001055 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 03E3     SCK=0;
001056 9841      	CBI  0x8,1
                 ; 0000 03E4     return error;       //error=1 in case of no acknowledge
001057 2fe0      	MOV  R30,R16
001058 8119      	LDD  R17,Y+1
001059 8108      	LDD  R16,Y+0
00105a c1e6      	RJMP _0x20A0008
                 ; 0000 03E5 }
                 ;
                 ;char SHT_ReadByte(unsigned char ack)
                 ; 0000 03E8 {
                 _SHT_ReadByte:
                 ; 0000 03E9     unsigned char i,val=0;
                 ; 0000 03EA     DDRC = 0b00000010;    // DATA is Input
00105b 931a      	ST   -Y,R17
00105c 930a      	ST   -Y,R16
                 ;	ack -> Y+2
                 ;	i -> R17
                 ;	val -> R16
00105d e000      	LDI  R16,0
00105e e0e2      	LDI  R30,LOW(2)
00105f b9e7      	OUT  0x7,R30
                 ; 0000 03EB     for (i=0x80;i>0;i/=2)             //shift bit for masking
001060 e810      	LDI  R17,LOW(128)
                 _0x140:
001061 3011      	CPI  R17,1
001062 f090      	BRLO _0x141
                 ; 0000 03EC         {
                 ; 0000 03ED             SCK=1;                          //clk for SENSI-BUS
001063 9a41      	SBI  0x8,1
                 ; 0000 03EE             delay_us(2);
                +
001064 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
001065 958a     +DEC R24
001066 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 03EF             if (DATA_IN) val=(val | i);        //read bit
001067 9930      	SBIC 0x6,0
001068 2b01      	OR   R16,R17
                 ; 0000 03F0             delay_us(2);
                +
001069 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00106a 958a     +DEC R24
00106b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 03F1             SCK=0;
00106c 9841      	CBI  0x8,1
                 ; 0000 03F2         }
00106d 2fa1      	MOV  R26,R17
00106e e0b0      	LDI  R27,0
00106f e0e2      	LDI  R30,LOW(2)
001070 e0f0      	LDI  R31,HIGH(2)
001071 940e 1ba9 	CALL __DIVW21
001073 2f1e      	MOV  R17,R30
001074 cfec      	RJMP _0x140
                 _0x141:
                 ; 0000 03F3     DDRC = 0b00000011;    // DATA is Output
001075 e0e3      	LDI  R30,LOW(3)
001076 b9e7      	OUT  0x7,R30
                 ; 0000 03F4     DATA_OUT=!ack;        //in case of "ack==1" pull down DATA-Line
001077 81ea      	LDD  R30,Y+2
001078 30e0      	CPI  R30,0
001079 f011      	BREQ _0x147
00107a 9840      	CBI  0x8,0
00107b c001      	RJMP _0x148
                 _0x147:
00107c 9a40      	SBI  0x8,0
                 _0x148:
                 ; 0000 03F5     SCK=1;                //clk #9 for ack
00107d 9a41      	SBI  0x8,1
                 ; 0000 03F6     delay_us(5);          //pulswith approx. 5 us
                +
00107e e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00107f 958a     +DEC R24
001080 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 03F7     SCK=0;
001081 9841      	CBI  0x8,1
                 ; 0000 03F8     DATA_OUT=1;           //release DATA-line  //ADD BY LUBING
001082 9a40      	SBI  0x8,0
                 ; 0000 03F9     return val;
001083 2fe0      	MOV  R30,R16
001084 8119      	LDD  R17,Y+1
001085 8108      	LDD  R16,Y+0
001086 c1ba      	RJMP _0x20A0008
                 ; 0000 03FA }
                 ;
                 ;void SHT_Transstart(void)
                 ; 0000 03FD {
                 _SHT_Transstart:
                 ; 0000 03FE     DDRC = 0b00000011;    // DATA is Output
001087 e0e3      	LDI  R30,LOW(3)
001088 b9e7      	OUT  0x7,R30
                 ; 0000 03FF     DATA_OUT=1; SCK=0;   //Initial state
001089 9a40      	SBI  0x8,0
00108a 9841      	CBI  0x8,1
                 ; 0000 0400     delay_us(2);
                +
00108b e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00108c 958a     +DEC R24
00108d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 0401     SCK=1;
00108e 9a41      	SBI  0x8,1
                 ; 0000 0402     delay_us(2);
                +
00108f e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
001090 958a     +DEC R24
001091 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 0403     DATA_OUT=0;
001092 9840      	CBI  0x8,0
                 ; 0000 0404     delay_us(2);
                +
001093 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
001094 958a     +DEC R24
001095 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 0405     SCK=0;
001096 9841      	CBI  0x8,1
                 ; 0000 0406     delay_us(5);
                +
001097 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
001098 958a     +DEC R24
001099 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0407     SCK=1;
00109a 9a41      	SBI  0x8,1
                 ; 0000 0408     delay_us(2);
                +
00109b e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00109c 958a     +DEC R24
00109d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 0409     DATA_OUT=1;
00109e 9a40      	SBI  0x8,0
                 ; 0000 040A     delay_us(2);
                +
00109f e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
0010a0 958a     +DEC R24
0010a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 040B     SCK=0;
0010a2 9841      	CBI  0x8,1
                 ; 0000 040C     DDRC = 0b00000010;    // DATA is Input
0010a3 e0e2      	LDI  R30,LOW(2)
0010a4 b9e7      	OUT  0x7,R30
                 ; 0000 040D }
0010a5 9508      	RET
                 ;
                 ;void SHT_ConnectionRest(void)
                 ; 0000 0410 {
                 _SHT_ConnectionRest:
                 ; 0000 0411     unsigned char i;
                 ; 0000 0412     DDRC = 0b00000011;    // DATA is output
0010a6 931a      	ST   -Y,R17
                 ;	i -> R17
0010a7 e0e3      	LDI  R30,LOW(3)
0010a8 b9e7      	OUT  0x7,R30
                 ; 0000 0413     DATA_OUT=1; SCK=0;                    //Initial state
0010a9 9a40      	SBI  0x8,0
0010aa 9841      	CBI  0x8,1
                 ; 0000 0414     for(i=0;i<9;i++)                  //9 SCK cycles
0010ab e010      	LDI  R17,LOW(0)
                 _0x164:
0010ac 3019      	CPI  R17,9
0010ad f450      	BRSH _0x165
                 ; 0000 0415         {
                 ; 0000 0416             SCK=1;
0010ae 9a41      	SBI  0x8,1
                 ; 0000 0417             delay_us(1);
                +
0010af e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0010b0 958a     +DEC R24
0010b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 0418             SCK=0;
0010b2 9841      	CBI  0x8,1
                 ; 0000 0419             delay_us(1);
                +
0010b3 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0010b4 958a     +DEC R24
0010b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 041A         }
0010b6 5f1f      	SUBI R17,-1
0010b7 cff4      	RJMP _0x164
                 _0x165:
                 ; 0000 041B     SHT_Transstart();                   //transmission start
0010b8 dfce      	RCALL _SHT_Transstart
                 ; 0000 041C     DDRC = 0b00000010;    // DATA is Input
0010b9 e0e2      	LDI  R30,LOW(2)
0010ba b9e7      	OUT  0x7,R30
                 ; 0000 041D }
0010bb c008      	RJMP _0x20A0009
                 ;
                 ;char SHT_SoftRst(void)
                 ; 0000 0420 {
                 _SHT_SoftRst:
                 ; 0000 0421     unsigned char error=0;
                 ; 0000 0422     SHT_ConnectionRest();              //reset communication
0010bc 931a      	ST   -Y,R17
                 ;	error -> R17
0010bd e010      	LDI  R17,0
0010be dfe7      	RCALL _SHT_ConnectionRest
                 ; 0000 0423     error+=SHT_WriteByte(RESET);       //send RESET-command to sensor
0010bf e1ee      	LDI  R30,LOW(30)
0010c0 93ea      	ST   -Y,R30
0010c1 df6b      	RCALL _SHT_WriteByte
0010c2 0f1e      	ADD  R17,R30
                 ; 0000 0424     return error;                     //error=1 in case of no response form the sensor
0010c3 2fe1      	MOV  R30,R17
                 _0x20A0009:
0010c4 9119      	LD   R17,Y+
0010c5 9508      	RET
                 ; 0000 0425 }
                 ;
                 ;char SHT_Read_StatusReg(unsigned char *p_value, unsigned char *p_checksum)
                 ; 0000 0428 {
                 _SHT_Read_StatusReg:
                 ; 0000 0429     unsigned char error=0;
                 ; 0000 042A     SHT_Transstart();                   //transmission start
0010c6 931a      	ST   -Y,R17
                 ;	*p_value -> Y+3
                 ;	*p_checksum -> Y+1
                 ;	error -> R17
0010c7 e010      	LDI  R17,0
0010c8 dfbe      	RCALL _SHT_Transstart
                 ; 0000 042B     error=SHT_WriteByte(STATUS_REG_R); //send command to sensor
0010c9 e0e7      	LDI  R30,LOW(7)
0010ca 93ea      	ST   -Y,R30
0010cb df61      	RCALL _SHT_WriteByte
0010cc 2f1e      	MOV  R17,R30
                 ; 0000 042C     *p_value=SHT_ReadByte(ACK);        //read status register (8-bit)
0010cd e0e1      	LDI  R30,LOW(1)
0010ce 93ea      	ST   -Y,R30
0010cf df8b      	RCALL _SHT_ReadByte
0010d0 81ab      	LDD  R26,Y+3
0010d1 81bc      	LDD  R27,Y+3+1
0010d2 93ec      	ST   X,R30
                 ; 0000 042D     *p_checksum=SHT_ReadByte(noACK);   //read checksum (8-bit)
0010d3 e0e0      	LDI  R30,LOW(0)
0010d4 93ea      	ST   -Y,R30
0010d5 df85      	RCALL _SHT_ReadByte
0010d6 81a9      	LDD  R26,Y+1
0010d7 81ba      	LDD  R27,Y+1+1
0010d8 93ec      	ST   X,R30
                 ; 0000 042E     return error;                     //error=1 in case of no response form the sensor
0010d9 2fe1      	MOV  R30,R17
0010da 8118      	LDD  R17,Y+0
0010db 940c 1760 	JMP  _0x20A0005
                 ; 0000 042F }
                 ;
                 ;char SHT_Write_StatusReg(unsigned char *p_value)
                 ; 0000 0432 {
                 ; 0000 0433     unsigned char error=0;
                 ; 0000 0434     SHT_Transstart();                   //transmission start
                 ;	*p_value -> Y+1
                 ;	error -> R17
                 ; 0000 0435     error+=SHT_WriteByte(STATUS_REG_W);//send command to sensor
                 ; 0000 0436     error+=SHT_WriteByte(*p_value);    //send value of status register
                 ; 0000 0437     return error;                     //error>=1 in case of no response form the sensor
                 ; 0000 0438 }
                 ;
                 ;char SHT_Measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
                 ; 0000 043B {
                 _SHT_Measure:
                 ; 0000 043C     unsigned error=0;
                 ; 0000 043D     unsigned int temp=0;
                 ; 0000 043E     SHT_Transstart();                   //transmission start
0010dd 940e 1c51 	CALL __SAVELOCR4
                 ;	*p_value -> Y+7
                 ;	*p_checksum -> Y+5
                 ;	mode -> Y+4
                 ;	error -> R16,R17
                 ;	temp -> R18,R19
                +
0010df e000     +LDI R16 , LOW ( 0 )
0010e0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0010e1 e020     +LDI R18 , LOW ( 0 )
0010e2 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0010e3 dfa3      	RCALL _SHT_Transstart
                 ; 0000 043F     switch(mode)
0010e4 81ec      	LDD  R30,Y+4
0010e5 e0f0      	LDI  R31,0
                 ; 0000 0440         {                     //send command to sensor
                 ; 0000 0441             case TEMP : error+=SHT_WriteByte(MEASURE_TEMP); break;
0010e6 9730      	SBIW R30,0
0010e7 f439      	BRNE _0x16D
0010e8 e0e3      	LDI  R30,LOW(3)
0010e9 93ea      	ST   -Y,R30
0010ea df42      	RCALL _SHT_WriteByte
0010eb e0f0      	LDI  R31,0
                +
0010ec 0f0e     +ADD R16 , R30
0010ed 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
0010ee c00a      	RJMP _0x16C
                 ; 0000 0442             case HUMI : error+=SHT_WriteByte(MEASURE_HUMI); break;
                 _0x16D:
0010ef 30e1      	CPI  R30,LOW(0x1)
0010f0 e0a0      	LDI  R26,HIGH(0x1)
0010f1 07fa      	CPC  R31,R26
0010f2 f431      	BRNE _0x16F
0010f3 e0e5      	LDI  R30,LOW(5)
0010f4 93ea      	ST   -Y,R30
0010f5 df37      	RCALL _SHT_WriteByte
0010f6 e0f0      	LDI  R31,0
                +
0010f7 0f0e     +ADD R16 , R30
0010f8 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 ; 0000 0443             default      : break;
                 _0x16F:
                 ; 0000 0444         }
                 _0x16C:
                 ; 0000 0445     DDRC = 0b00000010;    // DATA is input
0010f9 e0e2      	LDI  R30,LOW(2)
0010fa b9e7      	OUT  0x7,R30
                 ; 0000 0446     while (1)
                 _0x170:
                 ; 0000 0447         {
                 ; 0000 0448             if(DATA_IN==0) break; //wait until sensor has finished the measurement
0010fb 9b30      	SBIS 0x6,0
0010fc c001      	RJMP _0x172
                 ; 0000 0449         }
0010fd cffd      	RJMP _0x170
                 _0x172:
                 ; 0000 044A     if(DATA_IN) error+=1;                // or timeout (~2 sec.) is reached
0010fe 9b30      	SBIS 0x6,0
0010ff c002      	RJMP _0x174
                +
001100 5f0f     +SUBI R16 , LOW ( - 1 )
001101 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 044B     switch(mode)
                 _0x174:
001102 81ec      	LDD  R30,Y+4
001103 e0f0      	LDI  R31,0
                 ; 0000 044C         {                     //send command to sensor
                 ; 0000 044D             case TEMP : temp=0;
001104 9730      	SBIW R30,0
001105 f501      	BRNE _0x178
                +
001106 e020     +LDI R18 , LOW ( 0 )
001107 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 044E                                 temp=SHT_ReadByte(ACK);
001108 e0e1      	LDI  R30,LOW(1)
001109 93ea      	ST   -Y,R30
00110a df50      	RCALL _SHT_ReadByte
00110b 2f2e      	MOV  R18,R30
00110c 2733      	CLR  R19
                 ; 0000 044F                                 temp<<=8;
00110d 2f32      	MOV  R19,R18
00110e 2722      	CLR  R18
                 ; 0000 0450                                 tempervalue[0]=temp;
                +
00110f 9320 1478+STS _tempervalue + ( 0 ) , R18
001111 9330 1479+STS _tempervalue + ( 0 ) + 1 , R19
                 	__PUTWMRN _tempervalue,0,18,19
                 ; 0000 0451                                 temp=0;
                +
001113 e020     +LDI R18 , LOW ( 0 )
001114 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0452                                 temp=SHT_ReadByte(ACK);
001115 e0e1      	LDI  R30,LOW(1)
001116 93ea      	ST   -Y,R30
001117 df43      	RCALL _SHT_ReadByte
001118 2f2e      	MOV  R18,R30
001119 2733      	CLR  R19
                 ; 0000 0453                                 tempervalue[0]|=temp;
00111a 01f9      	MOVW R30,R18
00111b 91a0 1478 	LDS  R26,_tempervalue
00111d 91b0 1479 	LDS  R27,_tempervalue+1
00111f 2bea      	OR   R30,R26
001120 2bfb      	OR   R31,R27
001121 93e0 1478 	STS  _tempervalue,R30
001123 93f0 1479 	STS  _tempervalue+1,R31
                 ; 0000 0454                                 break;
001125 c022      	RJMP _0x177
                 ; 0000 0455             case HUMI : temp=0;
                 _0x178:
001126 30e1      	CPI  R30,LOW(0x1)
001127 e0a0      	LDI  R26,HIGH(0x1)
001128 07fa      	CPC  R31,R26
001129 f4f1      	BRNE _0x17A
                +
00112a e020     +LDI R18 , LOW ( 0 )
00112b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0456                                 temp=SHT_ReadByte(ACK);
00112c e0e1      	LDI  R30,LOW(1)
00112d 93ea      	ST   -Y,R30
00112e df2c      	RCALL _SHT_ReadByte
00112f 2f2e      	MOV  R18,R30
001130 2733      	CLR  R19
                 ; 0000 0457                                 temp<<=8;
001131 2f32      	MOV  R19,R18
001132 2722      	CLR  R18
                 ; 0000 0458                                 tempervalue[1]=temp;
                +
001133 e7ea     +LDI R30 , LOW ( _tempervalue + ( 2 ) )
001134 e1f4     +LDI R31 , HIGH ( _tempervalue + ( 2 ) )
                 	__POINTW1MN _tempervalue,2
001135 8320      	ST   Z,R18
001136 8331      	STD  Z+1,R19
                 ; 0000 0459                                 temp=0;
                +
001137 e020     +LDI R18 , LOW ( 0 )
001138 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 045A                                 temp=SHT_ReadByte(ACK);
001139 e0e1      	LDI  R30,LOW(1)
00113a 93ea      	ST   -Y,R30
00113b df1f      	RCALL _SHT_ReadByte
00113c 2f2e      	MOV  R18,R30
00113d 2733      	CLR  R19
                 ; 0000 045B                                 tempervalue[1]|=temp;
                +
00113e 91e0 147a+LDS R30 , _tempervalue + ( 2 )
001140 91f0 147b+LDS R31 , _tempervalue + ( 2 ) + 1
                 	__GETW1MN _tempervalue,2
001142 2be2      	OR   R30,R18
001143 2bf3      	OR   R31,R19
                +
001144 93e0 147a+STS _tempervalue + ( 2 ) , R30
001146 93f0 147b+STS _tempervalue + ( 2 ) + 1 , R31
                 	__PUTW1MN _tempervalue,2
                 ; 0000 045C                                 break;
                 ; 0000 045D             default      : break;
                 _0x17A:
                 ; 0000 045E         }
                 _0x177:
                 ; 0000 045F     *p_checksum =SHT_ReadByte(noACK);  //read checksum
001148 e0e0      	LDI  R30,LOW(0)
001149 93ea      	ST   -Y,R30
00114a df10      	RCALL _SHT_ReadByte
00114b 81ad      	LDD  R26,Y+5
00114c 81be      	LDD  R27,Y+5+1
00114d 93ec      	ST   X,R30
                 ; 0000 0460     return error;
00114e 2fe0      	MOV  R30,R16
00114f 940e 1c58 	CALL __LOADLOCR4
001151 9629      	ADIW R28,9
001152 9508      	RET
                 ; 0000 0461 }
                 ;
                 ;float Calc_SHT71(float p_humidity ,float *p_temperature)
                 ; 0000 0464 {
                 _Calc_SHT71:
                 ; 0000 0465     const float C1=-4.0;              // for 12 Bit
                 ; 0000 0466     const float C2=+0.0405;           // for 12 Bit
                 ; 0000 0467     const float C3=-0.0000028;        // for 12 Bit
                 ; 0000 0468     const float T1=+0.01;             // for 14 Bit @ 5V
                 ; 0000 0469     const float T2=+0.00008;           // for 14 Bit @ 5V
                 ; 0000 046A     float rh_lin;                     // rh_lin:  Humidity linear
                 ; 0000 046B     float rh_true;                    // rh_true: Temperature compensated humidity
                 ; 0000 046C     float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
                 ; 0000 046D     float rh=p_humidity;             // rh:      Humidity [Ticks] 12 Bit
                 ; 0000 046E     float t_C;                        // t_C   :  Temperature [?]
                 ; 0000 046F     t_C=t*0.01 - 40;                  //calc. temperature from ticks to [?]
001153 97a8      	SBIW R28,40
001154 e184      	LDI  R24,20
001155 e1a4      	LDI  R26,LOW(20)
001156 e0b0      	LDI  R27,HIGH(20)
001157 e3e6      	LDI  R30,LOW(_0x17B*2)
001158 e0f1      	LDI  R31,HIGH(_0x17B*2)
001159 940e 1c5d 	CALL __INITLOCB
                 ;	p_humidity -> Y+42
                 ;	*p_temperature -> Y+40
                 ;	C1 -> Y+36
                 ;	C2 -> Y+32
                 ;	C3 -> Y+28
                 ;	T1 -> Y+24
                 ;	T2 -> Y+20
                 ;	rh_lin -> Y+16
                 ;	rh_true -> Y+12
                 ;	t -> Y+8
                 ;	rh -> Y+4
                 ;	t_C -> Y+0
00115b a5a8      	LDD  R26,Y+40
00115c a5b9      	LDD  R27,Y+40+1
00115d 940e 1c0f 	CALL __GETD1P
                +
00115f 87e8     +STD Y + 8 , R30
001160 87f9     +STD Y + 8 + 1 , R31
001161 876a     +STD Y + 8 + 2 , R22
001162 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                +
001163 a5ea     +LDD R30 , Y + 42
001164 a5fb     +LDD R31 , Y + 42 + 1
001165 a56c     +LDD R22 , Y + 42 + 2
001166 a57d     +LDD R23 , Y + 42 + 3
                 	__GETD1S 42
                +
001167 83ec     +STD Y + 4 , R30
001168 83fd     +STD Y + 4 + 1 , R31
001169 836e     +STD Y + 4 + 2 , R22
00116a 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                +
00116b 85a8     +LDD R26 , Y + 8
00116c 85b9     +LDD R27 , Y + 8 + 1
00116d 858a     +LDD R24 , Y + 8 + 2
00116e 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
                +
00116f e0ea     +LDI R30 , LOW ( 0x3C23D70A )
001170 edf7     +LDI R31 , HIGH ( 0x3C23D70A )
001171 e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
001172 e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
001173 940e 1a78 	CALL __MULF12
001175 01df      	MOVW R26,R30
001176 01cb      	MOVW R24,R22
                +
001177 e0e0     +LDI R30 , LOW ( 0x42200000 )
001178 e0f0     +LDI R31 , HIGH ( 0x42200000 )
001179 e260     +LDI R22 , BYTE3 ( 0x42200000 )
00117a e472     +LDI R23 , BYTE4 ( 0x42200000 )
                 	__GETD1N 0x42200000
00117b 940e 1c33 	CALL __SWAPD12
00117d 940e 1a21 	CALL __SUBF12
00117f 940e 1c29 	CALL __PUTD1S0
                 ; 0000 0470     rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
                +
001181 81ec     +LDD R30 , Y + 4
001182 81fd     +LDD R31 , Y + 4 + 1
001183 816e     +LDD R22 , Y + 4 + 2
001184 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
001185 eaa2     +LDI R26 , LOW ( 0xB63BE7A2 )
001186 eeb7     +LDI R27 , HIGH ( 0xB63BE7A2 )
001187 e38b     +LDI R24 , BYTE3 ( 0xB63BE7A2 )
001188 eb96     +LDI R25 , BYTE4 ( 0xB63BE7A2 )
                 	__GETD2N 0xB63BE7A2
001189 940e 1a78 	CALL __MULF12
                +
00118b 81ac     +LDD R26 , Y + 4
00118c 81bd     +LDD R27 , Y + 4 + 1
00118d 818e     +LDD R24 , Y + 4 + 2
00118e 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00118f 940e 1a78 	CALL __MULF12
001191 937f      	PUSH R23
001192 936f      	PUSH R22
001193 93ff      	PUSH R31
001194 93ef      	PUSH R30
                +
001195 81ec     +LDD R30 , Y + 4
001196 81fd     +LDD R31 , Y + 4 + 1
001197 816e     +LDD R22 , Y + 4 + 2
001198 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
001199 e5a4     +LDI R26 , LOW ( 0x3D25E354 )
00119a eeb3     +LDI R27 , HIGH ( 0x3D25E354 )
00119b e285     +LDI R24 , BYTE3 ( 0x3D25E354 )
00119c e39d     +LDI R25 , BYTE4 ( 0x3D25E354 )
                 	__GETD2N 0x3D25E354
00119d 940e 1a78 	CALL __MULF12
00119f 91af      	POP  R26
0011a0 91bf      	POP  R27
0011a1 918f      	POP  R24
0011a2 919f      	POP  R25
0011a3 940e 1a28 	CALL __ADDF12
                +
0011a5 e0a0     +LDI R26 , LOW ( 0xC0800000 )
0011a6 e0b0     +LDI R27 , HIGH ( 0xC0800000 )
0011a7 e880     +LDI R24 , BYTE3 ( 0xC0800000 )
0011a8 ec90     +LDI R25 , BYTE4 ( 0xC0800000 )
                 	__GETD2N 0xC0800000
0011a9 940e 1a28 	CALL __ADDF12
                +
0011ab 8be8     +STD Y + 16 , R30
0011ac 8bf9     +STD Y + 16 + 1 , R31
0011ad 8b6a     +STD Y + 16 + 2 , R22
0011ae 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
                 ; 0000 0471     rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //calc. temperature compensated humidity [%RH]
0011af 940e 1c24 	CALL __GETD1S0
                +
0011b1 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0011b2 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0011b3 ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0011b4 e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0011b5 940e 1a21 	CALL __SUBF12
0011b7 937f      	PUSH R23
0011b8 936f      	PUSH R22
0011b9 93ff      	PUSH R31
0011ba 93ef      	PUSH R30
                +
0011bb 81ec     +LDD R30 , Y + 4
0011bc 81fd     +LDD R31 , Y + 4 + 1
0011bd 816e     +LDD R22 , Y + 4 + 2
0011be 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
0011bf eaac     +LDI R26 , LOW ( 0x38A7C5AC )
0011c0 ecb5     +LDI R27 , HIGH ( 0x38A7C5AC )
0011c1 ea87     +LDI R24 , BYTE3 ( 0x38A7C5AC )
0011c2 e398     +LDI R25 , BYTE4 ( 0x38A7C5AC )
                 	__GETD2N 0x38A7C5AC
0011c3 940e 1a78 	CALL __MULF12
                +
0011c5 e0aa     +LDI R26 , LOW ( 0x3C23D70A )
0011c6 edb7     +LDI R27 , HIGH ( 0x3C23D70A )
0011c7 e283     +LDI R24 , BYTE3 ( 0x3C23D70A )
0011c8 e39c     +LDI R25 , BYTE4 ( 0x3C23D70A )
                 	__GETD2N 0x3C23D70A
0011c9 940e 1a28 	CALL __ADDF12
0011cb 91af      	POP  R26
0011cc 91bf      	POP  R27
0011cd 918f      	POP  R24
0011ce 919f      	POP  R25
0011cf 940e 1a78 	CALL __MULF12
                +
0011d1 89a8     +LDD R26 , Y + 16
0011d2 89b9     +LDD R27 , Y + 16 + 1
0011d3 898a     +LDD R24 , Y + 16 + 2
0011d4 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0011d5 940e 1a28 	CALL __ADDF12
                +
0011d7 87ec     +STD Y + 12 , R30
0011d8 87fd     +STD Y + 12 + 1 , R31
0011d9 876e     +STD Y + 12 + 2 , R22
0011da 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 0472     if(rh_true>100)rh_true=100;       //cut if the value is outside of
                +
0011db 85ac     +LDD R26 , Y + 12
0011dc 85bd     +LDD R27 , Y + 12 + 1
0011dd 858e     +LDD R24 , Y + 12 + 2
0011de 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
0011df e0e0     +LDI R30 , LOW ( 0x42C80000 )
0011e0 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
0011e1 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
0011e2 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
0011e3 940e 1b0b 	CALL __CMPF12
0011e5 f009      	BREQ PC+2
0011e6 f410      	BRCC PC+3
0011e7 940c 11ed 	JMP  _0x17C
                +
0011e9 87ec     +STD Y + 12 , R30
0011ea 87fd     +STD Y + 12 + 1 , R31
0011eb 876e     +STD Y + 12 + 2 , R22
0011ec 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 0473     if(rh_true<0.1)rh_true=0.1;       //the physical possible range
                 _0x17C:
                +
0011ed 85ac     +LDD R26 , Y + 12
0011ee 85bd     +LDD R27 , Y + 12 + 1
0011ef 858e     +LDD R24 , Y + 12 + 2
0011f0 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
0011f1 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0011f2 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0011f3 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0011f4 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0011f5 940e 1b0b 	CALL __CMPF12
0011f7 f420      	BRSH _0x17D
                +
0011f8 87ec     +STD Y + 12 , R30
0011f9 87fd     +STD Y + 12 + 1 , R31
0011fa 876e     +STD Y + 12 + 2 , R22
0011fb 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 0474     *p_temperature=t_C;               //return temperature [?]
                 _0x17D:
0011fc 940e 1c24 	CALL __GETD1S0
0011fe a5a8      	LDD  R26,Y+40
0011ff a5b9      	LDD  R27,Y+40+1
001200 940e 1c1a 	CALL __PUTDP1
                 ; 0000 0475     return rh_true;
                +
001202 85ec     +LDD R30 , Y + 12
001203 85fd     +LDD R31 , Y + 12 + 1
001204 856e     +LDD R22 , Y + 12 + 2
001205 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
001206 96ae      	ADIW R28,46
001207 9508      	RET
                 ; 0000 0476 }
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _gets:
001208 940e 1c4f 	CALL __SAVELOCR6
                +
00120a 810e     +LDD R16 , Y + 6
00120b 811f     +LDD R17 , Y + 6 + 1
                 	__GETWRS 16,17,6
                +
00120c 8528     +LDD R18 , Y + 8
00120d 8539     +LDD R19 , Y + 8 + 1
                 	__GETWRS 18,19,8
                 _0x2000009:
00120e 2e00      	MOV  R0,R16
00120f 2a01      	OR   R0,R17
001210 f0e1      	BREQ _0x200000B
                 _0x200000C:
001211 940e 04b4 	CALL _getchar
001213 2f5e      	MOV  R21,R30
001214 3058      	CPI  R21,8
001215 f451      	BRNE _0x200000D
001216 81ae      	LDD  R26,Y+6
001217 81bf      	LDD  R27,Y+6+1
001218 170a      	CP   R16,R26
001219 071b      	CPC  R17,R27
00121a f420      	BRSH _0x200000E
                +
00121b 5021     +SUBI R18 , LOW ( 1 )
00121c 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                +
00121d 5f0f     +SUBI R16 , LOW ( - 1 )
00121e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 _0x200000E:
00121f cff1      	RJMP _0x200000C
                 _0x200000D:
001220 305a      	CPI  R21,10
001221 f059      	BREQ _0x200000B
001222 933f      	PUSH R19
001223 932f      	PUSH R18
                +
001224 5f2f     +SUBI R18 , LOW ( - 1 )
001225 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
001226 2fe5      	MOV  R30,R21
001227 91af      	POP  R26
001228 91bf      	POP  R27
001229 93ec      	ST   X,R30
                +
00122a 5001     +SUBI R16 , LOW ( 1 )
00122b 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00122c cfe1      	RJMP _0x2000009
                 _0x200000B:
00122d 01d9      	MOVW R26,R18
00122e e0e0      	LDI  R30,LOW(0)
00122f 93ec      	ST   X,R30
001230 85e8      	LDD  R30,Y+8
001231 85f9      	LDD  R31,Y+8+1
001232 940e 1c56 	CALL __LOADLOCR6
001234 962a      	ADIW R28,10
001235 9508      	RET
                 _put_usart_G100:
001236 81ea      	LDD  R30,Y+2
001237 93ea      	ST   -Y,R30
001238 940e 0539 	CALL _putchar
00123a 81a8      	LD   R26,Y
00123b 81b9      	LDD  R27,Y+1
00123c 91ed      	LD   R30,X+
00123d 91fd      	LD   R31,X+
00123e 9631      	ADIW R30,1
00123f 93fe      	ST   -X,R31
001240 93ee      	ST   -X,R30
                 _0x20A0008:
001241 9623      	ADIW R28,3
001242 9508      	RET
                 _put_buff_G100:
001243 931a      	ST   -Y,R17
001244 930a      	ST   -Y,R16
001245 81aa      	LDD  R26,Y+2
001246 81bb      	LDD  R27,Y+2+1
001247 9612      	ADIW R26,2
001248 940e 1c0b 	CALL __GETW1P
00124a 9730      	SBIW R30,0
00124b f159      	BREQ _0x2000010
00124c 81aa      	LDD  R26,Y+2
00124d 81bb      	LDD  R27,Y+2+1
00124e 9614      	ADIW R26,4
00124f 940e 1c0b 	CALL __GETW1P
001251 018f      	MOVW R16,R30
001252 9730      	SBIW R30,0
001253 f061      	BREQ _0x2000012
                +
001254 3002     +CPI R16 , LOW ( 2 )
001255 e0e0     +LDI R30 , HIGH ( 2 )
001256 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
001257 f0f0      	BRLO _0x2000013
001258 01f8      	MOVW R30,R16
001259 9731      	SBIW R30,1
00125a 018f      	MOVW R16,R30
                +
00125b 81aa     +LDD R26 , Y + 2
00125c 81bb     +LDD R27 , Y + 2 + 1
00125d 9614     +ADIW R26 , 4
00125e 93ed     +ST X + , R30
00125f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
001260 81aa      	LDD  R26,Y+2
001261 81bb      	LDD  R27,Y+2+1
001262 9612      	ADIW R26,2
001263 91ed      	LD   R30,X+
001264 91fd      	LD   R31,X+
001265 9631      	ADIW R30,1
001266 93fe      	ST   -X,R31
001267 93ee      	ST   -X,R30
001268 9731      	SBIW R30,1
001269 81ac      	LDD  R26,Y+4
00126a 83a0      	STD  Z+0,R26
00126b 81aa      	LDD  R26,Y+2
00126c 81bb      	LDD  R27,Y+2+1
00126d 940e 1c0b 	CALL __GETW1P
00126f 23ff      	TST  R31
001270 f02a      	BRMI _0x2000014
001271 91ed      	LD   R30,X+
001272 91fd      	LD   R31,X+
001273 9631      	ADIW R30,1
001274 93fe      	ST   -X,R31
001275 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
001276 c006      	RJMP _0x2000015
                 _0x2000010:
001277 81aa      	LDD  R26,Y+2
001278 81bb      	LDD  R27,Y+2+1
001279 efef      	LDI  R30,LOW(65535)
00127a efff      	LDI  R31,HIGH(65535)
00127b 93ed      	ST   X+,R30
00127c 93fc      	ST   X,R31
                 _0x2000015:
00127d 8119      	LDD  R17,Y+1
00127e 8108      	LDD  R16,Y+0
00127f 940c 1760 	JMP  _0x20A0005
                 __ftoe_G100:
001281 9724      	SBIW R28,4
001282 e0e0      	LDI  R30,LOW(0)
001283 83e8      	ST   Y,R30
001284 83e9      	STD  Y+1,R30
001285 e8e0      	LDI  R30,LOW(128)
001286 83ea      	STD  Y+2,R30
001287 e3ef      	LDI  R30,LOW(63)
001288 83eb      	STD  Y+3,R30
001289 940e 1c51 	CALL __SAVELOCR4
00128b 85ee      	LDD  R30,Y+14
00128c 85ff      	LDD  R31,Y+14+1
00128d 3fef      	CPI  R30,LOW(0xFFFF)
00128e efaf      	LDI  R26,HIGH(0xFFFF)
00128f 07fa      	CPC  R31,R26
001290 f459      	BRNE _0x2000019
001291 85e8      	LDD  R30,Y+8
001292 85f9      	LDD  R31,Y+8+1
001293 93fa      	ST   -Y,R31
001294 93ea      	ST   -Y,R30
                +
001295 e8e4     +LDI R30 , LOW ( 2 * _0x2000000 + ( 0 ) )
001296 e0f2     +LDI R31 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW1FN _0x2000000,0
001297 93fa      	ST   -Y,R31
001298 93ea      	ST   -Y,R30
001299 940e 1762 	CALL _strcpyf
00129b c148      	RJMP _0x20A0007
                 _0x2000019:
00129c 3fef      	CPI  R30,LOW(0x7FFF)
00129d e7af      	LDI  R26,HIGH(0x7FFF)
00129e 07fa      	CPC  R31,R26
00129f f459      	BRNE _0x2000018
0012a0 85e8      	LDD  R30,Y+8
0012a1 85f9      	LDD  R31,Y+8+1
0012a2 93fa      	ST   -Y,R31
0012a3 93ea      	ST   -Y,R30
                +
0012a4 e8e5     +LDI R30 , LOW ( 2 * _0x2000000 + ( 1 ) )
0012a5 e0f2     +LDI R31 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW1FN _0x2000000,1
0012a6 93fa      	ST   -Y,R31
0012a7 93ea      	ST   -Y,R30
0012a8 940e 1762 	CALL _strcpyf
0012aa c139      	RJMP _0x20A0007
                 _0x2000018:
0012ab 85ab      	LDD  R26,Y+11
0012ac 30a7      	CPI  R26,LOW(0x7)
0012ad f010      	BRLO _0x200001B
0012ae e0e6      	LDI  R30,LOW(6)
0012af 87eb      	STD  Y+11,R30
                 _0x200001B:
0012b0 851b      	LDD  R17,Y+11
                 _0x200001C:
0012b1 2fe1      	MOV  R30,R17
0012b2 5011      	SUBI R17,1
0012b3 30e0      	CPI  R30,0
0012b4 f079      	BREQ _0x200001E
                +
0012b5 81ac     +LDD R26 , Y + 4
0012b6 81bd     +LDD R27 , Y + 4 + 1
0012b7 818e     +LDD R24 , Y + 4 + 2
0012b8 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
0012b9 e0e0     +LDI R30 , LOW ( 0x41200000 )
0012ba e0f0     +LDI R31 , HIGH ( 0x41200000 )
0012bb e260     +LDI R22 , BYTE3 ( 0x41200000 )
0012bc e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0012bd 940e 1a78 	CALL __MULF12
                +
0012bf 83ec     +STD Y + 4 , R30
0012c0 83fd     +STD Y + 4 + 1 , R31
0012c1 836e     +STD Y + 4 + 2 , R22
0012c2 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0012c3 cfed      	RJMP _0x200001C
                 _0x200001E:
                +
0012c4 85ec     +LDD R30 , Y + 12
0012c5 85fd     +LDD R31 , Y + 12 + 1
0012c6 856e     +LDD R22 , Y + 12 + 2
0012c7 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0012c8 940e 1c40 	CALL __CPD10
0012ca f481      	BRNE _0x200001F
0012cb e030      	LDI  R19,LOW(0)
                +
0012cc 81ac     +LDD R26 , Y + 4
0012cd 81bd     +LDD R27 , Y + 4 + 1
0012ce 818e     +LDD R24 , Y + 4 + 2
0012cf 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
0012d0 e0e0     +LDI R30 , LOW ( 0x41200000 )
0012d1 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0012d2 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0012d3 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0012d4 940e 1a78 	CALL __MULF12
                +
0012d6 83ec     +STD Y + 4 , R30
0012d7 83fd     +STD Y + 4 + 1 , R31
0012d8 836e     +STD Y + 4 + 2 , R22
0012d9 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0012da c07e      	RJMP _0x2000020
                 _0x200001F:
0012db 853b      	LDD  R19,Y+11
                +
0012dc 81ec     +LDD R30 , Y + 4
0012dd 81fd     +LDD R31 , Y + 4 + 1
0012de 816e     +LDD R22 , Y + 4 + 2
0012df 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
0012e0 85ac     +LDD R26 , Y + 12
0012e1 85bd     +LDD R27 , Y + 12 + 1
0012e2 858e     +LDD R24 , Y + 12 + 2
0012e3 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0012e4 940e 1b0b 	CALL __CMPF12
0012e6 f009      	BREQ PC+2
0012e7 f410      	BRCC PC+3
0012e8 940c 1310 	JMP  _0x2000021
                +
0012ea 81ac     +LDD R26 , Y + 4
0012eb 81bd     +LDD R27 , Y + 4 + 1
0012ec 818e     +LDD R24 , Y + 4 + 2
0012ed 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
0012ee e0e0     +LDI R30 , LOW ( 0x41200000 )
0012ef e0f0     +LDI R31 , HIGH ( 0x41200000 )
0012f0 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0012f1 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0012f2 940e 1a78 	CALL __MULF12
                +
0012f4 83ec     +STD Y + 4 , R30
0012f5 83fd     +STD Y + 4 + 1 , R31
0012f6 836e     +STD Y + 4 + 2 , R22
0012f7 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 _0x2000022:
                +
0012f8 81ec     +LDD R30 , Y + 4
0012f9 81fd     +LDD R31 , Y + 4 + 1
0012fa 816e     +LDD R22 , Y + 4 + 2
0012fb 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
0012fc 85ac     +LDD R26 , Y + 12
0012fd 85bd     +LDD R27 , Y + 12 + 1
0012fe 858e     +LDD R24 , Y + 12 + 2
0012ff 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
001300 940e 1b0b 	CALL __CMPF12
001302 f060      	BRLO _0x2000024
                +
001303 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001304 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001305 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001306 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001307 940e 1a78 	CALL __MULF12
                +
001309 87ec     +STD Y + 12 , R30
00130a 87fd     +STD Y + 12 + 1 , R31
00130b 876e     +STD Y + 12 + 2 , R22
00130c 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
00130d 5f3f      	SUBI R19,-LOW(1)
00130e cfe9      	RJMP _0x2000022
                 _0x2000024:
00130f c025      	RJMP _0x2000025
                 _0x2000021:
                 _0x2000026:
                +
001310 81ec     +LDD R30 , Y + 4
001311 81fd     +LDD R31 , Y + 4 + 1
001312 816e     +LDD R22 , Y + 4 + 2
001313 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
001314 85ac     +LDD R26 , Y + 12
001315 85bd     +LDD R27 , Y + 12 + 1
001316 858e     +LDD R24 , Y + 12 + 2
001317 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
001318 940e 1b0b 	CALL __CMPF12
00131a f460      	BRSH _0x2000028
                +
00131b e0e0     +LDI R30 , LOW ( 0x41200000 )
00131c e0f0     +LDI R31 , HIGH ( 0x41200000 )
00131d e260     +LDI R22 , BYTE3 ( 0x41200000 )
00131e e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00131f 940e 1a78 	CALL __MULF12
                +
001321 87ec     +STD Y + 12 , R30
001322 87fd     +STD Y + 12 + 1 , R31
001323 876e     +STD Y + 12 + 2 , R22
001324 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
001325 5031      	SUBI R19,LOW(1)
001326 cfe9      	RJMP _0x2000026
                 _0x2000028:
                +
001327 81ac     +LDD R26 , Y + 4
001328 81bd     +LDD R27 , Y + 4 + 1
001329 818e     +LDD R24 , Y + 4 + 2
00132a 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
00132b e0e0     +LDI R30 , LOW ( 0x41200000 )
00132c e0f0     +LDI R31 , HIGH ( 0x41200000 )
00132d e260     +LDI R22 , BYTE3 ( 0x41200000 )
00132e e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00132f 940e 1a78 	CALL __MULF12
                +
001331 83ec     +STD Y + 4 , R30
001332 83fd     +STD Y + 4 + 1 , R31
001333 836e     +STD Y + 4 + 2 , R22
001334 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 _0x2000025:
                +
001335 85ec     +LDD R30 , Y + 12
001336 85fd     +LDD R31 , Y + 12 + 1
001337 856e     +LDD R22 , Y + 12 + 2
001338 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
                +
001339 e0a0     +LDI R26 , LOW ( 0x3F000000 )
00133a e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00133b e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00133c e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00133d 940e 1a28 	CALL __ADDF12
                +
00133f 87ec     +STD Y + 12 , R30
001340 87fd     +STD Y + 12 + 1 , R31
001341 876e     +STD Y + 12 + 2 , R22
001342 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                +
001343 81ec     +LDD R30 , Y + 4
001344 81fd     +LDD R31 , Y + 4 + 1
001345 816e     +LDD R22 , Y + 4 + 2
001346 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
001347 85ac     +LDD R26 , Y + 12
001348 85bd     +LDD R27 , Y + 12 + 1
001349 858e     +LDD R24 , Y + 12 + 2
00134a 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00134b 940e 1b0b 	CALL __CMPF12
00134d f058      	BRLO _0x2000029
                +
00134e eced     +LDI R30 , LOW ( 0x3DCCCCCD )
00134f ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001350 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001351 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001352 940e 1a78 	CALL __MULF12
                +
001354 87ec     +STD Y + 12 , R30
001355 87fd     +STD Y + 12 + 1 , R31
001356 876e     +STD Y + 12 + 2 , R22
001357 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
001358 5f3f      	SUBI R19,-LOW(1)
                 _0x2000029:
                 _0x2000020:
001359 e010      	LDI  R17,LOW(0)
                 _0x200002A:
00135a 85eb      	LDD  R30,Y+11
00135b 17e1      	CP   R30,R17
00135c f410      	BRSH PC+3
00135d 940c 13af 	JMP _0x200002C
                +
00135f 81ac     +LDD R26 , Y + 4
001360 81bd     +LDD R27 , Y + 4 + 1
001361 818e     +LDD R24 , Y + 4 + 2
001362 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
001363 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001364 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001365 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001366 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001367 940e 1a78 	CALL __MULF12
                +
001369 e0a0     +LDI R26 , LOW ( 0x3F000000 )
00136a e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00136b e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00136c e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00136d 940e 1a28 	CALL __ADDF12
00136f 940e 1c2e 	CALL __PUTPARD1
001371 940e 195f 	CALL _floor
                +
001373 83ec     +STD Y + 4 , R30
001374 83fd     +STD Y + 4 + 1 , R31
001375 836e     +STD Y + 4 + 2 , R22
001376 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                +
001377 85ac     +LDD R26 , Y + 12
001378 85bd     +LDD R27 , Y + 12 + 1
001379 858e     +LDD R24 , Y + 12 + 2
00137a 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00137b 940e 1ac6 	CALL __DIVF21
00137d 940e 19b5 	CALL __CFD1U
00137f 2f0e      	MOV  R16,R30
001380 85a8      	LDD  R26,Y+8
001381 85b9      	LDD  R27,Y+8+1
001382 9611      	ADIW R26,1
001383 87a8      	STD  Y+8,R26
001384 87b9      	STD  Y+8+1,R27
001385 9711      	SBIW R26,1
001386 2fe0      	MOV  R30,R16
001387 5de0      	SUBI R30,-LOW(48)
001388 93ec      	ST   X,R30
001389 2fe0      	MOV  R30,R16
00138a 27ff      	CLR  R31
00138b 2766      	CLR  R22
00138c 2777      	CLR  R23
00138d 940e 19ee 	CALL __CDF1
                +
00138f 81ac     +LDD R26 , Y + 4
001390 81bd     +LDD R27 , Y + 4 + 1
001391 818e     +LDD R24 , Y + 4 + 2
001392 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
001393 940e 1a78 	CALL __MULF12
                +
001395 85ac     +LDD R26 , Y + 12
001396 85bd     +LDD R27 , Y + 12 + 1
001397 858e     +LDD R24 , Y + 12 + 2
001398 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
001399 940e 1c33 	CALL __SWAPD12
00139b 940e 1a21 	CALL __SUBF12
                +
00139d 87ec     +STD Y + 12 , R30
00139e 87fd     +STD Y + 12 + 1 , R31
00139f 876e     +STD Y + 12 + 2 , R22
0013a0 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0013a1 2fe1      	MOV  R30,R17
0013a2 5f1f      	SUBI R17,-1
0013a3 30e0      	CPI  R30,0
0013a4 f009      	BREQ _0x200002D
0013a5 cfb4      	RJMP _0x200002A
                 _0x200002D:
0013a6 85a8      	LDD  R26,Y+8
0013a7 85b9      	LDD  R27,Y+8+1
0013a8 9611      	ADIW R26,1
0013a9 87a8      	STD  Y+8,R26
0013aa 87b9      	STD  Y+8+1,R27
0013ab 9711      	SBIW R26,1
0013ac e2ee      	LDI  R30,LOW(46)
0013ad 93ec      	ST   X,R30
0013ae cfab      	RJMP _0x200002A
                 _0x200002C:
0013af 85e8      	LDD  R30,Y+8
0013b0 85f9      	LDD  R31,Y+8+1
0013b1 9631      	ADIW R30,1
0013b2 87e8      	STD  Y+8,R30
0013b3 87f9      	STD  Y+8+1,R31
0013b4 9731      	SBIW R30,1
0013b5 85aa      	LDD  R26,Y+10
0013b6 83a0      	STD  Z+0,R26
0013b7 3030      	CPI  R19,0
0013b8 f44c      	BRGE _0x200002E
0013b9 85a8      	LDD  R26,Y+8
0013ba 85b9      	LDD  R27,Y+8+1
0013bb 9611      	ADIW R26,1
0013bc 87a8      	STD  Y+8,R26
0013bd 87b9      	STD  Y+8+1,R27
0013be 9711      	SBIW R26,1
0013bf e2ed      	LDI  R30,LOW(45)
0013c0 93ec      	ST   X,R30
0013c1 9531      	NEG  R19
                 _0x200002E:
0013c2 303a      	CPI  R19,10
0013c3 f074      	BRLT _0x200002F
0013c4 85e8      	LDD  R30,Y+8
0013c5 85f9      	LDD  R31,Y+8+1
0013c6 9631      	ADIW R30,1
0013c7 87e8      	STD  Y+8,R30
0013c8 87f9      	STD  Y+8+1,R31
0013c9 9731      	SBIW R30,1
0013ca 01bf      	MOVW R22,R30
0013cb 2fa3      	MOV  R26,R19
0013cc e0ea      	LDI  R30,LOW(10)
0013cd 940e 1b91 	CALL __DIVB21
0013cf 5de0      	SUBI R30,-LOW(48)
0013d0 01db      	MOVW R26,R22
0013d1 93ec      	ST   X,R30
                 _0x200002F:
0013d2 85e8      	LDD  R30,Y+8
0013d3 85f9      	LDD  R31,Y+8+1
0013d4 9631      	ADIW R30,1
0013d5 87e8      	STD  Y+8,R30
0013d6 87f9      	STD  Y+8+1,R31
0013d7 9731      	SBIW R30,1
0013d8 01bf      	MOVW R22,R30
0013d9 2fa3      	MOV  R26,R19
0013da e0ea      	LDI  R30,LOW(10)
0013db 940e 1bd3 	CALL __MODB21
0013dd 5de0      	SUBI R30,-LOW(48)
0013de 01db      	MOVW R26,R22
0013df 93ec      	ST   X,R30
0013e0 85a8      	LDD  R26,Y+8
0013e1 85b9      	LDD  R27,Y+8+1
0013e2 e0e0      	LDI  R30,LOW(0)
0013e3 93ec      	ST   X,R30
                 _0x20A0007:
0013e4 940e 1c58 	CALL __LOADLOCR4
0013e6 9660      	ADIW R28,16
0013e7 9508      	RET
                 __print_G100:
0013e8 97ef      	SBIW R28,63
0013e9 9761      	SBIW R28,17
0013ea 940e 1c4f 	CALL __SAVELOCR6
0013ec e010      	LDI  R17,0
                +
0013ed 01fe     +MOVW R30 , R28
0013ee 5ae8     +SUBI R30 , LOW ( - 88 )
0013ef 4fff     +SBCI R31 , HIGH ( - 88 )
0013f0 9001     +LD R0 , Z +
0013f1 81f0     +LD R31 , Z
0013f2 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0013f3 87e8      	STD  Y+8,R30
0013f4 87f9      	STD  Y+8+1,R31
                +
0013f5 01fe     +MOVW R30 , R28
0013f6 5aea     +SUBI R30 , LOW ( - 86 )
0013f7 4fff     +SBCI R31 , HIGH ( - 86 )
0013f8 9001     +LD R0 , Z +
0013f9 81f0     +LD R31 , Z
0013fa 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0013fb 83ee      	STD  Y+6,R30
0013fc 83ff      	STD  Y+6+1,R31
0013fd 81ae      	LDD  R26,Y+6
0013fe 81bf      	LDD  R27,Y+6+1
0013ff e0e0      	LDI  R30,LOW(0)
001400 e0f0      	LDI  R31,HIGH(0)
001401 93ed      	ST   X+,R30
001402 93fc      	ST   X,R31
                 _0x2000030:
001403 01de      	MOVW R26,R28
001404 5aa4      	SUBI R26,LOW(-(92))
001405 4fbf      	SBCI R27,HIGH(-(92))
001406 91ed      	LD   R30,X+
001407 91fd      	LD   R31,X+
001408 9631      	ADIW R30,1
001409 93fe      	ST   -X,R31
00140a 93ee      	ST   -X,R30
00140b 9731      	SBIW R30,1
00140c 91e4      	LPM  R30,Z
00140d 2f2e      	MOV  R18,R30
00140e 30e0      	CPI  R30,0
00140f f411      	BRNE PC+3
001410 940c 16e6 	JMP _0x2000032
001412 2fe1      	MOV  R30,R17
001413 30e0      	CPI  R30,0
001414 f469      	BRNE _0x2000036
001415 3225      	CPI  R18,37
001416 f411      	BRNE _0x2000037
001417 e011      	LDI  R17,LOW(1)
001418 c008      	RJMP _0x2000038
                 _0x2000037:
001419 932a      	ST   -Y,R18
00141a 81ef      	LDD  R30,Y+7
00141b 85f8      	LDD  R31,Y+7+1
00141c 93fa      	ST   -Y,R31
00141d 93ea      	ST   -Y,R30
00141e 85eb      	LDD  R30,Y+11
00141f 85fc      	LDD  R31,Y+11+1
001420 9509      	ICALL
                 _0x2000038:
001421 c2c3      	RJMP _0x2000035
                 _0x2000036:
001422 30e1      	CPI  R30,LOW(0x1)
001423 f4f1      	BRNE _0x2000039
001424 3225      	CPI  R18,37
001425 f449      	BRNE _0x200003A
001426 932a      	ST   -Y,R18
001427 81ef      	LDD  R30,Y+7
001428 85f8      	LDD  R31,Y+7+1
001429 93fa      	ST   -Y,R31
00142a 93ea      	ST   -Y,R30
00142b 85eb      	LDD  R30,Y+11
00142c 85fc      	LDD  R31,Y+11+1
00142d 9509      	ICALL
00142e c2b5      	RJMP _0x200010E
                 _0x200003A:
00142f e012      	LDI  R17,LOW(2)
001430 e0e0      	LDI  R30,LOW(0)
001431 8bed      	STD  Y+21,R30
001432 e000      	LDI  R16,LOW(0)
001433 322d      	CPI  R18,45
001434 f411      	BRNE _0x200003B
001435 e001      	LDI  R16,LOW(1)
001436 c2ae      	RJMP _0x2000035
                 _0x200003B:
001437 322b      	CPI  R18,43
001438 f419      	BRNE _0x200003C
001439 e2eb      	LDI  R30,LOW(43)
00143a 8bed      	STD  Y+21,R30
00143b c2a9      	RJMP _0x2000035
                 _0x200003C:
00143c 3220      	CPI  R18,32
00143d f419      	BRNE _0x200003D
00143e e2e0      	LDI  R30,LOW(32)
00143f 8bed      	STD  Y+21,R30
001440 c2a4      	RJMP _0x2000035
                 _0x200003D:
001441 c002      	RJMP _0x200003E
                 _0x2000039:
001442 30e2      	CPI  R30,LOW(0x2)
001443 f439      	BRNE _0x200003F
                 _0x200003E:
001444 e050      	LDI  R21,LOW(0)
001445 e013      	LDI  R17,LOW(3)
001446 3320      	CPI  R18,48
001447 f411      	BRNE _0x2000040
001448 6800      	ORI  R16,LOW(128)
001449 c29b      	RJMP _0x2000035
                 _0x2000040:
00144a c002      	RJMP _0x2000041
                 _0x200003F:
00144b 30e3      	CPI  R30,LOW(0x3)
00144c f491      	BRNE _0x2000042
                 _0x2000041:
00144d 3320      	CPI  R18,48
00144e f010      	BRLO _0x2000044
00144f 332a      	CPI  R18,58
001450 f008      	BRLO _0x2000045
                 _0x2000044:
001451 c007      	RJMP _0x2000043
                 _0x2000045:
001452 e0aa      	LDI  R26,LOW(10)
001453 9f5a      	MUL  R21,R26
001454 2d50      	MOV  R21,R0
001455 2fe2      	MOV  R30,R18
001456 53e0      	SUBI R30,LOW(48)
001457 0f5e      	ADD  R21,R30
001458 c28c      	RJMP _0x2000035
                 _0x2000043:
001459 e040      	LDI  R20,LOW(0)
00145a 322e      	CPI  R18,46
00145b f411      	BRNE _0x2000046
00145c e014      	LDI  R17,LOW(4)
00145d c287      	RJMP _0x2000035
                 _0x2000046:
00145e c00f      	RJMP _0x2000047
                 _0x2000042:
00145f 30e4      	CPI  R30,LOW(0x4)
001460 f499      	BRNE _0x2000049
001461 3320      	CPI  R18,48
001462 f010      	BRLO _0x200004B
001463 332a      	CPI  R18,58
001464 f008      	BRLO _0x200004C
                 _0x200004B:
001465 c008      	RJMP _0x200004A
                 _0x200004C:
001466 6200      	ORI  R16,LOW(32)
001467 e0aa      	LDI  R26,LOW(10)
001468 9f4a      	MUL  R20,R26
001469 2d40      	MOV  R20,R0
00146a 2fe2      	MOV  R30,R18
00146b 53e0      	SUBI R30,LOW(48)
00146c 0f4e      	ADD  R20,R30
00146d c277      	RJMP _0x2000035
                 _0x200004A:
                 _0x2000047:
00146e 362c      	CPI  R18,108
00146f f419      	BRNE _0x200004D
001470 6002      	ORI  R16,LOW(2)
001471 e015      	LDI  R17,LOW(5)
001472 c272      	RJMP _0x2000035
                 _0x200004D:
001473 c004      	RJMP _0x200004E
                 _0x2000049:
001474 30e5      	CPI  R30,LOW(0x5)
001475 f011      	BREQ PC+3
001476 940c 16e5 	JMP _0x2000035
                 _0x200004E:
001478 2fe2      	MOV  R30,R18
001479 36e3      	CPI  R30,LOW(0x63)
00147a f4b1      	BRNE _0x2000053
                +
00147b 01fe     +MOVW R30 , R28
00147c 5ae6     +SUBI R30 , LOW ( - 90 )
00147d 4fff     +SBCI R31 , HIGH ( - 90 )
00147e 9001     +LD R0 , Z +
00147f 81f0     +LD R31 , Z
001480 2de0     +MOV R30 , R0
                 	__GETW1SX 90
001481 9734      	SBIW R30,4
                +
001482 01de     +MOVW R26 , R28
001483 5aa6     +SUBI R26 , LOW ( - 90 )
001484 4fbf     +SBCI R27 , HIGH ( - 90 )
001485 93ed     +ST X + , R30
001486 93fc     +ST X , R31
                 	__PUTW1SX 90
001487 81a4      	LDD  R26,Z+4
001488 93aa      	ST   -Y,R26
001489 81ef      	LDD  R30,Y+7
00148a 85f8      	LDD  R31,Y+7+1
00148b 93fa      	ST   -Y,R31
00148c 93ea      	ST   -Y,R30
00148d 85eb      	LDD  R30,Y+11
00148e 85fc      	LDD  R31,Y+11+1
00148f 9509      	ICALL
001490 c253      	RJMP _0x2000054
                 _0x2000053:
001491 34e5      	CPI  R30,LOW(0x45)
001492 f011      	BREQ _0x2000057
001493 36e5      	CPI  R30,LOW(0x65)
001494 f409      	BRNE _0x2000058
                 _0x2000057:
001495 c004      	RJMP _0x2000059
                 _0x2000058:
001496 36e6      	CPI  R30,LOW(0x66)
001497 f011      	BREQ PC+3
001498 940c 1506 	JMP _0x200005A
                 _0x2000059:
00149a 01fe      	MOVW R30,R28
00149b 9676      	ADIW R30,22
00149c 87ee      	STD  Y+14,R30
00149d 87ff      	STD  Y+14+1,R31
                +
00149e 01de     +MOVW R26 , R28
00149f 5aa6     +SUBI R26 , LOW ( - 90 )
0014a0 4fbf     +SBCI R27 , HIGH ( - 90 )
0014a1 900d     +LD R0 , X +
0014a2 91bc     +LD R27 , X
0014a3 2da0     +MOV R26 , R0
                 	__GETW2SX 90
0014a4 940e 1c0f 	CALL __GETD1P
                +
0014a6 87ea     +STD Y + 10 , R30
0014a7 87fb     +STD Y + 10 + 1 , R31
0014a8 876c     +STD Y + 10 + 2 , R22
0014a9 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                +
0014aa 01fe     +MOVW R30 , R28
0014ab 5ae6     +SUBI R30 , LOW ( - 90 )
0014ac 4fff     +SBCI R31 , HIGH ( - 90 )
0014ad 9001     +LD R0 , Z +
0014ae 81f0     +LD R31 , Z
0014af 2de0     +MOV R30 , R0
                 	__GETW1SX 90
0014b0 9734      	SBIW R30,4
                +
0014b1 01de     +MOVW R26 , R28
0014b2 5aa6     +SUBI R26 , LOW ( - 90 )
0014b3 4fbf     +SBCI R27 , HIGH ( - 90 )
0014b4 93ed     +ST X + , R30
0014b5 93fc     +ST X , R31
                 	__PUTW1SX 90
0014b6 85ad      	LDD  R26,Y+13
0014b7 23aa      	TST  R26
0014b8 f022      	BRMI _0x200005B
0014b9 89ad      	LDD  R26,Y+21
0014ba 32ab      	CPI  R26,LOW(0x2B)
0014bb f069      	BREQ _0x200005D
0014bc c020      	RJMP _0x200005E
                 _0x200005B:
                +
0014bd 85ea     +LDD R30 , Y + 10
0014be 85fb     +LDD R31 , Y + 10 + 1
0014bf 856c     +LDD R22 , Y + 10 + 2
0014c0 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0014c1 940e 1982 	CALL __ANEGF1
                +
0014c3 87ea     +STD Y + 10 , R30
0014c4 87fb     +STD Y + 10 + 1 , R31
0014c5 876c     +STD Y + 10 + 2 , R22
0014c6 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0014c7 e2ed      	LDI  R30,LOW(45)
0014c8 8bed      	STD  Y+21,R30
                 _0x200005D:
0014c9 ff07      	SBRS R16,7
0014ca c00a      	RJMP _0x200005F
0014cb 89ed      	LDD  R30,Y+21
0014cc 93ea      	ST   -Y,R30
0014cd 81ef      	LDD  R30,Y+7
0014ce 85f8      	LDD  R31,Y+7+1
0014cf 93fa      	ST   -Y,R31
0014d0 93ea      	ST   -Y,R30
0014d1 85eb      	LDD  R30,Y+11
0014d2 85fc      	LDD  R31,Y+11+1
0014d3 9509      	ICALL
0014d4 c008      	RJMP _0x2000060
                 _0x200005F:
0014d5 85ee      	LDD  R30,Y+14
0014d6 85ff      	LDD  R31,Y+14+1
0014d7 9631      	ADIW R30,1
0014d8 87ee      	STD  Y+14,R30
0014d9 87ff      	STD  Y+14+1,R31
0014da 9731      	SBIW R30,1
0014db 89ad      	LDD  R26,Y+21
0014dc 83a0      	STD  Z+0,R26
                 _0x2000060:
                 _0x200005E:
0014dd ff05      	SBRS R16,5
0014de e046      	LDI  R20,LOW(6)
0014df 3626      	CPI  R18,102
0014e0 f471      	BRNE _0x2000062
                +
0014e1 85ea     +LDD R30 , Y + 10
0014e2 85fb     +LDD R31 , Y + 10 + 1
0014e3 856c     +LDD R22 , Y + 10 + 2
0014e4 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0014e5 940e 1c2e 	CALL __PUTPARD1
0014e7 934a      	ST   -Y,R20
0014e8 89eb      	LDD  R30,Y+19
0014e9 89fc      	LDD  R31,Y+19+1
0014ea 93fa      	ST   -Y,R31
0014eb 93ea      	ST   -Y,R30
0014ec 940e 180d 	CALL _ftoa
0014ee c00d      	RJMP _0x2000063
                 _0x2000062:
                +
0014ef 85ea     +LDD R30 , Y + 10
0014f0 85fb     +LDD R31 , Y + 10 + 1
0014f1 856c     +LDD R22 , Y + 10 + 2
0014f2 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0014f3 940e 1c2e 	CALL __PUTPARD1
0014f5 934a      	ST   -Y,R20
0014f6 932a      	ST   -Y,R18
0014f7 89ec      	LDD  R30,Y+20
0014f8 89fd      	LDD  R31,Y+20+1
0014f9 93fa      	ST   -Y,R31
0014fa 93ea      	ST   -Y,R30
0014fb dd85      	RCALL __ftoe_G100
                 _0x2000063:
0014fc 01fe      	MOVW R30,R28
0014fd 9676      	ADIW R30,22
0014fe 87ee      	STD  Y+14,R30
0014ff 87ff      	STD  Y+14+1,R31
001500 93fa      	ST   -Y,R31
001501 93ea      	ST   -Y,R30
001502 940e 176d 	CALL _strlen
001504 2f1e      	MOV  R17,R30
001505 c045      	RJMP _0x2000064
                 _0x200005A:
001506 37e3      	CPI  R30,LOW(0x73)
001507 f4e9      	BRNE _0x2000066
                +
001508 01fe     +MOVW R30 , R28
001509 5ae6     +SUBI R30 , LOW ( - 90 )
00150a 4fff     +SBCI R31 , HIGH ( - 90 )
00150b 9001     +LD R0 , Z +
00150c 81f0     +LD R31 , Z
00150d 2de0     +MOV R30 , R0
                 	__GETW1SX 90
00150e 9734      	SBIW R30,4
                +
00150f 01de     +MOVW R26 , R28
001510 5aa6     +SUBI R26 , LOW ( - 90 )
001511 4fbf     +SBCI R27 , HIGH ( - 90 )
001512 93ed     +ST X + , R30
001513 93fc     +ST X , R31
                 	__PUTW1SX 90
                +
001514 01de     +MOVW R26 , R28
001515 5aa6     +SUBI R26 , LOW ( - 90 )
001516 4fbf     +SBCI R27 , HIGH ( - 90 )
001517 900d     +LD R0 , X +
001518 91bc     +LD R27 , X
001519 2da0     +MOV R26 , R0
                 	__GETW2SX 90
00151a 9614      	ADIW R26,4
00151b 940e 1c0b 	CALL __GETW1P
00151d 87ee      	STD  Y+14,R30
00151e 87ff      	STD  Y+14+1,R31
00151f 93fa      	ST   -Y,R31
001520 93ea      	ST   -Y,R30
001521 940e 176d 	CALL _strlen
001523 2f1e      	MOV  R17,R30
001524 c01f      	RJMP _0x2000067
                 _0x2000066:
001525 37e0      	CPI  R30,LOW(0x70)
001526 f549      	BRNE _0x2000069
                +
001527 01fe     +MOVW R30 , R28
001528 5ae6     +SUBI R30 , LOW ( - 90 )
001529 4fff     +SBCI R31 , HIGH ( - 90 )
00152a 9001     +LD R0 , Z +
00152b 81f0     +LD R31 , Z
00152c 2de0     +MOV R30 , R0
                 	__GETW1SX 90
00152d 9734      	SBIW R30,4
                +
00152e 01de     +MOVW R26 , R28
00152f 5aa6     +SUBI R26 , LOW ( - 90 )
001530 4fbf     +SBCI R27 , HIGH ( - 90 )
001531 93ed     +ST X + , R30
001532 93fc     +ST X , R31
                 	__PUTW1SX 90
                +
001533 01de     +MOVW R26 , R28
001534 5aa6     +SUBI R26 , LOW ( - 90 )
001535 4fbf     +SBCI R27 , HIGH ( - 90 )
001536 900d     +LD R0 , X +
001537 91bc     +LD R27 , X
001538 2da0     +MOV R26 , R0
                 	__GETW2SX 90
001539 9614      	ADIW R26,4
00153a 940e 1c0b 	CALL __GETW1P
00153c 87ee      	STD  Y+14,R30
00153d 87ff      	STD  Y+14+1,R31
00153e 93fa      	ST   -Y,R31
00153f 93ea      	ST   -Y,R30
001540 940e 1777 	CALL _strlenf
001542 2f1e      	MOV  R17,R30
001543 6008      	ORI  R16,LOW(8)
                 _0x2000067:
001544 770f      	ANDI R16,LOW(127)
001545 3040      	CPI  R20,0
001546 f011      	BREQ _0x200006B
001547 1741      	CP   R20,R17
001548 f008      	BRLO _0x200006C
                 _0x200006B:
001549 c001      	RJMP _0x200006A
                 _0x200006C:
00154a 2f14      	MOV  R17,R20
                 _0x200006A:
                 _0x2000064:
00154b e040      	LDI  R20,LOW(0)
00154c e0e0      	LDI  R30,LOW(0)
00154d 8bec      	STD  Y+20,R30
00154e e030      	LDI  R19,LOW(0)
00154f c0aa      	RJMP _0x200006D
                 _0x2000069:
001550 36e4      	CPI  R30,LOW(0x64)
001551 f011      	BREQ _0x2000070
001552 36e9      	CPI  R30,LOW(0x69)
001553 f411      	BRNE _0x2000071
                 _0x2000070:
001554 6004      	ORI  R16,LOW(4)
001555 c002      	RJMP _0x2000072
                 _0x2000071:
001556 37e5      	CPI  R30,LOW(0x75)
001557 f4c1      	BRNE _0x2000073
                 _0x2000072:
001558 e0ea      	LDI  R30,LOW(10)
001559 8bec      	STD  Y+20,R30
00155a ff01      	SBRS R16,1
00155b c00a      	RJMP _0x2000074
                +
00155c e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
00155d ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
00155e e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
00155f e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
                +
001560 8be8     +STD Y + 16 , R30
001561 8bf9     +STD Y + 16 + 1 , R31
001562 8b6a     +STD Y + 16 + 2 , R22
001563 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
001564 e01a      	LDI  R17,LOW(10)
001565 c029      	RJMP _0x2000075
                 _0x2000074:
                +
001566 e1e0     +LDI R30 , LOW ( 0x2710 )
001567 e2f7     +LDI R31 , HIGH ( 0x2710 )
001568 e060     +LDI R22 , BYTE3 ( 0x2710 )
001569 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
                +
00156a 8be8     +STD Y + 16 , R30
00156b 8bf9     +STD Y + 16 + 1 , R31
00156c 8b6a     +STD Y + 16 + 2 , R22
00156d 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
00156e e015      	LDI  R17,LOW(5)
00156f c01f      	RJMP _0x2000075
                 _0x2000073:
001570 35e8      	CPI  R30,LOW(0x58)
001571 f411      	BRNE _0x2000077
001572 6008      	ORI  R16,LOW(8)
001573 c004      	RJMP _0x2000078
                 _0x2000077:
001574 37e8      	CPI  R30,LOW(0x78)
001575 f011      	BREQ PC+3
001576 940c 16e4 	JMP _0x20000B6
                 _0x2000078:
001578 e1e0      	LDI  R30,LOW(16)
001579 8bec      	STD  Y+20,R30
00157a ff01      	SBRS R16,1
00157b c00a      	RJMP _0x200007A
                +
00157c e0e0     +LDI R30 , LOW ( 0x10000000 )
00157d e0f0     +LDI R31 , HIGH ( 0x10000000 )
00157e e060     +LDI R22 , BYTE3 ( 0x10000000 )
00157f e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
                +
001580 8be8     +STD Y + 16 , R30
001581 8bf9     +STD Y + 16 + 1 , R31
001582 8b6a     +STD Y + 16 + 2 , R22
001583 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
001584 e018      	LDI  R17,LOW(8)
001585 c009      	RJMP _0x2000075
                 _0x200007A:
                +
001586 e0e0     +LDI R30 , LOW ( 0x1000 )
001587 e1f0     +LDI R31 , HIGH ( 0x1000 )
001588 e060     +LDI R22 , BYTE3 ( 0x1000 )
001589 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
                +
00158a 8be8     +STD Y + 16 , R30
00158b 8bf9     +STD Y + 16 + 1 , R31
00158c 8b6a     +STD Y + 16 + 2 , R22
00158d 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
00158e e014      	LDI  R17,LOW(4)
                 _0x2000075:
00158f 3040      	CPI  R20,0
001590 f011      	BREQ _0x200007B
001591 770f      	ANDI R16,LOW(127)
001592 c001      	RJMP _0x200007C
                 _0x200007B:
001593 e041      	LDI  R20,LOW(1)
                 _0x200007C:
001594 ff01      	SBRS R16,1
001595 c016      	RJMP _0x200007D
                +
001596 01fe     +MOVW R30 , R28
001597 5ae6     +SUBI R30 , LOW ( - 90 )
001598 4fff     +SBCI R31 , HIGH ( - 90 )
001599 9001     +LD R0 , Z +
00159a 81f0     +LD R31 , Z
00159b 2de0     +MOV R30 , R0
                 	__GETW1SX 90
00159c 9734      	SBIW R30,4
                +
00159d 01de     +MOVW R26 , R28
00159e 5aa6     +SUBI R26 , LOW ( - 90 )
00159f 4fbf     +SBCI R27 , HIGH ( - 90 )
0015a0 93ed     +ST X + , R30
0015a1 93fc     +ST X , R31
                 	__PUTW1SX 90
                +
0015a2 01de     +MOVW R26 , R28
0015a3 5aa6     +SUBI R26 , LOW ( - 90 )
0015a4 4fbf     +SBCI R27 , HIGH ( - 90 )
0015a5 900d     +LD R0 , X +
0015a6 91bc     +LD R27 , X
0015a7 2da0     +MOV R26 , R0
                 	__GETW2SX 90
0015a8 9614      	ADIW R26,4
0015a9 940e 1c0f 	CALL __GETD1P
0015ab c031      	RJMP _0x200010F
                 _0x200007D:
0015ac ff02      	SBRS R16,2
0015ad c018      	RJMP _0x200007F
                +
0015ae 01fe     +MOVW R30 , R28
0015af 5ae6     +SUBI R30 , LOW ( - 90 )
0015b0 4fff     +SBCI R31 , HIGH ( - 90 )
0015b1 9001     +LD R0 , Z +
0015b2 81f0     +LD R31 , Z
0015b3 2de0     +MOV R30 , R0
                 	__GETW1SX 90
0015b4 9734      	SBIW R30,4
                +
0015b5 01de     +MOVW R26 , R28
0015b6 5aa6     +SUBI R26 , LOW ( - 90 )
0015b7 4fbf     +SBCI R27 , HIGH ( - 90 )
0015b8 93ed     +ST X + , R30
0015b9 93fc     +ST X , R31
                 	__PUTW1SX 90
                +
0015ba 01de     +MOVW R26 , R28
0015bb 5aa6     +SUBI R26 , LOW ( - 90 )
0015bc 4fbf     +SBCI R27 , HIGH ( - 90 )
0015bd 900d     +LD R0 , X +
0015be 91bc     +LD R27 , X
0015bf 2da0     +MOV R26 , R0
                 	__GETW2SX 90
0015c0 9614      	ADIW R26,4
0015c1 940e 1c0b 	CALL __GETW1P
0015c3 940e 1b71 	CALL __CWD1
0015c5 c017      	RJMP _0x200010F
                 _0x200007F:
                +
0015c6 01fe     +MOVW R30 , R28
0015c7 5ae6     +SUBI R30 , LOW ( - 90 )
0015c8 4fff     +SBCI R31 , HIGH ( - 90 )
0015c9 9001     +LD R0 , Z +
0015ca 81f0     +LD R31 , Z
0015cb 2de0     +MOV R30 , R0
                 	__GETW1SX 90
0015cc 9734      	SBIW R30,4
                +
0015cd 01de     +MOVW R26 , R28
0015ce 5aa6     +SUBI R26 , LOW ( - 90 )
0015cf 4fbf     +SBCI R27 , HIGH ( - 90 )
0015d0 93ed     +ST X + , R30
0015d1 93fc     +ST X , R31
                 	__PUTW1SX 90
                +
0015d2 01de     +MOVW R26 , R28
0015d3 5aa6     +SUBI R26 , LOW ( - 90 )
0015d4 4fbf     +SBCI R27 , HIGH ( - 90 )
0015d5 900d     +LD R0 , X +
0015d6 91bc     +LD R27 , X
0015d7 2da0     +MOV R26 , R0
                 	__GETW2SX 90
0015d8 9614      	ADIW R26,4
0015d9 940e 1c0b 	CALL __GETW1P
0015db 2766      	CLR  R22
0015dc 2777      	CLR  R23
                 _0x200010F:
                +
0015dd 87ea     +STD Y + 10 , R30
0015de 87fb     +STD Y + 10 + 1 , R31
0015df 876c     +STD Y + 10 + 2 , R22
0015e0 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0015e1 ff02      	SBRS R16,2
0015e2 c016      	RJMP _0x2000081
0015e3 85ad      	LDD  R26,Y+13
0015e4 23aa      	TST  R26
0015e5 f462      	BRPL _0x2000082
                +
0015e6 85ea     +LDD R30 , Y + 10
0015e7 85fb     +LDD R31 , Y + 10 + 1
0015e8 856c     +LDD R22 , Y + 10 + 2
0015e9 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0015ea 940e 1b3d 	CALL __ANEGD1
                +
0015ec 87ea     +STD Y + 10 , R30
0015ed 87fb     +STD Y + 10 + 1 , R31
0015ee 876c     +STD Y + 10 + 2 , R22
0015ef 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0015f0 e2ed      	LDI  R30,LOW(45)
0015f1 8bed      	STD  Y+21,R30
                 _0x2000082:
0015f2 89ed      	LDD  R30,Y+21
0015f3 30e0      	CPI  R30,0
0015f4 f019      	BREQ _0x2000083
0015f5 5f1f      	SUBI R17,-LOW(1)
0015f6 5f4f      	SUBI R20,-LOW(1)
0015f7 c001      	RJMP _0x2000084
                 _0x2000083:
0015f8 7f0b      	ANDI R16,LOW(251)
                 _0x2000084:
                 _0x2000081:
0015f9 2f34      	MOV  R19,R20
                 _0x200006D:
0015fa fd00      	SBRC R16,0
0015fb c01a      	RJMP _0x2000085
                 _0x2000086:
0015fc 1715      	CP   R17,R21
0015fd f410      	BRSH _0x2000089
0015fe 1735      	CP   R19,R21
0015ff f008      	BRLO _0x200008A
                 _0x2000089:
001600 c015      	RJMP _0x2000088
                 _0x200008A:
001601 ff07      	SBRS R16,7
001602 c008      	RJMP _0x200008B
001603 ff02      	SBRS R16,2
001604 c004      	RJMP _0x200008C
001605 7f0b      	ANDI R16,LOW(251)
001606 892d      	LDD  R18,Y+21
001607 5011      	SUBI R17,LOW(1)
001608 c001      	RJMP _0x200008D
                 _0x200008C:
001609 e320      	LDI  R18,LOW(48)
                 _0x200008D:
00160a c001      	RJMP _0x200008E
                 _0x200008B:
00160b e220      	LDI  R18,LOW(32)
                 _0x200008E:
00160c 932a      	ST   -Y,R18
00160d 81ef      	LDD  R30,Y+7
00160e 85f8      	LDD  R31,Y+7+1
00160f 93fa      	ST   -Y,R31
001610 93ea      	ST   -Y,R30
001611 85eb      	LDD  R30,Y+11
001612 85fc      	LDD  R31,Y+11+1
001613 9509      	ICALL
001614 5051      	SUBI R21,LOW(1)
001615 cfe6      	RJMP _0x2000086
                 _0x2000088:
                 _0x2000085:
                 _0x200008F:
001616 1714      	CP   R17,R20
001617 f540      	BRSH _0x2000091
001618 6100      	ORI  R16,LOW(16)
001619 ff02      	SBRS R16,2
00161a c017      	RJMP _0x2000092
00161b 7f0b      	ANDI R16,LOW(251)
00161c 89ed      	LDD  R30,Y+21
00161d 93ea      	ST   -Y,R30
                +
00161e 01fe     +MOVW R30 , R28
00161f 5ae9     +SUBI R30 , LOW ( - 87 )
001620 4fff     +SBCI R31 , HIGH ( - 87 )
001621 9001     +LD R0 , Z +
001622 81f0     +LD R31 , Z
001623 2de0     +MOV R30 , R0
                 	__GETW1SX 87
001624 93fa      	ST   -Y,R31
001625 93ea      	ST   -Y,R30
                +
001626 01fe     +MOVW R30 , R28
001627 5ae5     +SUBI R30 , LOW ( - 91 )
001628 4fff     +SBCI R31 , HIGH ( - 91 )
001629 9001     +LD R0 , Z +
00162a 81f0     +LD R31 , Z
00162b 2de0     +MOV R30 , R0
                 	__GETW1SX 91
00162c 9509      	ICALL
00162d 3050      	CPI  R21,0
00162e f009      	BREQ _0x2000093
00162f 5051      	SUBI R21,LOW(1)
                 _0x2000093:
001630 5011      	SUBI R17,LOW(1)
001631 5041      	SUBI R20,LOW(1)
                 _0x2000092:
001632 e3e0      	LDI  R30,LOW(48)
001633 93ea      	ST   -Y,R30
001634 81ef      	LDD  R30,Y+7
001635 85f8      	LDD  R31,Y+7+1
001636 93fa      	ST   -Y,R31
001637 93ea      	ST   -Y,R30
001638 85eb      	LDD  R30,Y+11
001639 85fc      	LDD  R31,Y+11+1
00163a 9509      	ICALL
00163b 3050      	CPI  R21,0
00163c f009      	BREQ _0x2000094
00163d 5051      	SUBI R21,LOW(1)
                 _0x2000094:
00163e 5041      	SUBI R20,LOW(1)
00163f cfd6      	RJMP _0x200008F
                 _0x2000091:
001640 2f31      	MOV  R19,R17
001641 89ec      	LDD  R30,Y+20
001642 30e0      	CPI  R30,0
001643 f4e9      	BRNE _0x2000095
                 _0x2000096:
001644 3030      	CPI  R19,0
001645 f0d1      	BREQ _0x2000098
001646 ff03      	SBRS R16,3
001647 c006      	RJMP _0x2000099
001648 85ee      	LDD  R30,Y+14
001649 85ff      	LDD  R31,Y+14+1
00164a 9125      	LPM  R18,Z+
00164b 87ee      	STD  Y+14,R30
00164c 87ff      	STD  Y+14+1,R31
00164d c005      	RJMP _0x200009A
                 _0x2000099:
00164e 85ae      	LDD  R26,Y+14
00164f 85bf      	LDD  R27,Y+14+1
001650 912d      	LD   R18,X+
001651 87ae      	STD  Y+14,R26
001652 87bf      	STD  Y+14+1,R27
                 _0x200009A:
001653 932a      	ST   -Y,R18
001654 81ef      	LDD  R30,Y+7
001655 85f8      	LDD  R31,Y+7+1
001656 93fa      	ST   -Y,R31
001657 93ea      	ST   -Y,R30
001658 85eb      	LDD  R30,Y+11
001659 85fc      	LDD  R31,Y+11+1
00165a 9509      	ICALL
00165b 3050      	CPI  R21,0
00165c f009      	BREQ _0x200009B
00165d 5051      	SUBI R21,LOW(1)
                 _0x200009B:
00165e 5031      	SUBI R19,LOW(1)
00165f cfe4      	RJMP _0x2000096
                 _0x2000098:
001660 c074      	RJMP _0x200009C
                 _0x2000095:
                 _0x200009E:
                +
001661 89e8     +LDD R30 , Y + 16
001662 89f9     +LDD R31 , Y + 16 + 1
001663 896a     +LDD R22 , Y + 16 + 2
001664 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
001665 85aa     +LDD R26 , Y + 10
001666 85bb     +LDD R27 , Y + 10 + 1
001667 858c     +LDD R24 , Y + 10 + 2
001668 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
001669 940e 1bae 	CALL __DIVD21U
00166b 2f2e      	MOV  R18,R30
00166c 302a      	CPI  R18,10
00166d f030      	BRLO _0x20000A0
00166e ff03      	SBRS R16,3
00166f c002      	RJMP _0x20000A1
001670 5c29      	SUBI R18,-LOW(55)
001671 c001      	RJMP _0x20000A2
                 _0x20000A1:
001672 5a29      	SUBI R18,-LOW(87)
                 _0x20000A2:
001673 c001      	RJMP _0x20000A3
                 _0x20000A0:
001674 5d20      	SUBI R18,-LOW(48)
                 _0x20000A3:
001675 fd04      	SBRC R16,4
001676 c032      	RJMP _0x20000A5
001677 3321      	CPI  R18,49
001678 f460      	BRSH _0x20000A7
                +
001679 89a8     +LDD R26 , Y + 16
00167a 89b9     +LDD R27 , Y + 16 + 1
00167b 898a     +LDD R24 , Y + 16 + 2
00167c 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
00167d 30a1     +CPI R26 , LOW ( 0x1 )
00167e e0e0     +LDI R30 , HIGH ( 0x1 )
00167f 07be     +CPC R27 , R30
001680 e0e0     +LDI R30 , BYTE3 ( 0x1 )
001681 078e     +CPC R24 , R30
001682 e0e0     +LDI R30 , BYTE4 ( 0x1 )
001683 079e     +CPC R25 , R30
                 	__CPD2N 0x1
001684 f409      	BRNE _0x20000A6
                 _0x20000A7:
001685 c00b      	RJMP _0x20000A9
                 _0x20000A6:
001686 1743      	CP   R20,R19
001687 f440      	BRSH _0x2000110
001688 1753      	CP   R21,R19
001689 f010      	BRLO _0x20000AC
00168a ff00      	SBRS R16,0
00168b c001      	RJMP _0x20000AD
                 _0x20000AC:
00168c c027      	RJMP _0x20000AB
                 _0x20000AD:
00168d e220      	LDI  R18,LOW(32)
00168e ff07      	SBRS R16,7
00168f c019      	RJMP _0x20000AE
                 _0x2000110:
001690 e320      	LDI  R18,LOW(48)
                 _0x20000A9:
001691 6100      	ORI  R16,LOW(16)
001692 ff02      	SBRS R16,2
001693 c015      	RJMP _0x20000AF
001694 7f0b      	ANDI R16,LOW(251)
001695 89ed      	LDD  R30,Y+21
001696 93ea      	ST   -Y,R30
                +
001697 01fe     +MOVW R30 , R28
001698 5ae9     +SUBI R30 , LOW ( - 87 )
001699 4fff     +SBCI R31 , HIGH ( - 87 )
00169a 9001     +LD R0 , Z +
00169b 81f0     +LD R31 , Z
00169c 2de0     +MOV R30 , R0
                 	__GETW1SX 87
00169d 93fa      	ST   -Y,R31
00169e 93ea      	ST   -Y,R30
                +
00169f 01fe     +MOVW R30 , R28
0016a0 5ae5     +SUBI R30 , LOW ( - 91 )
0016a1 4fff     +SBCI R31 , HIGH ( - 91 )
0016a2 9001     +LD R0 , Z +
0016a3 81f0     +LD R31 , Z
0016a4 2de0     +MOV R30 , R0
                 	__GETW1SX 91
0016a5 9509      	ICALL
0016a6 3050      	CPI  R21,0
0016a7 f009      	BREQ _0x20000B0
0016a8 5051      	SUBI R21,LOW(1)
                 _0x20000B0:
                 _0x20000AF:
                 _0x20000AE:
                 _0x20000A5:
0016a9 932a      	ST   -Y,R18
0016aa 81ef      	LDD  R30,Y+7
0016ab 85f8      	LDD  R31,Y+7+1
0016ac 93fa      	ST   -Y,R31
0016ad 93ea      	ST   -Y,R30
0016ae 85eb      	LDD  R30,Y+11
0016af 85fc      	LDD  R31,Y+11+1
0016b0 9509      	ICALL
0016b1 3050      	CPI  R21,0
0016b2 f009      	BREQ _0x20000B1
0016b3 5051      	SUBI R21,LOW(1)
                 _0x20000B1:
                 _0x20000AB:
0016b4 5031      	SUBI R19,LOW(1)
                +
0016b5 89e8     +LDD R30 , Y + 16
0016b6 89f9     +LDD R31 , Y + 16 + 1
0016b7 896a     +LDD R22 , Y + 16 + 2
0016b8 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0016b9 85aa     +LDD R26 , Y + 10
0016ba 85bb     +LDD R27 , Y + 10 + 1
0016bb 858c     +LDD R24 , Y + 10 + 2
0016bc 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0016bd 940e 1bed 	CALL __MODD21U
                +
0016bf 87ea     +STD Y + 10 , R30
0016c0 87fb     +STD Y + 10 + 1 , R31
0016c1 876c     +STD Y + 10 + 2 , R22
0016c2 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0016c3 89ec      	LDD  R30,Y+20
                +
0016c4 89a8     +LDD R26 , Y + 16
0016c5 89b9     +LDD R27 , Y + 16 + 1
0016c6 898a     +LDD R24 , Y + 16 + 2
0016c7 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0016c8 27ff      	CLR  R31
0016c9 2766      	CLR  R22
0016ca 2777      	CLR  R23
0016cb 940e 1bae 	CALL __DIVD21U
                +
0016cd 8be8     +STD Y + 16 , R30
0016ce 8bf9     +STD Y + 16 + 1 , R31
0016cf 8b6a     +STD Y + 16 + 2 , R22
0016d0 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0016d1 940e 1c40 	CALL __CPD10
0016d3 f009      	BREQ _0x200009F
0016d4 cf8c      	RJMP _0x200009E
                 _0x200009F:
                 _0x200009C:
0016d5 ff00      	SBRS R16,0
0016d6 c00d      	RJMP _0x20000B2
                 _0x20000B3:
0016d7 3050      	CPI  R21,0
0016d8 f059      	BREQ _0x20000B5
0016d9 5051      	SUBI R21,LOW(1)
0016da e2e0      	LDI  R30,LOW(32)
0016db 93ea      	ST   -Y,R30
0016dc 81ef      	LDD  R30,Y+7
0016dd 85f8      	LDD  R31,Y+7+1
0016de 93fa      	ST   -Y,R31
0016df 93ea      	ST   -Y,R30
0016e0 85eb      	LDD  R30,Y+11
0016e1 85fc      	LDD  R31,Y+11+1
0016e2 9509      	ICALL
0016e3 cff3      	RJMP _0x20000B3
                 _0x20000B5:
                 _0x20000B2:
                 _0x20000B6:
                 _0x2000054:
                 _0x200010E:
0016e4 e010      	LDI  R17,LOW(0)
                 _0x2000035:
0016e5 cd1d      	RJMP _0x2000030
                 _0x2000032:
0016e6 81ae      	LDD  R26,Y+6
0016e7 81bf      	LDD  R27,Y+6+1
0016e8 940e 1c0b 	CALL __GETW1P
0016ea 940e 1c56 	CALL __LOADLOCR6
0016ec 96ef      	ADIW R28,63
0016ed 966f      	ADIW R28,31
0016ee 9508      	RET
                 _sprintf:
0016ef 92ff      	PUSH R15
0016f0 2ef8      	MOV  R15,R24
0016f1 9726      	SBIW R28,6
0016f2 940e 1c51 	CALL __SAVELOCR4
0016f4 01de      	MOVW R26,R28
0016f5 961c      	ADIW R26,12
0016f6 940e 1b2b 	CALL __ADDW2R15
0016f8 940e 1c0b 	CALL __GETW1P
0016fa 9730      	SBIW R30,0
0016fb f419      	BRNE _0x20000B7
0016fc efef      	LDI  R30,LOW(65535)
0016fd efff      	LDI  R31,HIGH(65535)
0016fe c029      	RJMP _0x20A0006
                 _0x20000B7:
0016ff 01de      	MOVW R26,R28
001700 9616      	ADIW R26,6
001701 940e 1b2b 	CALL __ADDW2R15
001703 018d      	MOVW R16,R26
001704 01de      	MOVW R26,R28
001705 961c      	ADIW R26,12
001706 940e 1b2b 	CALL __ADDW2R15
001708 940e 1c0b 	CALL __GETW1P
00170a 83ee      	STD  Y+6,R30
00170b 83ff      	STD  Y+6+1,R31
00170c e0e0      	LDI  R30,LOW(0)
00170d 87e8      	STD  Y+8,R30
00170e 87e9      	STD  Y+8+1,R30
00170f 01de      	MOVW R26,R28
001710 961a      	ADIW R26,10
001711 940e 1b2b 	CALL __ADDW2R15
001713 940e 1c0b 	CALL __GETW1P
001715 93fa      	ST   -Y,R31
001716 93ea      	ST   -Y,R30
001717 931a      	ST   -Y,R17
001718 930a      	ST   -Y,R16
001719 e4e3      	LDI  R30,LOW(_put_buff_G100)
00171a e1f2      	LDI  R31,HIGH(_put_buff_G100)
00171b 93fa      	ST   -Y,R31
00171c 93ea      	ST   -Y,R30
00171d 01fe      	MOVW R30,R28
00171e 963a      	ADIW R30,10
00171f 93fa      	ST   -Y,R31
001720 93ea      	ST   -Y,R30
001721 dcc6      	RCALL __print_G100
001722 019f      	MOVW R18,R30
001723 81ae      	LDD  R26,Y+6
001724 81bf      	LDD  R27,Y+6+1
001725 e0e0      	LDI  R30,LOW(0)
001726 93ec      	ST   X,R30
001727 01f9      	MOVW R30,R18
                 _0x20A0006:
001728 940e 1c58 	CALL __LOADLOCR4
00172a 962a      	ADIW R28,10
00172b 90ff      	POP  R15
00172c 9508      	RET
                 _printf:
00172d 92ff      	PUSH R15
00172e 2ef8      	MOV  R15,R24
00172f 9726      	SBIW R28,6
001730 931a      	ST   -Y,R17
001731 930a      	ST   -Y,R16
001732 01de      	MOVW R26,R28
001733 9614      	ADIW R26,4
001734 940e 1b2b 	CALL __ADDW2R15
001736 018d      	MOVW R16,R26
001737 e0e0      	LDI  R30,LOW(0)
001738 83ec      	STD  Y+4,R30
001739 83ed      	STD  Y+4+1,R30
00173a 83ee      	STD  Y+6,R30
00173b 83ef      	STD  Y+6+1,R30
00173c 01de      	MOVW R26,R28
00173d 9618      	ADIW R26,8
00173e 940e 1b2b 	CALL __ADDW2R15
001740 940e 1c0b 	CALL __GETW1P
001742 93fa      	ST   -Y,R31
001743 93ea      	ST   -Y,R30
001744 931a      	ST   -Y,R17
001745 930a      	ST   -Y,R16
001746 e3e6      	LDI  R30,LOW(_put_usart_G100)
001747 e1f2      	LDI  R31,HIGH(_put_usart_G100)
001748 93fa      	ST   -Y,R31
001749 93ea      	ST   -Y,R30
00174a 01fe      	MOVW R30,R28
00174b 9638      	ADIW R30,8
00174c 93fa      	ST   -Y,R31
00174d 93ea      	ST   -Y,R30
00174e dc99      	RCALL __print_G100
00174f 8119      	LDD  R17,Y+1
001750 8108      	LDD  R16,Y+0
001751 9628      	ADIW R28,8
001752 90ff      	POP  R15
001753 9508      	RET
                 
                 	.CSEG
                 _memset:
001754 81b9          ldd  r27,y+1
001755 81a8          ld   r26,y
001756 9610          adiw r26,0
001757 f031          breq memset1
001758 81fc          ldd  r31,y+4
001759 81eb          ldd  r30,y+3
00175a 816a          ldd  r22,y+2
                 memset0:
00175b 9361          st   z+,r22
00175c 9711          sbiw r26,1
00175d f7e9          brne memset0
                 memset1:
00175e 81eb          ldd  r30,y+3
00175f 81fc          ldd  r31,y+4
                 _0x20A0005:
001760 9625      	ADIW R28,5
001761 9508      	RET
                 _strcpyf:
001762 91e9          ld   r30,y+
001763 91f9          ld   r31,y+
001764 91a9          ld   r26,y+
001765 91b9          ld   r27,y+
001766 01cd          movw r24,r26
                 strcpyf0:
001767 9005      	lpm  r0,z+
001768 920d          st   x+,r0
001769 2000          tst  r0
00176a f7e1          brne strcpyf0
00176b 01fc          movw r30,r24
00176c 9508          ret
                 _strlen:
00176d 91a9          ld   r26,y+
00176e 91b9          ld   r27,y+
00176f 27ee          clr  r30
001770 27ff          clr  r31
                 strlen0:
001771 916d          ld   r22,x+
001772 2366          tst  r22
001773 f011          breq strlen1
001774 9631          adiw r30,1
001775 cffb          rjmp strlen0
                 strlen1:
001776 9508          ret
                 _strlenf:
001777 27aa          clr  r26
001778 27bb          clr  r27
001779 91e9          ld   r30,y+
00177a 91f9          ld   r31,y+
                 strlenf0:
00177b 9005      	lpm  r0,z+
00177c 2000          tst  r0
00177d f011          breq strlenf1
00177e 9611          adiw r26,1
00177f cffb          rjmp strlenf0
                 strlenf1:
001780 01fd          movw r30,r26
001781 9508          ret
                 _strpbrkf:
001782 81bb          ldd  r27,y+3
001783 81aa          ldd  r26,y+2
                 strpbrkf0:
001784 916c          ld   r22,x
001785 2366          tst  r22
001786 f061          breq strpbrkf2
001787 81f9          ldd  r31,y+1
001788 81e8          ld   r30,y
                 strpbrkf1:
001789 95c8      	lpm
00178a 2000          tst  r0
00178b f029          breq strpbrkf3
00178c 9631          adiw r30,1
00178d 1560          cp   r22,r0
00178e f7d1          brne strpbrkf1
00178f 01fd          movw r30,r26
001790 c004          rjmp strpbrkf4
                 strpbrkf3:
001791 9611          adiw r26,1
001792 cff1          rjmp strpbrkf0
                 strpbrkf2:
001793 27ee          clr  r30
001794 27ff          clr  r31
                 strpbrkf4:
001795 940c 1974 	JMP  _0x20A0001
                 _strstr:
001797 81aa          ldd  r26,y+2
001798 81bb          ldd  r27,y+3
001799 01cd          movw r24,r26
                 strstr0:
00179a 81e8          ld   r30,y
00179b 81f9          ldd  r31,y+1
                 strstr1:
00179c 9171          ld   r23,z+
00179d 2377          tst  r23
00179e f411          brne strstr2
00179f 01fc          movw r30,r24
0017a0 c009          rjmp strstr3
                 strstr2:
0017a1 916d          ld   r22,x+
0017a2 1767          cp   r22,r23
0017a3 f3c1          breq strstr1
0017a4 9601          adiw r24,1
0017a5 01dc          movw r26,r24
0017a6 2366          tst  r22
0017a7 f791          brne strstr0
0017a8 27ee          clr  r30
0017a9 27ff          clr  r31
                 strstr3:
0017aa 940c 1974 	JMP  _0x20A0001
                 _strspnf:
0017ac 81bb          ldd  r27,y+3
0017ad 81aa          ldd  r26,y+2
0017ae 2788          clr  r24
0017af 2799          clr  r25
                 strspnf0:
0017b0 916d          ld   r22,x+
0017b1 2366          tst  r22
0017b2 f049          breq strspnf2
0017b3 81f9          ldd  r31,y+1
0017b4 81e8          ld   r30,y
                 strspnf1:
0017b5 9005      	lpm  r0,z+
0017b6 2000          tst  r0
0017b7 f021          breq strspnf2
0017b8 1560          cp   r22,r0
0017b9 f7d9          brne strspnf1
0017ba 9601          adiw r24,1
0017bb cff4          rjmp strspnf0
                 strspnf2:
0017bc 01fc          movw r30,r24
0017bd 940c 1974 	JMP  _0x20A0001
                 _strtok:
0017bf 931a      	ST   -Y,R17
0017c0 930a      	ST   -Y,R16
0017c1 81ec      	LDD  R30,Y+4
0017c2 81fd      	LDD  R31,Y+4+1
0017c3 9730      	SBIW R30,0
0017c4 f479      	BRNE _0x2020003
0017c5 91e0 14ba 	LDS  R30,_p_S1010024000
0017c7 91f0 14bb 	LDS  R31,_p_S1010024000+1
0017c9 9730      	SBIW R30,0
0017ca f419      	BRNE _0x2020004
0017cb e0e0      	LDI  R30,LOW(0)
0017cc e0f0      	LDI  R31,HIGH(0)
0017cd c03b      	RJMP _0x20A0004
                 _0x2020004:
0017ce 91e0 14ba 	LDS  R30,_p_S1010024000
0017d0 91f0 14bb 	LDS  R31,_p_S1010024000+1
0017d2 83ec      	STD  Y+4,R30
0017d3 83fd      	STD  Y+4+1,R31
                 _0x2020003:
0017d4 81ec      	LDD  R30,Y+4
0017d5 81fd      	LDD  R31,Y+4+1
0017d6 93fa      	ST   -Y,R31
0017d7 93ea      	ST   -Y,R30
0017d8 81ec      	LDD  R30,Y+4
0017d9 81fd      	LDD  R31,Y+4+1
0017da 93fa      	ST   -Y,R31
0017db 93ea      	ST   -Y,R30
0017dc 940e 17ac 	CALL _strspnf
0017de 81ac      	LDD  R26,Y+4
0017df 81bd      	LDD  R27,Y+4+1
0017e0 0fea      	ADD  R30,R26
0017e1 1ffb      	ADC  R31,R27
0017e2 83ec      	STD  Y+4,R30
0017e3 83fd      	STD  Y+4+1,R31
0017e4 81ac      	LDD  R26,Y+4
0017e5 81bd      	LDD  R27,Y+4+1
0017e6 91ec      	LD   R30,X
0017e7 30e0      	CPI  R30,0
0017e8 f441      	BRNE _0x2020005
0017e9 e0e0      	LDI  R30,LOW(0)
0017ea 93e0 14ba 	STS  _p_S1010024000,R30
0017ec 93e0 14bb 	STS  _p_S1010024000+1,R30
0017ee e0e0      	LDI  R30,LOW(0)
0017ef e0f0      	LDI  R31,HIGH(0)
0017f0 c018      	RJMP _0x20A0004
                 _0x2020005:
0017f1 81ec      	LDD  R30,Y+4
0017f2 81fd      	LDD  R31,Y+4+1
0017f3 93fa      	ST   -Y,R31
0017f4 93ea      	ST   -Y,R30
0017f5 81ec      	LDD  R30,Y+4
0017f6 81fd      	LDD  R31,Y+4+1
0017f7 93fa      	ST   -Y,R31
0017f8 93ea      	ST   -Y,R30
0017f9 940e 1782 	CALL _strpbrkf
0017fb 018f      	MOVW R16,R30
0017fc 9730      	SBIW R30,0
0017fd f029      	BREQ _0x2020006
0017fe 01d8      	MOVW R26,R16
                +
0017ff 5f0f     +SUBI R16 , LOW ( - 1 )
001800 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
001801 e0e0      	LDI  R30,LOW(0)
001802 93ec      	ST   X,R30
                 _0x2020006:
                +
001803 9300 14ba+STS _p_S1010024000 + ( 0 ) , R16
001805 9310 14bb+STS _p_S1010024000 + ( 0 ) + 1 , R17
                 	__PUTWMRN _p_S1010024000,0,16,17
001807 81ec      	LDD  R30,Y+4
001808 81fd      	LDD  R31,Y+4+1
                 _0x20A0004:
001809 8119      	LDD  R17,Y+1
00180a 8108      	LDD  R16,Y+0
00180b 9626      	ADIW R28,6
00180c 9508      	RET
                 
                 	.CSEG
                 _ftoa:
00180d 9724      	SBIW R28,4
00180e e0e0      	LDI  R30,LOW(0)
00180f 83e8      	ST   Y,R30
001810 83e9      	STD  Y+1,R30
001811 83ea      	STD  Y+2,R30
001812 e3ef      	LDI  R30,LOW(63)
001813 83eb      	STD  Y+3,R30
001814 931a      	ST   -Y,R17
001815 930a      	ST   -Y,R16
001816 85eb      	LDD  R30,Y+11
001817 85fc      	LDD  R31,Y+11+1
001818 3fef      	CPI  R30,LOW(0xFFFF)
001819 efaf      	LDI  R26,HIGH(0xFFFF)
00181a 07fa      	CPC  R31,R26
00181b f459      	BRNE _0x204000D
00181c 81ee      	LDD  R30,Y+6
00181d 81ff      	LDD  R31,Y+6+1
00181e 93fa      	ST   -Y,R31
00181f 93ea      	ST   -Y,R30
                +
001820 e8ec     +LDI R30 , LOW ( 2 * _0x2040000 + ( 0 ) )
001821 e0f2     +LDI R31 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW1FN _0x2040000,0
001822 93fa      	ST   -Y,R31
001823 93ea      	ST   -Y,R30
001824 940e 1762 	CALL _strcpyf
001826 c105      	RJMP _0x20A0003
                 _0x204000D:
001827 3fef      	CPI  R30,LOW(0x7FFF)
001828 e7af      	LDI  R26,HIGH(0x7FFF)
001829 07fa      	CPC  R31,R26
00182a f459      	BRNE _0x204000C
00182b 81ee      	LDD  R30,Y+6
00182c 81ff      	LDD  R31,Y+6+1
00182d 93fa      	ST   -Y,R31
00182e 93ea      	ST   -Y,R30
                +
00182f e8ed     +LDI R30 , LOW ( 2 * _0x2040000 + ( 1 ) )
001830 e0f2     +LDI R31 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW1FN _0x2040000,1
001831 93fa      	ST   -Y,R31
001832 93ea      	ST   -Y,R30
001833 940e 1762 	CALL _strcpyf
001835 c0f6      	RJMP _0x20A0003
                 _0x204000C:
001836 85ac      	LDD  R26,Y+12
001837 23aa      	TST  R26
001838 f492      	BRPL _0x204000F
                +
001839 85e9     +LDD R30 , Y + 9
00183a 85fa     +LDD R31 , Y + 9 + 1
00183b 856b     +LDD R22 , Y + 9 + 2
00183c 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00183d 940e 1982 	CALL __ANEGF1
                +
00183f 87e9     +STD Y + 9 , R30
001840 87fa     +STD Y + 9 + 1 , R31
001841 876b     +STD Y + 9 + 2 , R22
001842 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001843 81ae      	LDD  R26,Y+6
001844 81bf      	LDD  R27,Y+6+1
001845 9611      	ADIW R26,1
001846 83ae      	STD  Y+6,R26
001847 83bf      	STD  Y+6+1,R27
001848 9711      	SBIW R26,1
001849 e2ed      	LDI  R30,LOW(45)
00184a 93ec      	ST   X,R30
                 _0x204000F:
00184b 85a8      	LDD  R26,Y+8
00184c 30a7      	CPI  R26,LOW(0x7)
00184d f010      	BRLO _0x2040010
00184e e0e6      	LDI  R30,LOW(6)
00184f 87e8      	STD  Y+8,R30
                 _0x2040010:
001850 8518      	LDD  R17,Y+8
                 _0x2040011:
001851 2fe1      	MOV  R30,R17
001852 5011      	SUBI R17,1
001853 30e0      	CPI  R30,0
001854 f079      	BREQ _0x2040013
                +
001855 81aa     +LDD R26 , Y + 2
001856 81bb     +LDD R27 , Y + 2 + 1
001857 818c     +LDD R24 , Y + 2 + 2
001858 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
001859 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
00185a ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
00185b ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00185c e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00185d 940e 1a78 	CALL __MULF12
                +
00185f 83ea     +STD Y + 2 , R30
001860 83fb     +STD Y + 2 + 1 , R31
001861 836c     +STD Y + 2 + 2 , R22
001862 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001863 cfed      	RJMP _0x2040011
                 _0x2040013:
                +
001864 81ea     +LDD R30 , Y + 2
001865 81fb     +LDD R31 , Y + 2 + 1
001866 816c     +LDD R22 , Y + 2 + 2
001867 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
001868 85a9     +LDD R26 , Y + 9
001869 85ba     +LDD R27 , Y + 9 + 1
00186a 858b     +LDD R24 , Y + 9 + 2
00186b 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00186c 940e 1a28 	CALL __ADDF12
                +
00186e 87e9     +STD Y + 9 , R30
00186f 87fa     +STD Y + 9 + 1 , R31
001870 876b     +STD Y + 9 + 2 , R22
001871 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001872 e010      	LDI  R17,LOW(0)
                +
001873 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001874 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001875 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001876 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
                +
001877 83ea     +STD Y + 2 , R30
001878 83fb     +STD Y + 2 + 1 , R31
001879 836c     +STD Y + 2 + 2 , R22
00187a 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 _0x2040014:
                +
00187b 81ea     +LDD R30 , Y + 2
00187c 81fb     +LDD R31 , Y + 2 + 1
00187d 816c     +LDD R22 , Y + 2 + 2
00187e 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00187f 85a9     +LDD R26 , Y + 9
001880 85ba     +LDD R27 , Y + 9 + 1
001881 858b     +LDD R24 , Y + 9 + 2
001882 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001883 940e 1b0b 	CALL __CMPF12
001885 f080      	BRLO _0x2040016
                +
001886 81aa     +LDD R26 , Y + 2
001887 81bb     +LDD R27 , Y + 2 + 1
001888 818c     +LDD R24 , Y + 2 + 2
001889 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
00188a e0e0     +LDI R30 , LOW ( 0x41200000 )
00188b e0f0     +LDI R31 , HIGH ( 0x41200000 )
00188c e260     +LDI R22 , BYTE3 ( 0x41200000 )
00188d e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00188e 940e 1a78 	CALL __MULF12
                +
001890 83ea     +STD Y + 2 , R30
001891 83fb     +STD Y + 2 + 1 , R31
001892 836c     +STD Y + 2 + 2 , R22
001893 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001894 5f1f      	SUBI R17,-LOW(1)
001895 cfe5      	RJMP _0x2040014
                 _0x2040016:
001896 3010      	CPI  R17,0
001897 f449      	BRNE _0x2040017
001898 81ae      	LDD  R26,Y+6
001899 81bf      	LDD  R27,Y+6+1
00189a 9611      	ADIW R26,1
00189b 83ae      	STD  Y+6,R26
00189c 83bf      	STD  Y+6+1,R27
00189d 9711      	SBIW R26,1
00189e e3e0      	LDI  R30,LOW(48)
00189f 93ec      	ST   X,R30
0018a0 c049      	RJMP _0x2040018
                 _0x2040017:
                 _0x2040019:
0018a1 2fe1      	MOV  R30,R17
0018a2 5011      	SUBI R17,1
0018a3 30e0      	CPI  R30,0
0018a4 f411      	BRNE PC+3
0018a5 940c 18ea 	JMP _0x204001B
                +
0018a7 81aa     +LDD R26 , Y + 2
0018a8 81bb     +LDD R27 , Y + 2 + 1
0018a9 818c     +LDD R24 , Y + 2 + 2
0018aa 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
0018ab eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0018ac ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0018ad ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0018ae e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0018af 940e 1a78 	CALL __MULF12
                +
0018b1 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0018b2 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0018b3 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0018b4 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0018b5 940e 1a28 	CALL __ADDF12
0018b7 940e 1c2e 	CALL __PUTPARD1
0018b9 940e 195f 	CALL _floor
                +
0018bb 83ea     +STD Y + 2 , R30
0018bc 83fb     +STD Y + 2 + 1 , R31
0018bd 836c     +STD Y + 2 + 2 , R22
0018be 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
0018bf 85a9     +LDD R26 , Y + 9
0018c0 85ba     +LDD R27 , Y + 9 + 1
0018c1 858b     +LDD R24 , Y + 9 + 2
0018c2 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0018c3 940e 1ac6 	CALL __DIVF21
0018c5 940e 19b5 	CALL __CFD1U
0018c7 2f0e      	MOV  R16,R30
0018c8 81ae      	LDD  R26,Y+6
0018c9 81bf      	LDD  R27,Y+6+1
0018ca 9611      	ADIW R26,1
0018cb 83ae      	STD  Y+6,R26
0018cc 83bf      	STD  Y+6+1,R27
0018cd 9711      	SBIW R26,1
0018ce 2fe0      	MOV  R30,R16
0018cf 5de0      	SUBI R30,-LOW(48)
0018d0 93ec      	ST   X,R30
0018d1 2fe0      	MOV  R30,R16
0018d2 e0f0      	LDI  R31,0
                +
0018d3 81aa     +LDD R26 , Y + 2
0018d4 81bb     +LDD R27 , Y + 2 + 1
0018d5 818c     +LDD R24 , Y + 2 + 2
0018d6 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0018d7 940e 1b71 	CALL __CWD1
0018d9 940e 19ee 	CALL __CDF1
0018db 940e 1a78 	CALL __MULF12
                +
0018dd 85a9     +LDD R26 , Y + 9
0018de 85ba     +LDD R27 , Y + 9 + 1
0018df 858b     +LDD R24 , Y + 9 + 2
0018e0 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0018e1 940e 1c33 	CALL __SWAPD12
0018e3 940e 1a21 	CALL __SUBF12
                +
0018e5 87e9     +STD Y + 9 , R30
0018e6 87fa     +STD Y + 9 + 1 , R31
0018e7 876b     +STD Y + 9 + 2 , R22
0018e8 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
0018e9 cfb7      	RJMP _0x2040019
                 _0x204001B:
                 _0x2040018:
0018ea 85e8      	LDD  R30,Y+8
0018eb 30e0      	CPI  R30,0
0018ec f409      	BRNE _0x204001C
0018ed c03a      	RJMP _0x20A0002
                 _0x204001C:
0018ee 81ae      	LDD  R26,Y+6
0018ef 81bf      	LDD  R27,Y+6+1
0018f0 9611      	ADIW R26,1
0018f1 83ae      	STD  Y+6,R26
0018f2 83bf      	STD  Y+6+1,R27
0018f3 9711      	SBIW R26,1
0018f4 e2ee      	LDI  R30,LOW(46)
0018f5 93ec      	ST   X,R30
                 _0x204001D:
0018f6 85e8      	LDD  R30,Y+8
0018f7 50e1      	SUBI R30,LOW(1)
0018f8 87e8      	STD  Y+8,R30
0018f9 5fef      	SUBI R30,-LOW(1)
0018fa f169      	BREQ _0x204001F
                +
0018fb 85a9     +LDD R26 , Y + 9
0018fc 85ba     +LDD R27 , Y + 9 + 1
0018fd 858b     +LDD R24 , Y + 9 + 2
0018fe 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
                +
0018ff e0e0     +LDI R30 , LOW ( 0x41200000 )
001900 e0f0     +LDI R31 , HIGH ( 0x41200000 )
001901 e260     +LDI R22 , BYTE3 ( 0x41200000 )
001902 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001903 940e 1a78 	CALL __MULF12
                +
001905 87e9     +STD Y + 9 , R30
001906 87fa     +STD Y + 9 + 1 , R31
001907 876b     +STD Y + 9 + 2 , R22
001908 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001909 940e 19b5 	CALL __CFD1U
00190b 2f0e      	MOV  R16,R30
00190c 81ae      	LDD  R26,Y+6
00190d 81bf      	LDD  R27,Y+6+1
00190e 9611      	ADIW R26,1
00190f 83ae      	STD  Y+6,R26
001910 83bf      	STD  Y+6+1,R27
001911 9711      	SBIW R26,1
001912 2fe0      	MOV  R30,R16
001913 5de0      	SUBI R30,-LOW(48)
001914 93ec      	ST   X,R30
001915 2fe0      	MOV  R30,R16
001916 e0f0      	LDI  R31,0
                +
001917 85a9     +LDD R26 , Y + 9
001918 85ba     +LDD R27 , Y + 9 + 1
001919 858b     +LDD R24 , Y + 9 + 2
00191a 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00191b 940e 1b71 	CALL __CWD1
00191d 940e 19ee 	CALL __CDF1
00191f 940e 1c33 	CALL __SWAPD12
001921 940e 1a21 	CALL __SUBF12
                +
001923 87e9     +STD Y + 9 , R30
001924 87fa     +STD Y + 9 + 1 , R31
001925 876b     +STD Y + 9 + 2 , R22
001926 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001927 cfce      	RJMP _0x204001D
                 _0x204001F:
                 _0x20A0002:
001928 81ae      	LDD  R26,Y+6
001929 81bf      	LDD  R27,Y+6+1
00192a e0e0      	LDI  R30,LOW(0)
00192b 93ec      	ST   X,R30
                 _0x20A0003:
00192c 8119      	LDD  R17,Y+1
00192d 8108      	LDD  R16,Y+0
00192e 962d      	ADIW R28,13
00192f 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
001930 817b         ldd  r23,y+3
001931 816a         ldd  r22,y+2
001932 81f9         ldd  r31,y+1
001933 81e8         ld   r30,y
001934 fb77         bst  r23,7
001935 0f77         lsl  r23
001936 fd67         sbrc r22,7
001937 6071         sbr  r23,1
001938 2f97         mov  r25,r23
001939 579e         subi r25,0x7e
00193a f081         breq __ftrunc0
00193b f078         brcs __ftrunc0
00193c 3198         cpi  r25,24
00193d f490         brsh __ftrunc1
00193e 27aa         clr  r26
00193f 27bb         clr  r27
001940 2788         clr  r24
                 __ftrunc2:
001941 9408         sec
001942 9587         ror  r24
001943 95b7         ror  r27
001944 95a7         ror  r26
001945 959a         dec  r25
001946 f7d1         brne __ftrunc2
001947 23ea         and  r30,r26
001948 23fb         and  r31,r27
001949 2368         and  r22,r24
00194a c005         rjmp __ftrunc1
                 __ftrunc0:
00194b 94e8         clt
00194c 2777         clr  r23
00194d 27ee         clr  r30
00194e 27ff         clr  r31
00194f 2766         clr  r22
                 __ftrunc1:
001950 776f         cbr  r22,0x80
001951 9576         lsr  r23
001952 f408         brcc __ftrunc3
001953 6860         sbr  r22,0x80
                 __ftrunc3:
001954 f977         bld  r23,7
001955 91a9         ld   r26,y+
001956 91b9         ld   r27,y+
001957 9189         ld   r24,y+
001958 9199         ld   r25,y+
001959 17ea         cp   r30,r26
00195a 07fb         cpc  r31,r27
00195b 0768         cpc  r22,r24
00195c 0779         cpc  r23,r25
00195d fb97         bst  r25,7
00195e 9508         ret
                 _floor:
00195f 940e 1c24 	CALL __GETD1S0
001961 940e 1c2e 	CALL __PUTPARD1
001963 940e 1930 	CALL _ftrunc
001965 940e 1c29 	CALL __PUTD1S0
001967 f419          brne __floor1
                 __floor0:
001968 940e 1c24 	CALL __GETD1S0
00196a c009      	RJMP _0x20A0001
                 __floor1:
00196b f7e6          brtc __floor0
00196c 940e 1c24 	CALL __GETD1S0
                +
00196e e0a0     +LDI R26 , LOW ( 0x3F800000 )
00196f e0b0     +LDI R27 , HIGH ( 0x3F800000 )
001970 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
001971 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
001972 940e 1a21 	CALL __SUBF12
                 _0x20A0001:
001974 9624      	ADIW R28,4
001975 9508      	RET
                 
                 	.DSEG
                 _SERVER_IP:
000a8b           	.BYTE 0xF
                 _rx_buffer0:
000a9a           	.BYTE 0x3E8
                 _rx_buffer1:
000e82           	.BYTE 0x3E8
                 _rx_buffer2:
00126a           	.BYTE 0xFF
                 _rx_buffer3:
001369           	.BYTE 0xFF
                 _rx_wr_index2:
001468           	.BYTE 0x1
                 _rx_rd_index2:
001469           	.BYTE 0x1
                 _rx_counter2:
00146a           	.BYTE 0x1
                 _rx_wr_index3:
00146b           	.BYTE 0x1
                 _rx_rd_index3:
00146c           	.BYTE 0x1
                 _rx_counter3:
00146d           	.BYTE 0x1
                 _poutput:
00146e           	.BYTE 0x1
                 _milSecCounter:
00146f           	.BYTE 0x4
                 _dev_id_chk:
001473           	.BYTE 0x5
                 _tempervalue:
001478           	.BYTE 0x4
                 _ledID:
00147c           	.BYTE 0x8
                 _led_64bitaddress_high:
001484           	.BYTE 0x10
                 _led_64bitaddress_low:
001494           	.BYTE 0x10
                 _temperature:
0014a4           	.BYTE 0x4
                 _humidity:
0014a8           	.BYTE 0x4
                 _dustconcentration:
0014ac           	.BYTE 0x2
                 _current3k:
0014ae           	.BYTE 0x4
                 _current5k:
0014b2           	.BYTE 0x4
                 _voltage3k:
0014b6           	.BYTE 0x2
                 _voltage5k:
0014b8           	.BYTE 0x2
                 _p_S1010024000:
0014ba           	.BYTE 0x2
                 __seed_G102:
0014bc           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
001976 91e9      	ld   r30,y+
001977 91f9      	ld   r31,y+
001978 9630      	adiw r30,0
001979 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00197a ea80     +LDI R24 , LOW ( 0xFA0 )
00197b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00197c 9701     +SBIW R24 , 1
00197d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00197e 95a8      	wdr
00197f 9731      	sbiw r30,1
001980 f7c9      	brne __delay_ms0
                 __delay_ms1:
001981 9508      	ret
                 
                 __ANEGF1:
001982 9730      	SBIW R30,0
001983 4060      	SBCI R22,0
001984 4070      	SBCI R23,0
001985 f009      	BREQ __ANEGF10
001986 5870      	SUBI R23,0x80
                 __ANEGF10:
001987 9508      	RET
                 
                 __ROUND_REPACK:
001988 2355      	TST  R21
001989 f442      	BRPL __REPACK
00198a 3850      	CPI  R21,0x80
00198b f411      	BRNE __ROUND_REPACK0
00198c ffe0      	SBRS R30,0
00198d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00198e 9631      	ADIW R30,1
00198f 1f69      	ADC  R22,R25
001990 1f79      	ADC  R23,R25
001991 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001992 e850      	LDI  R21,0x80
001993 2757      	EOR  R21,R23
001994 f411      	BRNE __REPACK0
001995 935f      	PUSH R21
001996 c0cf      	RJMP __ZERORES
                 __REPACK0:
001997 3f5f      	CPI  R21,0xFF
001998 f031      	BREQ __REPACK1
001999 0f66      	LSL  R22
00199a 0c00      	LSL  R0
00199b 9557      	ROR  R21
00199c 9567      	ROR  R22
00199d 2f75      	MOV  R23,R21
00199e 9508      	RET
                 __REPACK1:
00199f 935f      	PUSH R21
0019a0 2000      	TST  R0
0019a1 f00a      	BRMI __REPACK2
0019a2 c0cf      	RJMP __MAXRES
                 __REPACK2:
0019a3 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0019a4 e850      	LDI  R21,0x80
0019a5 2e19      	MOV  R1,R25
0019a6 2215      	AND  R1,R21
0019a7 0f88      	LSL  R24
0019a8 1f99      	ROL  R25
0019a9 2795      	EOR  R25,R21
0019aa 0f55      	LSL  R21
0019ab 9587      	ROR  R24
                 
                 __UNPACK1:
0019ac e850      	LDI  R21,0x80
0019ad 2e07      	MOV  R0,R23
0019ae 2205      	AND  R0,R21
0019af 0f66      	LSL  R22
0019b0 1f77      	ROL  R23
0019b1 2775      	EOR  R23,R21
0019b2 0f55      	LSL  R21
0019b3 9567      	ROR  R22
0019b4 9508      	RET
                 
                 __CFD1U:
0019b5 9468      	SET
0019b6 c001      	RJMP __CFD1U0
                 __CFD1:
0019b7 94e8      	CLT
                 __CFD1U0:
0019b8 935f      	PUSH R21
0019b9 dff2      	RCALL __UNPACK1
0019ba 3870      	CPI  R23,0x80
0019bb f018      	BRLO __CFD10
0019bc 3f7f      	CPI  R23,0xFF
0019bd f408      	BRCC __CFD10
0019be c0a7      	RJMP __ZERORES
                 __CFD10:
0019bf e156      	LDI  R21,22
0019c0 1b57      	SUB  R21,R23
0019c1 f4aa      	BRPL __CFD11
0019c2 9551      	NEG  R21
0019c3 3058      	CPI  R21,8
0019c4 f40e      	BRTC __CFD19
0019c5 3059      	CPI  R21,9
                 __CFD19:
0019c6 f030      	BRLO __CFD17
0019c7 efef      	SER  R30
0019c8 efff      	SER  R31
0019c9 ef6f      	SER  R22
0019ca e77f      	LDI  R23,0x7F
0019cb f977      	BLD  R23,7
0019cc c01a      	RJMP __CFD15
                 __CFD17:
0019cd 2777      	CLR  R23
0019ce 2355      	TST  R21
0019cf f0b9      	BREQ __CFD15
                 __CFD18:
0019d0 0fee      	LSL  R30
0019d1 1fff      	ROL  R31
0019d2 1f66      	ROL  R22
0019d3 1f77      	ROL  R23
0019d4 955a      	DEC  R21
0019d5 f7d1      	BRNE __CFD18
0019d6 c010      	RJMP __CFD15
                 __CFD11:
0019d7 2777      	CLR  R23
                 __CFD12:
0019d8 3058      	CPI  R21,8
0019d9 f028      	BRLO __CFD13
0019da 2fef      	MOV  R30,R31
0019db 2ff6      	MOV  R31,R22
0019dc 2f67      	MOV  R22,R23
0019dd 5058      	SUBI R21,8
0019de cff9      	RJMP __CFD12
                 __CFD13:
0019df 2355      	TST  R21
0019e0 f031      	BREQ __CFD15
                 __CFD14:
0019e1 9576      	LSR  R23
0019e2 9567      	ROR  R22
0019e3 95f7      	ROR  R31
0019e4 95e7      	ROR  R30
0019e5 955a      	DEC  R21
0019e6 f7d1      	BRNE __CFD14
                 __CFD15:
0019e7 2000      	TST  R0
0019e8 f40a      	BRPL __CFD16
0019e9 d153      	RCALL __ANEGD1
                 __CFD16:
0019ea 915f      	POP  R21
0019eb 9508      	RET
                 
                 __CDF1U:
0019ec 9468      	SET
0019ed c001      	RJMP __CDF1U0
                 __CDF1:
0019ee 94e8      	CLT
                 __CDF1U0:
0019ef 9730      	SBIW R30,0
0019f0 4060      	SBCI R22,0
0019f1 4070      	SBCI R23,0
0019f2 f0b1      	BREQ __CDF10
0019f3 2400      	CLR  R0
0019f4 f026      	BRTS __CDF11
0019f5 2377      	TST  R23
0019f6 f412      	BRPL __CDF11
0019f7 9400      	COM  R0
0019f8 d144      	RCALL __ANEGD1
                 __CDF11:
0019f9 2e17      	MOV  R1,R23
0019fa e17e      	LDI  R23,30
0019fb 2011      	TST  R1
                 __CDF12:
0019fc f032      	BRMI __CDF13
0019fd 957a      	DEC  R23
0019fe 0fee      	LSL  R30
0019ff 1fff      	ROL  R31
001a00 1f66      	ROL  R22
001a01 1c11      	ROL  R1
001a02 cff9      	RJMP __CDF12
                 __CDF13:
001a03 2fef      	MOV  R30,R31
001a04 2ff6      	MOV  R31,R22
001a05 2d61      	MOV  R22,R1
001a06 935f      	PUSH R21
001a07 df8a      	RCALL __REPACK
001a08 915f      	POP  R21
                 __CDF10:
001a09 9508      	RET
                 
                 __SWAPACC:
001a0a 934f      	PUSH R20
001a0b 01af      	MOVW R20,R30
001a0c 01fd      	MOVW R30,R26
001a0d 01da      	MOVW R26,R20
001a0e 01ab      	MOVW R20,R22
001a0f 01bc      	MOVW R22,R24
001a10 01ca      	MOVW R24,R20
001a11 2d40      	MOV  R20,R0
001a12 2c01      	MOV  R0,R1
001a13 2e14      	MOV  R1,R20
001a14 914f      	POP  R20
001a15 9508      	RET
                 
                 __UADD12:
001a16 0fea      	ADD  R30,R26
001a17 1ffb      	ADC  R31,R27
001a18 1f68      	ADC  R22,R24
001a19 9508      	RET
                 
                 __NEGMAN1:
001a1a 95e0      	COM  R30
001a1b 95f0      	COM  R31
001a1c 9560      	COM  R22
001a1d 5fef      	SUBI R30,-1
001a1e 4fff      	SBCI R31,-1
001a1f 4f6f      	SBCI R22,-1
001a20 9508      	RET
                 
                 __SUBF12:
001a21 935f      	PUSH R21
001a22 df81      	RCALL __UNPACK
001a23 3890      	CPI  R25,0x80
001a24 f171      	BREQ __ADDF129
001a25 e850      	LDI  R21,0x80
001a26 2615      	EOR  R1,R21
                 
001a27 c004      	RJMP __ADDF120
                 
                 __ADDF12:
001a28 935f      	PUSH R21
001a29 df7a      	RCALL __UNPACK
001a2a 3890      	CPI  R25,0x80
001a2b f139      	BREQ __ADDF129
                 
                 __ADDF120:
001a2c 3870      	CPI  R23,0x80
001a2d f121      	BREQ __ADDF128
                 __ADDF121:
001a2e 2f57      	MOV  R21,R23
001a2f 1b59      	SUB  R21,R25
001a30 f12b      	BRVS __ADDF1211
001a31 f412      	BRPL __ADDF122
001a32 dfd7      	RCALL __SWAPACC
001a33 cffa      	RJMP __ADDF121
                 __ADDF122:
001a34 3158      	CPI  R21,24
001a35 f018      	BRLO __ADDF123
001a36 27aa      	CLR  R26
001a37 27bb      	CLR  R27
001a38 2788      	CLR  R24
                 __ADDF123:
001a39 3058      	CPI  R21,8
001a3a f028      	BRLO __ADDF124
001a3b 2fab      	MOV  R26,R27
001a3c 2fb8      	MOV  R27,R24
001a3d 2788      	CLR  R24
001a3e 5058      	SUBI R21,8
001a3f cff9      	RJMP __ADDF123
                 __ADDF124:
001a40 2355      	TST  R21
001a41 f029      	BREQ __ADDF126
                 __ADDF125:
001a42 9586      	LSR  R24
001a43 95b7      	ROR  R27
001a44 95a7      	ROR  R26
001a45 955a      	DEC  R21
001a46 f7d9      	BRNE __ADDF125
                 __ADDF126:
001a47 2d50      	MOV  R21,R0
001a48 2551      	EOR  R21,R1
001a49 f072      	BRMI __ADDF127
001a4a dfcb      	RCALL __UADD12
001a4b f438      	BRCC __ADDF129
001a4c 9567      	ROR  R22
001a4d 95f7      	ROR  R31
001a4e 95e7      	ROR  R30
001a4f 9573      	INC  R23
001a50 f413      	BRVC __ADDF129
001a51 c020      	RJMP __MAXRES
                 __ADDF128:
001a52 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001a53 df3e      	RCALL __REPACK
001a54 915f      	POP  R21
001a55 9508      	RET
                 __ADDF1211:
001a56 f7d8      	BRCC __ADDF128
001a57 cffb      	RJMP __ADDF129
                 __ADDF127:
001a58 1bea      	SUB  R30,R26
001a59 0bfb      	SBC  R31,R27
001a5a 0b68      	SBC  R22,R24
001a5b f051      	BREQ __ZERORES
001a5c f410      	BRCC __ADDF1210
001a5d 9400      	COM  R0
001a5e dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001a5f 2366      	TST  R22
001a60 f392      	BRMI __ADDF129
001a61 0fee      	LSL  R30
001a62 1fff      	ROL  R31
001a63 1f66      	ROL  R22
001a64 957a      	DEC  R23
001a65 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001a66 27ee      	CLR  R30
001a67 27ff      	CLR  R31
001a68 2766      	CLR  R22
001a69 2777      	CLR  R23
001a6a 915f      	POP  R21
001a6b 9508      	RET
                 
                 __MINRES:
001a6c efef      	SER  R30
001a6d efff      	SER  R31
001a6e e76f      	LDI  R22,0x7F
001a6f ef7f      	SER  R23
001a70 915f      	POP  R21
001a71 9508      	RET
                 
                 __MAXRES:
001a72 efef      	SER  R30
001a73 efff      	SER  R31
001a74 e76f      	LDI  R22,0x7F
001a75 e77f      	LDI  R23,0x7F
001a76 915f      	POP  R21
001a77 9508      	RET
                 
                 __MULF12:
001a78 935f      	PUSH R21
001a79 df2a      	RCALL __UNPACK
001a7a 3870      	CPI  R23,0x80
001a7b f351      	BREQ __ZERORES
001a7c 3890      	CPI  R25,0x80
001a7d f341      	BREQ __ZERORES
001a7e 2401      	EOR  R0,R1
001a7f 9408      	SEC
001a80 1f79      	ADC  R23,R25
001a81 f423      	BRVC __MULF124
001a82 f31c      	BRLT __ZERORES
                 __MULF125:
001a83 2000      	TST  R0
001a84 f33a      	BRMI __MINRES
001a85 cfec      	RJMP __MAXRES
                 __MULF124:
001a86 920f      	PUSH R0
001a87 931f      	PUSH R17
001a88 932f      	PUSH R18
001a89 933f      	PUSH R19
001a8a 934f      	PUSH R20
001a8b 2711      	CLR  R17
001a8c 2722      	CLR  R18
001a8d 2799      	CLR  R25
001a8e 9f68      	MUL  R22,R24
001a8f 01a0      	MOVW R20,R0
001a90 9f8f      	MUL  R24,R31
001a91 2d30      	MOV  R19,R0
001a92 0d41      	ADD  R20,R1
001a93 1f59      	ADC  R21,R25
001a94 9f6b      	MUL  R22,R27
001a95 0d30      	ADD  R19,R0
001a96 1d41      	ADC  R20,R1
001a97 1f59      	ADC  R21,R25
001a98 9f8e      	MUL  R24,R30
001a99 d027      	RCALL __MULF126
001a9a 9fbf      	MUL  R27,R31
001a9b d025      	RCALL __MULF126
001a9c 9f6a      	MUL  R22,R26
001a9d d023      	RCALL __MULF126
001a9e 9fbe      	MUL  R27,R30
001a9f d01d      	RCALL __MULF127
001aa0 9faf      	MUL  R26,R31
001aa1 d01b      	RCALL __MULF127
001aa2 9fae      	MUL  R26,R30
001aa3 0d11      	ADD  R17,R1
001aa4 1f29      	ADC  R18,R25
001aa5 1f39      	ADC  R19,R25
001aa6 1f49      	ADC  R20,R25
001aa7 1f59      	ADC  R21,R25
001aa8 2fe3      	MOV  R30,R19
001aa9 2ff4      	MOV  R31,R20
001aaa 2f65      	MOV  R22,R21
001aab 2f52      	MOV  R21,R18
001aac 914f      	POP  R20
001aad 913f      	POP  R19
001aae 912f      	POP  R18
001aaf 911f      	POP  R17
001ab0 900f      	POP  R0
001ab1 2366      	TST  R22
001ab2 f02a      	BRMI __MULF122
001ab3 0f55      	LSL  R21
001ab4 1fee      	ROL  R30
001ab5 1fff      	ROL  R31
001ab6 1f66      	ROL  R22
001ab7 c002      	RJMP __MULF123
                 __MULF122:
001ab8 9573      	INC  R23
001ab9 f24b      	BRVS __MULF125
                 __MULF123:
001aba decd      	RCALL __ROUND_REPACK
001abb 915f      	POP  R21
001abc 9508      	RET
                 
                 __MULF127:
001abd 0d10      	ADD  R17,R0
001abe 1d21      	ADC  R18,R1
001abf 1f39      	ADC  R19,R25
001ac0 c002      	RJMP __MULF128
                 __MULF126:
001ac1 0d20      	ADD  R18,R0
001ac2 1d31      	ADC  R19,R1
                 __MULF128:
001ac3 1f49      	ADC  R20,R25
001ac4 1f59      	ADC  R21,R25
001ac5 9508      	RET
                 
                 __DIVF21:
001ac6 935f      	PUSH R21
001ac7 dedc      	RCALL __UNPACK
001ac8 3870      	CPI  R23,0x80
001ac9 f421      	BRNE __DIVF210
001aca 2011      	TST  R1
                 __DIVF211:
001acb f40a      	BRPL __DIVF219
001acc cf9f      	RJMP __MINRES
                 __DIVF219:
001acd cfa4      	RJMP __MAXRES
                 __DIVF210:
001ace 3890      	CPI  R25,0x80
001acf f409      	BRNE __DIVF218
                 __DIVF217:
001ad0 cf95      	RJMP __ZERORES
                 __DIVF218:
001ad1 2401      	EOR  R0,R1
001ad2 9408      	SEC
001ad3 0b97      	SBC  R25,R23
001ad4 f41b      	BRVC __DIVF216
001ad5 f3d4      	BRLT __DIVF217
001ad6 2000      	TST  R0
001ad7 cff3      	RJMP __DIVF211
                 __DIVF216:
001ad8 2f79      	MOV  R23,R25
001ad9 931f      	PUSH R17
001ada 932f      	PUSH R18
001adb 933f      	PUSH R19
001adc 934f      	PUSH R20
001add 2411      	CLR  R1
001ade 2711      	CLR  R17
001adf 2722      	CLR  R18
001ae0 2733      	CLR  R19
001ae1 2744      	CLR  R20
001ae2 2755      	CLR  R21
001ae3 e290      	LDI  R25,32
                 __DIVF212:
001ae4 17ae      	CP   R26,R30
001ae5 07bf      	CPC  R27,R31
001ae6 0786      	CPC  R24,R22
001ae7 0741      	CPC  R20,R17
001ae8 f030      	BRLO __DIVF213
001ae9 1bae      	SUB  R26,R30
001aea 0bbf      	SBC  R27,R31
001aeb 0b86      	SBC  R24,R22
001aec 0b41      	SBC  R20,R17
001aed 9408      	SEC
001aee c001      	RJMP __DIVF214
                 __DIVF213:
001aef 9488      	CLC
                 __DIVF214:
001af0 1f55      	ROL  R21
001af1 1f22      	ROL  R18
001af2 1f33      	ROL  R19
001af3 1c11      	ROL  R1
001af4 1faa      	ROL  R26
001af5 1fbb      	ROL  R27
001af6 1f88      	ROL  R24
001af7 1f44      	ROL  R20
001af8 959a      	DEC  R25
001af9 f751      	BRNE __DIVF212
001afa 01f9      	MOVW R30,R18
001afb 2d61      	MOV  R22,R1
001afc 914f      	POP  R20
001afd 913f      	POP  R19
001afe 912f      	POP  R18
001aff 911f      	POP  R17
001b00 2366      	TST  R22
001b01 f032      	BRMI __DIVF215
001b02 0f55      	LSL  R21
001b03 1fee      	ROL  R30
001b04 1fff      	ROL  R31
001b05 1f66      	ROL  R22
001b06 957a      	DEC  R23
001b07 f243      	BRVS __DIVF217
                 __DIVF215:
001b08 de7f      	RCALL __ROUND_REPACK
001b09 915f      	POP  R21
001b0a 9508      	RET
                 
                 __CMPF12:
001b0b 2399      	TST  R25
001b0c f09a      	BRMI __CMPF120
001b0d 2377      	TST  R23
001b0e f042      	BRMI __CMPF121
001b0f 1797      	CP   R25,R23
001b10 f048      	BRLO __CMPF122
001b11 f429      	BRNE __CMPF121
001b12 17ae      	CP   R26,R30
001b13 07bf      	CPC  R27,R31
001b14 0786      	CPC  R24,R22
001b15 f020      	BRLO __CMPF122
001b16 f031      	BREQ __CMPF123
                 __CMPF121:
001b17 9498      	CLZ
001b18 9488      	CLC
001b19 9508      	RET
                 __CMPF122:
001b1a 9498      	CLZ
001b1b 9408      	SEC
001b1c 9508      	RET
                 __CMPF123:
001b1d 9418      	SEZ
001b1e 9488      	CLC
001b1f 9508      	RET
                 __CMPF120:
001b20 2377      	TST  R23
001b21 f7c2      	BRPL __CMPF122
001b22 1797      	CP   R25,R23
001b23 f398      	BRLO __CMPF121
001b24 f7a9      	BRNE __CMPF122
001b25 17ea      	CP   R30,R26
001b26 07fb      	CPC  R31,R27
001b27 0768      	CPC  R22,R24
001b28 f388      	BRLO __CMPF122
001b29 f399      	BREQ __CMPF123
001b2a cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
001b2b 2400      	CLR  R0
001b2c 0daf      	ADD  R26,R15
001b2d 1db0      	ADC  R27,R0
001b2e 9508      	RET
                 
                 __SUBD12:
001b2f 1bea      	SUB  R30,R26
001b30 0bfb      	SBC  R31,R27
001b31 0b68      	SBC  R22,R24
001b32 0b79      	SBC  R23,R25
001b33 9508      	RET
                 
                 __ORD12:
001b34 2bea      	OR   R30,R26
001b35 2bfb      	OR   R31,R27
001b36 2b68      	OR   R22,R24
001b37 2b79      	OR   R23,R25
001b38 9508      	RET
                 
                 __ANEGW1:
001b39 95f1      	NEG  R31
001b3a 95e1      	NEG  R30
001b3b 40f0      	SBCI R31,0
001b3c 9508      	RET
                 
                 __ANEGD1:
001b3d 95f0      	COM  R31
001b3e 9560      	COM  R22
001b3f 9570      	COM  R23
001b40 95e1      	NEG  R30
001b41 4fff      	SBCI R31,-1
001b42 4f6f      	SBCI R22,-1
001b43 4f7f      	SBCI R23,-1
001b44 9508      	RET
                 
                 __LSLD12:
001b45 23ee      	TST  R30
001b46 2e0e      	MOV  R0,R30
001b47 01fd      	MOVW R30,R26
001b48 01bc      	MOVW R22,R24
001b49 f031      	BREQ __LSLD12R
                 __LSLD12L:
001b4a 0fee      	LSL  R30
001b4b 1fff      	ROL  R31
001b4c 1f66      	ROL  R22
001b4d 1f77      	ROL  R23
001b4e 940a      	DEC  R0
001b4f f7d1      	BRNE __LSLD12L
                 __LSLD12R:
001b50 9508      	RET
                 
                 __ASRD12:
001b51 23ee      	TST  R30
001b52 2e0e      	MOV  R0,R30
001b53 01fd      	MOVW R30,R26
001b54 01bc      	MOVW R22,R24
001b55 f031      	BREQ __ASRD12R
                 __ASRD12L:
001b56 9575      	ASR  R23
001b57 9567      	ROR  R22
001b58 95f7      	ROR  R31
001b59 95e7      	ROR  R30
001b5a 940a      	DEC  R0
001b5b f7d1      	BRNE __ASRD12L
                 __ASRD12R:
001b5c 9508      	RET
                 
                 __LSLW4:
001b5d 0fee      	LSL  R30
001b5e 1fff      	ROL  R31
                 __LSLW3:
001b5f 0fee      	LSL  R30
001b60 1fff      	ROL  R31
                 __LSLW2:
001b61 0fee      	LSL  R30
001b62 1fff      	ROL  R31
001b63 0fee      	LSL  R30
001b64 1fff      	ROL  R31
001b65 9508      	RET
                 
                 __LSLD16:
001b66 2f6e      	MOV  R22,R30
001b67 2f7f      	MOV  R23,R31
001b68 e0e0      	LDI  R30,0
001b69 e0f0      	LDI  R31,0
001b6a 9508      	RET
                 
                 __CBD1:
001b6b 2ffe      	MOV  R31,R30
001b6c 0fff      	ADD  R31,R31
001b6d 0bff      	SBC  R31,R31
001b6e 2f6f      	MOV  R22,R31
001b6f 2f7f      	MOV  R23,R31
001b70 9508      	RET
                 
                 __CWD1:
001b71 2f6f      	MOV  R22,R31
001b72 0f66      	ADD  R22,R22
001b73 0b66      	SBC  R22,R22
001b74 2f76      	MOV  R23,R22
001b75 9508      	RET
                 
                 __MULW12U:
001b76 9ffa      	MUL  R31,R26
001b77 2df0      	MOV  R31,R0
001b78 9feb      	MUL  R30,R27
001b79 0df0      	ADD  R31,R0
001b7a 9fea      	MUL  R30,R26
001b7b 2de0      	MOV  R30,R0
001b7c 0df1      	ADD  R31,R1
001b7d 9508      	RET
                 
                 __MULW12:
001b7e d07e      	RCALL __CHKSIGNW
001b7f dff6      	RCALL __MULW12U
001b80 f40e      	BRTC __MULW121
001b81 dfb7      	RCALL __ANEGW1
                 __MULW121:
001b82 9508      	RET
                 
                 __DIVB21U:
001b83 2400      	CLR  R0
001b84 e098      	LDI  R25,8
                 __DIVB21U1:
001b85 0faa      	LSL  R26
001b86 1c00      	ROL  R0
001b87 1a0e      	SUB  R0,R30
001b88 f410      	BRCC __DIVB21U2
001b89 0e0e      	ADD  R0,R30
001b8a c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001b8b 60a1      	SBR  R26,1
                 __DIVB21U3:
001b8c 959a      	DEC  R25
001b8d f7b9      	BRNE __DIVB21U1
001b8e 2fea      	MOV  R30,R26
001b8f 2da0      	MOV  R26,R0
001b90 9508      	RET
                 
                 __DIVB21:
001b91 d05f      	RCALL __CHKSIGNB
001b92 dff0      	RCALL __DIVB21U
001b93 f40e      	BRTC __DIVB211
001b94 95e1      	NEG  R30
                 __DIVB211:
001b95 9508      	RET
                 
                 __DIVW21U:
001b96 2400      	CLR  R0
001b97 2411      	CLR  R1
001b98 e190      	LDI  R25,16
                 __DIVW21U1:
001b99 0faa      	LSL  R26
001b9a 1fbb      	ROL  R27
001b9b 1c00      	ROL  R0
001b9c 1c11      	ROL  R1
001b9d 1a0e      	SUB  R0,R30
001b9e 0a1f      	SBC  R1,R31
001b9f f418      	BRCC __DIVW21U2
001ba0 0e0e      	ADD  R0,R30
001ba1 1e1f      	ADC  R1,R31
001ba2 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001ba3 60a1      	SBR  R26,1
                 __DIVW21U3:
001ba4 959a      	DEC  R25
001ba5 f799      	BRNE __DIVW21U1
001ba6 01fd      	MOVW R30,R26
001ba7 01d0      	MOVW R26,R0
001ba8 9508      	RET
                 
                 __DIVW21:
001ba9 d053      	RCALL __CHKSIGNW
001baa dfeb      	RCALL __DIVW21U
001bab f40e      	BRTC __DIVW211
001bac df8c      	RCALL __ANEGW1
                 __DIVW211:
001bad 9508      	RET
                 
                 __DIVD21U:
001bae 933f      	PUSH R19
001baf 934f      	PUSH R20
001bb0 935f      	PUSH R21
001bb1 2400      	CLR  R0
001bb2 2411      	CLR  R1
001bb3 2744      	CLR  R20
001bb4 2755      	CLR  R21
001bb5 e230      	LDI  R19,32
                 __DIVD21U1:
001bb6 0faa      	LSL  R26
001bb7 1fbb      	ROL  R27
001bb8 1f88      	ROL  R24
001bb9 1f99      	ROL  R25
001bba 1c00      	ROL  R0
001bbb 1c11      	ROL  R1
001bbc 1f44      	ROL  R20
001bbd 1f55      	ROL  R21
001bbe 1a0e      	SUB  R0,R30
001bbf 0a1f      	SBC  R1,R31
001bc0 0b46      	SBC  R20,R22
001bc1 0b57      	SBC  R21,R23
001bc2 f428      	BRCC __DIVD21U2
001bc3 0e0e      	ADD  R0,R30
001bc4 1e1f      	ADC  R1,R31
001bc5 1f46      	ADC  R20,R22
001bc6 1f57      	ADC  R21,R23
001bc7 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001bc8 60a1      	SBR  R26,1
                 __DIVD21U3:
001bc9 953a      	DEC  R19
001bca f759      	BRNE __DIVD21U1
001bcb 01fd      	MOVW R30,R26
001bcc 01bc      	MOVW R22,R24
001bcd 01d0      	MOVW R26,R0
001bce 01ca      	MOVW R24,R20
001bcf 915f      	POP  R21
001bd0 914f      	POP  R20
001bd1 913f      	POP  R19
001bd2 9508      	RET
                 
                 __MODB21:
001bd3 94e8      	CLT
001bd4 ffa7      	SBRS R26,7
001bd5 c002      	RJMP __MODB211
001bd6 95a1      	NEG  R26
001bd7 9468      	SET
                 __MODB211:
001bd8 fde7      	SBRC R30,7
001bd9 95e1      	NEG  R30
001bda dfa8      	RCALL __DIVB21U
001bdb 2fea      	MOV  R30,R26
001bdc f40e      	BRTC __MODB212
001bdd 95e1      	NEG  R30
                 __MODB212:
001bde 9508      	RET
                 
                 __MODW21:
001bdf 94e8      	CLT
001be0 ffb7      	SBRS R27,7
001be1 c004      	RJMP __MODW211
001be2 95a0      	COM  R26
001be3 95b0      	COM  R27
001be4 9611      	ADIW R26,1
001be5 9468      	SET
                 __MODW211:
001be6 fdf7      	SBRC R31,7
001be7 df51      	RCALL __ANEGW1
001be8 dfad      	RCALL __DIVW21U
001be9 01fd      	MOVW R30,R26
001bea f40e      	BRTC __MODW212
001beb df4d      	RCALL __ANEGW1
                 __MODW212:
001bec 9508      	RET
                 
                 __MODD21U:
001bed dfc0      	RCALL __DIVD21U
001bee 01fd      	MOVW R30,R26
001bef 01bc      	MOVW R22,R24
001bf0 9508      	RET
                 
                 __CHKSIGNB:
001bf1 94e8      	CLT
001bf2 ffe7      	SBRS R30,7
001bf3 c002      	RJMP __CHKSB1
001bf4 95e1      	NEG  R30
001bf5 9468      	SET
                 __CHKSB1:
001bf6 ffa7      	SBRS R26,7
001bf7 c004      	RJMP __CHKSB2
001bf8 95a1      	NEG  R26
001bf9 f800      	BLD  R0,0
001bfa 9403      	INC  R0
001bfb fa00      	BST  R0,0
                 __CHKSB2:
001bfc 9508      	RET
                 
                 __CHKSIGNW:
001bfd 94e8      	CLT
001bfe fff7      	SBRS R31,7
001bff c002      	RJMP __CHKSW1
001c00 df38      	RCALL __ANEGW1
001c01 9468      	SET
                 __CHKSW1:
001c02 ffb7      	SBRS R27,7
001c03 c006      	RJMP __CHKSW2
001c04 95a0      	COM  R26
001c05 95b0      	COM  R27
001c06 9611      	ADIW R26,1
001c07 f800      	BLD  R0,0
001c08 9403      	INC  R0
001c09 fa00      	BST  R0,0
                 __CHKSW2:
001c0a 9508      	RET
                 
                 __GETW1P:
001c0b 91ed      	LD   R30,X+
001c0c 91fc      	LD   R31,X
001c0d 9711      	SBIW R26,1
001c0e 9508      	RET
                 
                 __GETD1P:
001c0f 91ed      	LD   R30,X+
001c10 91fd      	LD   R31,X+
001c11 916d      	LD   R22,X+
001c12 917c      	LD   R23,X
001c13 9713      	SBIW R26,3
001c14 9508      	RET
                 
                 __GETD1P_INC:
001c15 91ed      	LD   R30,X+
001c16 91fd      	LD   R31,X+
001c17 916d      	LD   R22,X+
001c18 917d      	LD   R23,X+
001c19 9508      	RET
                 
                 __PUTDP1:
001c1a 93ed      	ST   X+,R30
001c1b 93fd      	ST   X+,R31
001c1c 936d      	ST   X+,R22
001c1d 937c      	ST   X,R23
001c1e 9508      	RET
                 
                 __PUTDP1_DEC:
001c1f 937e      	ST   -X,R23
001c20 936e      	ST   -X,R22
001c21 93fe      	ST   -X,R31
001c22 93ee      	ST   -X,R30
001c23 9508      	RET
                 
                 __GETD1S0:
001c24 81e8      	LD   R30,Y
001c25 81f9      	LDD  R31,Y+1
001c26 816a      	LDD  R22,Y+2
001c27 817b      	LDD  R23,Y+3
001c28 9508      	RET
                 
                 __PUTD1S0:
001c29 83e8      	ST   Y,R30
001c2a 83f9      	STD  Y+1,R31
001c2b 836a      	STD  Y+2,R22
001c2c 837b      	STD  Y+3,R23
001c2d 9508      	RET
                 
                 __PUTPARD1:
001c2e 937a      	ST   -Y,R23
001c2f 936a      	ST   -Y,R22
001c30 93fa      	ST   -Y,R31
001c31 93ea      	ST   -Y,R30
001c32 9508      	RET
                 
                 __SWAPD12:
001c33 2e18      	MOV  R1,R24
001c34 2f86      	MOV  R24,R22
001c35 2d61      	MOV  R22,R1
001c36 2e19      	MOV  R1,R25
001c37 2f97      	MOV  R25,R23
001c38 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001c39 2e1b      	MOV  R1,R27
001c3a 2fbf      	MOV  R27,R31
001c3b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001c3c 2e1a      	MOV  R1,R26
001c3d 2fae      	MOV  R26,R30
001c3e 2de1      	MOV  R30,R1
001c3f 9508      	RET
                 
                 __CPD10:
001c40 9730      	SBIW R30,0
001c41 4060      	SBCI R22,0
001c42 4070      	SBCI R23,0
001c43 9508      	RET
                 
                 __CPD02:
001c44 2400      	CLR  R0
001c45 160a      	CP   R0,R26
001c46 060b      	CPC  R0,R27
001c47 0608      	CPC  R0,R24
001c48 0609      	CPC  R0,R25
001c49 9508      	RET
                 
                 __CPD21:
001c4a 17ae      	CP   R26,R30
001c4b 07bf      	CPC  R27,R31
001c4c 0786      	CPC  R24,R22
001c4d 0797      	CPC  R25,R23
001c4e 9508      	RET
                 
                 __SAVELOCR6:
001c4f 935a      	ST   -Y,R21
                 __SAVELOCR5:
001c50 934a      	ST   -Y,R20
                 __SAVELOCR4:
001c51 933a      	ST   -Y,R19
                 __SAVELOCR3:
001c52 932a      	ST   -Y,R18
                 __SAVELOCR2:
001c53 931a      	ST   -Y,R17
001c54 930a      	ST   -Y,R16
001c55 9508      	RET
                 
                 __LOADLOCR6:
001c56 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001c57 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001c58 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001c59 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001c5a 8119      	LDD  R17,Y+1
001c5b 8108      	LD   R16,Y
001c5c 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
001c5d 0fac      	ADD  R26,R28
001c5e 1fbd      	ADC  R27,R29
                 __INITLOC0:
001c5f 9005      	LPM  R0,Z+
001c60 920d      	ST   X+,R0
001c61 958a      	DEC  R24
001c62 f7e1      	BRNE __INITLOC0
001c63 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 : 135 r1 :  42 r2 :   0 r3 :   4 r4 :   4 r5 :   4 r6 :   4 r7 :   7 
r8 :   7 r9 :   4 r10:   4 r11:   4 r12:   4 r13:   7 r14:   7 r15:   7 
r16: 168 r17: 261 r18: 102 r19:  72 r20:  69 r21: 103 r22: 298 r23: 271 
r24: 179 r25: 122 r26: 541 r27: 281 r28: 238 r29:   2 r30:1849 r31: 922 
x  : 134 y  :1458 z  :  77 
Registers used: 34 out of 35 (97.1%)

ATmega2560 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  63 add   :  61 
adiw  : 171 and   :   6 andi  :  15 asr   :   1 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :  11 brcs  :   5 break :   0 breq  : 110 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  36 
brlt  :   4 brmi  :  12 brne  : 137 brpl  :   9 brsh  :  21 brtc  :   7 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 386 
cbi   :  12 cbr   :   2 clc   :   3 clh   :   0 cli   :   5 cln   :   0 
clr   : 142 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  12 
cp    :  28 cpc   :  56 cpi   : 151 cpse  :   0 dec   :  29 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :  11 ijmp  :   0 in    :  14 inc   :   4 jmp   :  94 
ld    : 143 ldd   : 560 ldi   : 980 lds   : 108 lpm   :  17 lsl   :  27 
lsr   :   3 mov   : 279 movw  : 234 mul   :  14 muls  :   0 mulsu :   0 
neg   :  11 nop   :   0 or    :  12 ori   :   8 out   :  28 pop   :  45 
push  :  45 rcall : 100 ret   :  94 reti  :   2 rjmp  : 218 rol   :  43 
ror   :  18 sbc   :  24 sbci  : 121 sbi   :  18 sbic  :   2 sbis  :   2 
sbiw  : 118 sbr   :   5 sbrc  :   5 sbrs  :  23 sec   :   5 seh   :   0 
sei   :   5 sen   :   0 ser   :   8 ses   :   0 set   :   6 sev   :   0 
sez   :   1 sleep :   0 spm   :   0 st    : 682 std   : 271 sts   : 107 
sub   :  17 subi  : 166 swap  :   0 tst   :  33 wdr   :   2 
Instructions used: 83 out of 119 (69.7%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0038c8  13918    618  14536  262144   5.5%
[.dseg] 0x000200 0x0014c0      0   2752   2752    8192  33.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 12 warnings
