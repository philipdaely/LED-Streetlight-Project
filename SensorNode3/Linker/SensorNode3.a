;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <delay.h>
;#include <stdlib.h>
;
;#define TXB8 0
;#define RXB8 1
;#define UPE 2
;#define DOR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define STX 0x02
;#define ETX 0x03
;#define delimiter 0x3A
;#define CR 0x0D
;#define LF 0x0A
;#define DEV_ID 0x3531  //the 16-bit ID for coordinator, taken from the least significant 16-bit of zigbee xbee 64-bit address
;#define COORDID1 DEV_ID>>8
;#define COORDID2 (char)DEV_ID
;#define RX_BUFFER_SIZE0 100
;#define RX_BUFFER_SIZE1 100
;#define RX_BUFFER_SIZE2 50
;#define USART0 0
;#define USART1 1
;#define USART2 2
;#define ADC_VREF_TYPE 0x40
;#define _ALTERNATE_GETCHAR_
;#define _ALTERNATE_PUTCHAR_
;
;char dev_id_chk[5];
;// arbitrary data
;float temperature;
;float humidity;
;unsigned int dustconcentration;
;float current3k=0;
;float current5k=1.5;

	.DSEG
;unsigned int voltage3k=0;
;unsigned int voltage5k=260;
;
;char rx_buffer0[RX_BUFFER_SIZE0],rx_buffer1[RX_BUFFER_SIZE1],rx_buffer2[RX_BUFFER_SIZE2];
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
;bit rx_buffer_overflow0,rx_buffer_overflow1,rx_buffer_overflow2;
;unsigned char poutput;
;volatile unsigned long milSecCounter;
;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 003A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003B     char status,data;
; 0000 003C     status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003D     data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003E     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003F     {
; 0000 0040         rx_buffer0[rx_wr_index0]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0041         if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0042         if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0043         {
; 0000 0044             rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0045             rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0046         };
;PCODE: $00000029 VOL: 0
; 0000 0047     };
;PCODE: $0000002A VOL: 0
; 0000 0048 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 004C {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004D     char status,data;
; 0000 004E     status=UCSR1A;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004F     data=UDR1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0050     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0051         {
; 0000 0052             rx_buffer1[rx_wr_index1]=data;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0053             if (++rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0054             if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0055                 {
; 0000 0056                     rx_counter1=0;
;PCODE: $00000048 VOL: 0
; 0000 0057                     rx_buffer_overflow1=1;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0058                 };
;PCODE: $0000004B VOL: 0
; 0000 0059         };
;PCODE: $0000004C VOL: 0
; 0000 005A }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;// USART2 Receiver interrupt service routine
;interrupt [USART2_RXC] void usart2_rx_isr(void)
; 0000 005E {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005F     char status,data;
; 0000 0060     status=UCSR2A;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0061     data=UDR2;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0062     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0063         {
; 0000 0064             rx_buffer2[rx_wr_index2]=data;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0065             if (++rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0066             if (++rx_counter2 == RX_BUFFER_SIZE2)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0067                 {
; 0000 0068                     rx_counter2=0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0069                     rx_buffer_overflow2=1;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006A                 };
;PCODE: $00000071 VOL: 0
; 0000 006B         };
;PCODE: $00000072 VOL: 0
; 0000 006C }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) // Timer 0 overflow interrupt service routine, called every 1.024 ms (250 kHz)
; 0000 006F {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0070     milSecCounter++;
;PCODE: $00000079 VOL: 1
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0071 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0075 {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0076     ADMUX=(adc_input & 0x07) | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0077     if (adc_input & 0x08) ADCSRB |= 0x08;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0078     else ADCSRB &= 0xf7;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0079     // Delay needed for the stabilization of the ADC input voltage
; 0000 007A     delay_us(10);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 007B     // Start the AD conversion
; 0000 007C     ADCSRA|=0x40;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 007D     // Wait for the AD conversion to complete
; 0000 007E     while ((ADCSRA & 0x10)==0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 007F     ADCSRA|=0x10;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0080     return ADCW;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0081 }
;PCODE: $000000A2 VOL: 0
;
;// Get a character from the USART Receiver buffer
;char getchar(void)
; 0000 0085 {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0086     char data;
; 0000 0087     switch(poutput)
;PCODE: $000000A5 VOL: 0
;	data -> R17
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0088         {
; 0000 0089             case USART0:
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008A                 while (rx_counter0==0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 008B                 data=rx_buffer0[rx_rd_index0];
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 008C                 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 008D                 #asm("cli")
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
	cli
;PCODE: $000000BA VOL: 0
; 0000 008E                 --rx_counter0;
;PCODE: $000000BB VOL: 0
; 0000 008F                 #asm("sei")
;PCODE: $000000BC VOL: 0
	sei
;PCODE: $000000BD VOL: 0
; 0000 0090                 return data;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0091             break;
;PCODE: $000000C1 VOL: 0
; 0000 0092 
; 0000 0093             case USART1:
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0094                 while (rx_counter1==0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0095                 data=rx_buffer1[rx_rd_index1];
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0096                 if (++rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0097                 #asm("cli")
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
	cli
;PCODE: $000000D5 VOL: 0
; 0000 0098                 --rx_counter1;
;PCODE: $000000D6 VOL: 0
; 0000 0099                 #asm("sei")
;PCODE: $000000D7 VOL: 0
	sei
;PCODE: $000000D8 VOL: 0
; 0000 009A                 return data;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 009B             break;
;PCODE: $000000DC VOL: 0
; 0000 009C 
; 0000 009D             case USART2:
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 009E                 while (rx_counter2==0);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 009F                 data=rx_buffer2[rx_rd_index2];
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00A0                 if (++rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00A1                 #asm("cli")
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
	cli
;PCODE: $000000F3 VOL: 0
; 0000 00A2                 --rx_counter2;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00A3                 #asm("sei")
;PCODE: $000000F7 VOL: 0
	sei
;PCODE: $000000F8 VOL: 0
; 0000 00A4                 return data;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00A5             break;
;PCODE: $000000FC VOL: 0
; 0000 00A6         }
;PCODE: $000000FD VOL: 0
; 0000 00A7 }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;
;// Write a character to the USART Transmitter
;void putchar(char c)
; 0000 00AB {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00AC     switch(poutput)
;	c -> Y+0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00AD         {
; 0000 00AE             case USART0:
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00AF                 while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00B0                 UDR0=c;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B1             break;
;PCODE: $0000010F VOL: 0
; 0000 00B2 
; 0000 00B3             case USART1:
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00B4                 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00B5                 UDR1=c;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00B6             break;
;PCODE: $0000011B VOL: 0
; 0000 00B7 
; 0000 00B8             case USART2:
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B9                 while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00BA                 UDR2=c;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00BB             break;
;PCODE: $00000127 VOL: 0
; 0000 00BC         }
;PCODE: $00000128 VOL: 0
; 0000 00BD }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;
;unsigned int serialAvailable(void)
; 0000 00C0 {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C1     switch(poutput)
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00C2         {
; 0000 00C3             case USART0:
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00C4                 return rx_counter0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00C5             break;
;PCODE: $00000135 VOL: 0
; 0000 00C6 
; 0000 00C7             case USART1:
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C8                 return rx_counter1;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00C9             break;
;PCODE: $0000013C VOL: 0
; 0000 00CA 
; 0000 00CB             case USART2:
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00CC                 return rx_counter2;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00CD             break;
;PCODE: $00000143 VOL: 0
; 0000 00CE         }
;PCODE: $00000144 VOL: 0
; 0000 00CF }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;
;void get_request_and_send_response(void)
; 0000 00D2 {
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00D3     unsigned char array_index;
; 0000 00D4     char received_byte;
; 0000 00D5     char serial_command[10];
; 0000 00D6     poutput=USART0;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;	array_index -> R17
;	received_byte -> R16
;	serial_command -> Y+2
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00D7     if (serialAvailable()>5)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00D8         {
; 0000 00D9             received_byte=getchar();
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00DA             if (received_byte==STX)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00DB                 {
; 0000 00DC                     array_index=0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00DD                     do
;PCODE: $00000158 VOL: 0
; 0000 00DE                         {
; 0000 00DF                             received_byte=getchar();
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00E0                             serial_command[array_index]=received_byte;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00E1                             ++array_index;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00E2                         }
; 0000 00E3                     while (received_byte!=ETX);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00E4                     if (strstr(serial_command,dev_id_chk)!=NULL)
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00E5                         {
; 0000 00E6                             if (strstr(serial_command,":P")!=NULL)  printf("%c%c%cT%+04.1fH%04.1f3V%03uI%03.1f5V%03uI%03.1fD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,voltage3k,current3k,voltage5k,current5k,dustconcentration,ETX,CR,LF);  // periodic data request
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00E7                             else if (strstr(serial_command,":ON3K")!=NULL)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00E8                                 {
; 0000 00E9                                     current3k=1.5;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00EA                                     voltage3k=260;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00EB                                 }
; 0000 00EC                             else if (strstr(serial_command,":ON5K")!=NULL)
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00ED                                 {
; 0000 00EE                                     current5k=1.5;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00EF                                     voltage5k=260;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00F0                                 }
; 0000 00F1                             else if (strstr(serial_command,":OFF3K")!=NULL)
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00F2                                 {
; 0000 00F3                                     current3k=0.0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00F4                                     voltage3k=0;
;PCODE: $000001C3 VOL: 0
; 0000 00F5                                 }
; 0000 00F6                             else if (strstr(serial_command,":OFF5K")!=NULL)
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00F7                                 {
; 0000 00F8                                     current5k=0.0;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00F9                                     voltage5k=0;
;PCODE: $000001D0 VOL: 0
; 0000 00FA                                 }
; 0000 00FB                             else if (strstr(serial_command,":TH")!=NULL) printf("%c%c%cT%+04.1fH%04.1f%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,ETX,CR,LF);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00FC                             else if (strstr(serial_command,":VI")!=NULL) printf("%c%c%c3V%03uI%03.1f5V%03uI%03.1f%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),voltage3k,current3k,voltage5k,current5k,ETX,CR,LF);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00FD                             else if (strstr(serial_command,":D")!=NULL) printf("%c%c%cD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),dustconcentration,ETX,CR,LF);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 00FE                             memset(serial_command,0,sizeof(serial_command));
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 00FF                         }
; 0000 0100                     else if (strstr(serial_command,dev_id_chk)==NULL)
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0101                         {
; 0000 0102                             memset(serial_command,0,sizeof(serial_command));
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0103                         }
; 0000 0104                 }
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0105         }
;PCODE: $0000025A VOL: 0
; 0000 0106 }
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0

	.DSEG
_0x46:
	.BYTE 0x28
;
;void mcuInit(void)
; 0000 0109 {

	.CSEG
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 010A     // Crystal Oscillator division factor: 1
; 0000 010B     #pragma optsize-
; 0000 010C     CLKPR=0x80;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 010D     CLKPR=0x00;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 010E     #ifdef _OPTIMIZE_SIZE_
; 0000 010F     #pragma optsize+
; 0000 0110     #endif
; 0000 0111 
; 0000 0112     TCCR0A=0x00;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0113     TCCR0B=0x03;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0114     TCNT0=0x00;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0115     OCR0A=0x00;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0116     OCR0B=0x00;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0117     TIMSK0=0x01;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0118 
; 0000 0119     // USART0 initialization
; 0000 011A     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 011B     // USART0 Receiver: On
; 0000 011C     // USART0 Transmitter: On
; 0000 011D     // USART0 Mode: Asynchronous
; 0000 011E     // USART0 Baud Rate: 9600
; 0000 011F     UCSR0A=0x00;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0120     UCSR0B=0x98;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0121     UCSR0C=0x06;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0122     UBRR0H=0x00;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 0123     UBRR0L=0x67;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0124 
; 0000 0125     // USART1 initialization
; 0000 0126     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0127     // USART1 Receiver: On
; 0000 0128     // USART1 Transmitter: On
; 0000 0129     // USART1 Mode: Asynchronous
; 0000 012A     // USART1 Baud Rate: 9600
; 0000 012B     UCSR1A=0x00;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 012C     UCSR1B=0x98;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 012D     UCSR1C=0x06;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 012E     UBRR1H=0x00;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 012F     UBRR1L=0x67;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0130 
; 0000 0131     // USART2 initialization
; 0000 0132     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0133     // USART2 Receiver: On
; 0000 0134     // USART2 Transmitter: On
; 0000 0135     // USART2 Mode: Asynchronous
; 0000 0136     // USART2 Baud Rate: 9600
; 0000 0137     UCSR2A=0x00;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0138     UCSR2B=0x98;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0139     UCSR2C=0x06;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 013A     UBRR2H=0x00;
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 013B     UBRR2L=0x67;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 013C 
; 0000 013D     // Analog Comparator initialization
; 0000 013E     // Analog Comparator: Off
; 0000 013F     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0140     ACSR=0x80;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0141     ADCSRB=0x00;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0142 
; 0000 0143     // ADC initialization
; 0000 0144     // ADC Clock frequency: 1000.000 kHz
; 0000 0145     // ADC Voltage Reference: AVCC pin
; 0000 0146     // ADC Auto Trigger Source: Free Running
; 0000 0147     // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 0148     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 0149     DIDR0=0x0F;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 014A     // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
; 0000 014B     // ADC12: On, ADC13: On, ADC14: On, ADC15: On
; 0000 014C     DIDR2=0x00;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 014D     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 014E     ADCSRA=0xA4;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 014F     ADCSRB&=0xF8;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0150 
; 0000 0151     #asm("sei")
;PCODE: $000002A2 VOL: 0
	sei
;PCODE: $000002A3 VOL: 0
; 0000 0152 }
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;
;void main(void)
; 0000 0155 {
;PCODE: $000002A6 VOL: 0
; 0000 0156     unsigned long timecounter;
; 0000 0157     int randval;
; 0000 0158     mcuInit();
;PCODE: $000002A7 VOL: 0
;	timecounter -> Y+0
;	randval -> R16,R17
;PCODE: $000002A8 VOL: 0
; 0000 0159     sprintf(dev_id_chk,"%c%c:",DEV_ID>>8,DEV_ID);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 015A     milSecCounter=0;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 1
; 0000 015B     timecounter=milSecCounter;
;PCODE: $000002B8 VOL: 1
;PCODE: $000002B9 VOL: 0
; 0000 015C     while ((milSecCounter-timecounter)<14999);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 1
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 015D     while (1)
;PCODE: $000002C2 VOL: 0
; 0000 015E         {
; 0000 015F             if ((milSecCounter-timecounter)>=19999)
;PCODE: $000002C3 VOL: 1
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0160                 {
; 0000 0161                     randval=rand();
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0162                     temperature=((0.6*randval)/32767.0)+6.7; // random from 6.7 to 7.3
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0163                     humidity=5.0*randval/32767.0+55.0; //  random from 55 to 60
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0164                     dustconcentration=5.0*randval/32767.0+65.0; //  random from 65 to 70
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0165                     printf("%c%c%cT%+04.1fH%04.1f3V%03uI%03.1f5V%03uI%03.1fD%03u%c%c%c",STX,(char)(DEV_ID>>8),(char)(DEV_ID),temperature,humidity,voltage3k,current3k,voltage5k,current5k,dustconcentration,ETX,CR,LF);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0166                     milSecCounter=0;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 1
; 0000 0167                     timecounter=milSecCounter;
;PCODE: $0000030F VOL: 1
;PCODE: $00000310 VOL: 0
; 0000 0168                 }
; 0000 0169             get_request_and_send_response();
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 016A         };
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 016B }
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
